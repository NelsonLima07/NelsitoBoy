
NelsitoBoyV2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000021b8  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000218  08002390  08002390  00003390  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080025a8  080025a8  0000400c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080025a8  080025a8  0000400c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080025a8  080025a8  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080025a8  080025a8  000035a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080025ac  080025ac  000035ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080025b0  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000088  2000000c  080025bc  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000094  080025bc  00004094  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007b1b  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a0c  00000000  00000000  0000bb57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000868  00000000  00000000  0000d568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000639  00000000  00000000  0000ddd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c207  00000000  00000000  0000e409  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a29f  00000000  00000000  0002a610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b2934  00000000  00000000  000348af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e71e3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001fe4  00000000  00000000  000e7228  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000e920c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08002378 	.word	0x08002378

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08002378 	.word	0x08002378

08000218 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b088      	sub	sp, #32
 800021c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800021e:	f107 030c 	add.w	r3, r7, #12
 8000222:	2200      	movs	r2, #0
 8000224:	601a      	str	r2, [r3, #0]
 8000226:	605a      	str	r2, [r3, #4]
 8000228:	609a      	str	r2, [r3, #8]
 800022a:	60da      	str	r2, [r3, #12]
 800022c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800022e:	4b1e      	ldr	r3, [pc, #120]	@ (80002a8 <MX_GPIO_Init+0x90>)
 8000230:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000232:	4a1d      	ldr	r2, [pc, #116]	@ (80002a8 <MX_GPIO_Init+0x90>)
 8000234:	f043 0320 	orr.w	r3, r3, #32
 8000238:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800023a:	4b1b      	ldr	r3, [pc, #108]	@ (80002a8 <MX_GPIO_Init+0x90>)
 800023c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800023e:	f003 0320 	and.w	r3, r3, #32
 8000242:	60bb      	str	r3, [r7, #8]
 8000244:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000246:	4b18      	ldr	r3, [pc, #96]	@ (80002a8 <MX_GPIO_Init+0x90>)
 8000248:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800024a:	4a17      	ldr	r2, [pc, #92]	@ (80002a8 <MX_GPIO_Init+0x90>)
 800024c:	f043 0301 	orr.w	r3, r3, #1
 8000250:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000252:	4b15      	ldr	r3, [pc, #84]	@ (80002a8 <MX_GPIO_Init+0x90>)
 8000254:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000256:	f003 0301 	and.w	r3, r3, #1
 800025a:	607b      	str	r3, [r7, #4]
 800025c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800025e:	4b12      	ldr	r3, [pc, #72]	@ (80002a8 <MX_GPIO_Init+0x90>)
 8000260:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000262:	4a11      	ldr	r2, [pc, #68]	@ (80002a8 <MX_GPIO_Init+0x90>)
 8000264:	f043 0302 	orr.w	r3, r3, #2
 8000268:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800026a:	4b0f      	ldr	r3, [pc, #60]	@ (80002a8 <MX_GPIO_Init+0x90>)
 800026c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800026e:	f003 0302 	and.w	r3, r3, #2
 8000272:	603b      	str	r3, [r7, #0]
 8000274:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 8000276:	2200      	movs	r2, #0
 8000278:	2107      	movs	r1, #7
 800027a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800027e:	f000 ff07 	bl	8001090 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000282:	2307      	movs	r3, #7
 8000284:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000286:	2301      	movs	r3, #1
 8000288:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800028a:	2300      	movs	r3, #0
 800028c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800028e:	2303      	movs	r3, #3
 8000290:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000292:	f107 030c 	add.w	r3, r7, #12
 8000296:	4619      	mov	r1, r3
 8000298:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800029c:	f000 fd76 	bl	8000d8c <HAL_GPIO_Init>

}
 80002a0:	bf00      	nop
 80002a2:	3720      	adds	r7, #32
 80002a4:	46bd      	mov	sp, r7
 80002a6:	bd80      	pop	{r7, pc}
 80002a8:	40021000 	.word	0x40021000

080002ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002b0:	f000 fbf5 	bl	8000a9e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002b4:	f000 f808 	bl	80002c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002b8:	f7ff ffae 	bl	8000218 <MX_GPIO_Init>
  MX_SPI1_Init();
 80002bc:	f000 f856 	bl	800036c <MX_SPI1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  main_nelsitoboy();
 80002c0:	f000 fb94 	bl	80009ec <main_nelsitoboy>
  while (1)
 80002c4:	bf00      	nop
 80002c6:	e7fd      	b.n	80002c4 <main+0x18>

080002c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b094      	sub	sp, #80	@ 0x50
 80002cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ce:	f107 0318 	add.w	r3, r7, #24
 80002d2:	2238      	movs	r2, #56	@ 0x38
 80002d4:	2100      	movs	r1, #0
 80002d6:	4618      	mov	r0, r3
 80002d8:	f002 f822 	bl	8002320 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002dc:	1d3b      	adds	r3, r7, #4
 80002de:	2200      	movs	r2, #0
 80002e0:	601a      	str	r2, [r3, #0]
 80002e2:	605a      	str	r2, [r3, #4]
 80002e4:	609a      	str	r2, [r3, #8]
 80002e6:	60da      	str	r2, [r3, #12]
 80002e8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80002ea:	2000      	movs	r0, #0
 80002ec:	f000 fee8 	bl	80010c0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002f0:	2302      	movs	r3, #2
 80002f2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002f4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80002f8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002fa:	2340      	movs	r3, #64	@ 0x40
 80002fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002fe:	2302      	movs	r3, #2
 8000300:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000302:	2302      	movs	r3, #2
 8000304:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000306:	2304      	movs	r3, #4
 8000308:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800030a:	2355      	movs	r3, #85	@ 0x55
 800030c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800030e:	2302      	movs	r3, #2
 8000310:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000312:	2302      	movs	r3, #2
 8000314:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000316:	2302      	movs	r3, #2
 8000318:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800031a:	f107 0318 	add.w	r3, r7, #24
 800031e:	4618      	mov	r0, r3
 8000320:	f000 ff82 	bl	8001228 <HAL_RCC_OscConfig>
 8000324:	4603      	mov	r3, r0
 8000326:	2b00      	cmp	r3, #0
 8000328:	d001      	beq.n	800032e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800032a:	f000 f818 	bl	800035e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800032e:	230f      	movs	r3, #15
 8000330:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000332:	2303      	movs	r3, #3
 8000334:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000336:	2300      	movs	r3, #0
 8000338:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800033a:	2300      	movs	r3, #0
 800033c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800033e:	2300      	movs	r3, #0
 8000340:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000342:	1d3b      	adds	r3, r7, #4
 8000344:	2104      	movs	r1, #4
 8000346:	4618      	mov	r0, r3
 8000348:	f001 fa80 	bl	800184c <HAL_RCC_ClockConfig>
 800034c:	4603      	mov	r3, r0
 800034e:	2b00      	cmp	r3, #0
 8000350:	d001      	beq.n	8000356 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000352:	f000 f804 	bl	800035e <Error_Handler>
  }
}
 8000356:	bf00      	nop
 8000358:	3750      	adds	r7, #80	@ 0x50
 800035a:	46bd      	mov	sp, r7
 800035c:	bd80      	pop	{r7, pc}

0800035e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800035e:	b480      	push	{r7}
 8000360:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000362:	b672      	cpsid	i
}
 8000364:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000366:	bf00      	nop
 8000368:	e7fd      	b.n	8000366 <Error_Handler+0x8>
	...

0800036c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000370:	4b1b      	ldr	r3, [pc, #108]	@ (80003e0 <MX_SPI1_Init+0x74>)
 8000372:	4a1c      	ldr	r2, [pc, #112]	@ (80003e4 <MX_SPI1_Init+0x78>)
 8000374:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000376:	4b1a      	ldr	r3, [pc, #104]	@ (80003e0 <MX_SPI1_Init+0x74>)
 8000378:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800037c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800037e:	4b18      	ldr	r3, [pc, #96]	@ (80003e0 <MX_SPI1_Init+0x74>)
 8000380:	2200      	movs	r2, #0
 8000382:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000384:	4b16      	ldr	r3, [pc, #88]	@ (80003e0 <MX_SPI1_Init+0x74>)
 8000386:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800038a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800038c:	4b14      	ldr	r3, [pc, #80]	@ (80003e0 <MX_SPI1_Init+0x74>)
 800038e:	2202      	movs	r2, #2
 8000390:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000392:	4b13      	ldr	r3, [pc, #76]	@ (80003e0 <MX_SPI1_Init+0x74>)
 8000394:	2200      	movs	r2, #0
 8000396:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000398:	4b11      	ldr	r3, [pc, #68]	@ (80003e0 <MX_SPI1_Init+0x74>)
 800039a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800039e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80003a0:	4b0f      	ldr	r3, [pc, #60]	@ (80003e0 <MX_SPI1_Init+0x74>)
 80003a2:	2210      	movs	r2, #16
 80003a4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80003a6:	4b0e      	ldr	r3, [pc, #56]	@ (80003e0 <MX_SPI1_Init+0x74>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80003ac:	4b0c      	ldr	r3, [pc, #48]	@ (80003e0 <MX_SPI1_Init+0x74>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80003b2:	4b0b      	ldr	r3, [pc, #44]	@ (80003e0 <MX_SPI1_Init+0x74>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80003b8:	4b09      	ldr	r3, [pc, #36]	@ (80003e0 <MX_SPI1_Init+0x74>)
 80003ba:	2207      	movs	r2, #7
 80003bc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80003be:	4b08      	ldr	r3, [pc, #32]	@ (80003e0 <MX_SPI1_Init+0x74>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80003c4:	4b06      	ldr	r3, [pc, #24]	@ (80003e0 <MX_SPI1_Init+0x74>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80003ca:	4805      	ldr	r0, [pc, #20]	@ (80003e0 <MX_SPI1_Init+0x74>)
 80003cc:	f001 fc22 	bl	8001c14 <HAL_SPI_Init>
 80003d0:	4603      	mov	r3, r0
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d001      	beq.n	80003da <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80003d6:	f7ff ffc2 	bl	800035e <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80003da:	bf00      	nop
 80003dc:	bd80      	pop	{r7, pc}
 80003de:	bf00      	nop
 80003e0:	20000028 	.word	0x20000028
 80003e4:	40013000 	.word	0x40013000

080003e8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b08a      	sub	sp, #40	@ 0x28
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003f0:	f107 0314 	add.w	r3, r7, #20
 80003f4:	2200      	movs	r2, #0
 80003f6:	601a      	str	r2, [r3, #0]
 80003f8:	605a      	str	r2, [r3, #4]
 80003fa:	609a      	str	r2, [r3, #8]
 80003fc:	60da      	str	r2, [r3, #12]
 80003fe:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	4a17      	ldr	r2, [pc, #92]	@ (8000464 <HAL_SPI_MspInit+0x7c>)
 8000406:	4293      	cmp	r3, r2
 8000408:	d128      	bne.n	800045c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800040a:	4b17      	ldr	r3, [pc, #92]	@ (8000468 <HAL_SPI_MspInit+0x80>)
 800040c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800040e:	4a16      	ldr	r2, [pc, #88]	@ (8000468 <HAL_SPI_MspInit+0x80>)
 8000410:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000414:	6613      	str	r3, [r2, #96]	@ 0x60
 8000416:	4b14      	ldr	r3, [pc, #80]	@ (8000468 <HAL_SPI_MspInit+0x80>)
 8000418:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800041a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800041e:	613b      	str	r3, [r7, #16]
 8000420:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000422:	4b11      	ldr	r3, [pc, #68]	@ (8000468 <HAL_SPI_MspInit+0x80>)
 8000424:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000426:	4a10      	ldr	r2, [pc, #64]	@ (8000468 <HAL_SPI_MspInit+0x80>)
 8000428:	f043 0301 	orr.w	r3, r3, #1
 800042c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800042e:	4b0e      	ldr	r3, [pc, #56]	@ (8000468 <HAL_SPI_MspInit+0x80>)
 8000430:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000432:	f003 0301 	and.w	r3, r3, #1
 8000436:	60fb      	str	r3, [r7, #12]
 8000438:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800043a:	23a0      	movs	r3, #160	@ 0xa0
 800043c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800043e:	2302      	movs	r3, #2
 8000440:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000442:	2300      	movs	r3, #0
 8000444:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000446:	2303      	movs	r3, #3
 8000448:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800044a:	2305      	movs	r3, #5
 800044c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800044e:	f107 0314 	add.w	r3, r7, #20
 8000452:	4619      	mov	r1, r3
 8000454:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000458:	f000 fc98 	bl	8000d8c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800045c:	bf00      	nop
 800045e:	3728      	adds	r7, #40	@ 0x28
 8000460:	46bd      	mov	sp, r7
 8000462:	bd80      	pop	{r7, pc}
 8000464:	40013000 	.word	0x40013000
 8000468:	40021000 	.word	0x40021000

0800046c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b082      	sub	sp, #8
 8000470:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000472:	4b0f      	ldr	r3, [pc, #60]	@ (80004b0 <HAL_MspInit+0x44>)
 8000474:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000476:	4a0e      	ldr	r2, [pc, #56]	@ (80004b0 <HAL_MspInit+0x44>)
 8000478:	f043 0301 	orr.w	r3, r3, #1
 800047c:	6613      	str	r3, [r2, #96]	@ 0x60
 800047e:	4b0c      	ldr	r3, [pc, #48]	@ (80004b0 <HAL_MspInit+0x44>)
 8000480:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000482:	f003 0301 	and.w	r3, r3, #1
 8000486:	607b      	str	r3, [r7, #4]
 8000488:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800048a:	4b09      	ldr	r3, [pc, #36]	@ (80004b0 <HAL_MspInit+0x44>)
 800048c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800048e:	4a08      	ldr	r2, [pc, #32]	@ (80004b0 <HAL_MspInit+0x44>)
 8000490:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000494:	6593      	str	r3, [r2, #88]	@ 0x58
 8000496:	4b06      	ldr	r3, [pc, #24]	@ (80004b0 <HAL_MspInit+0x44>)
 8000498:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800049a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800049e:	603b      	str	r3, [r7, #0]
 80004a0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80004a2:	f000 feb1 	bl	8001208 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004a6:	bf00      	nop
 80004a8:	3708      	adds	r7, #8
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bd80      	pop	{r7, pc}
 80004ae:	bf00      	nop
 80004b0:	40021000 	.word	0x40021000

080004b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004b4:	b480      	push	{r7}
 80004b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80004b8:	bf00      	nop
 80004ba:	e7fd      	b.n	80004b8 <NMI_Handler+0x4>

080004bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004bc:	b480      	push	{r7}
 80004be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004c0:	bf00      	nop
 80004c2:	e7fd      	b.n	80004c0 <HardFault_Handler+0x4>

080004c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004c4:	b480      	push	{r7}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004c8:	bf00      	nop
 80004ca:	e7fd      	b.n	80004c8 <MemManage_Handler+0x4>

080004cc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004cc:	b480      	push	{r7}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004d0:	bf00      	nop
 80004d2:	e7fd      	b.n	80004d0 <BusFault_Handler+0x4>

080004d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004d4:	b480      	push	{r7}
 80004d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004d8:	bf00      	nop
 80004da:	e7fd      	b.n	80004d8 <UsageFault_Handler+0x4>

080004dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004e0:	bf00      	nop
 80004e2:	46bd      	mov	sp, r7
 80004e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e8:	4770      	bx	lr

080004ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004ea:	b480      	push	{r7}
 80004ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004ee:	bf00      	nop
 80004f0:	46bd      	mov	sp, r7
 80004f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f6:	4770      	bx	lr

080004f8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004f8:	b480      	push	{r7}
 80004fa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004fc:	bf00      	nop
 80004fe:	46bd      	mov	sp, r7
 8000500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000504:	4770      	bx	lr

08000506 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000506:	b580      	push	{r7, lr}
 8000508:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800050a:	f000 fb1b 	bl	8000b44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800050e:	bf00      	nop
 8000510:	bd80      	pop	{r7, pc}
	...

08000514 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000514:	b480      	push	{r7}
 8000516:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000518:	4b06      	ldr	r3, [pc, #24]	@ (8000534 <SystemInit+0x20>)
 800051a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800051e:	4a05      	ldr	r2, [pc, #20]	@ (8000534 <SystemInit+0x20>)
 8000520:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000524:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000528:	bf00      	nop
 800052a:	46bd      	mov	sp, r7
 800052c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop
 8000534:	e000ed00 	.word	0xe000ed00

08000538 <ST7789VW_SendCommand>:

// Handler para a interface SPI (será passado na inicialização)
static SPI_HandleTypeDef *hspi_ptr;

// Função para enviar um comando para o display
static void ST7789VW_SendCommand(uint8_t command) {
 8000538:	b580      	push	{r7, lr}
 800053a:	b082      	sub	sp, #8
 800053c:	af00      	add	r7, sp, #0
 800053e:	4603      	mov	r3, r0
 8000540:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(ST7789VW_DC_GPIO_Port, ST7789VW_DC_Pin, GPIO_PIN_RESET); // DC = 0 para comando
 8000542:	2200      	movs	r2, #0
 8000544:	2102      	movs	r1, #2
 8000546:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800054a:	f000 fda1 	bl	8001090 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ST7789VW_CS_GPIO_Port, ST7789VW_CS_Pin, GPIO_PIN_RESET); // CS = 0 para selecionar
 800054e:	2200      	movs	r2, #0
 8000550:	2101      	movs	r1, #1
 8000552:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000556:	f000 fd9b 	bl	8001090 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(hspi_ptr, &command, 1, HAL_MAX_DELAY);
 800055a:	4b09      	ldr	r3, [pc, #36]	@ (8000580 <ST7789VW_SendCommand+0x48>)
 800055c:	6818      	ldr	r0, [r3, #0]
 800055e:	1df9      	adds	r1, r7, #7
 8000560:	f04f 33ff 	mov.w	r3, #4294967295
 8000564:	2201      	movs	r2, #1
 8000566:	f001 fc00 	bl	8001d6a <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(ST7789VW_CS_GPIO_Port, ST7789VW_CS_Pin, GPIO_PIN_SET);   // CS = 1 para deselecionar
 800056a:	2201      	movs	r2, #1
 800056c:	2101      	movs	r1, #1
 800056e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000572:	f000 fd8d 	bl	8001090 <HAL_GPIO_WritePin>
}
 8000576:	bf00      	nop
 8000578:	3708      	adds	r7, #8
 800057a:	46bd      	mov	sp, r7
 800057c:	bd80      	pop	{r7, pc}
 800057e:	bf00      	nop
 8000580:	2000008c 	.word	0x2000008c

08000584 <ST7789VW_SendData>:

// Função para enviar dados para o display
static void ST7789VW_SendData(uint8_t *data, uint16_t size) {
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
 800058c:	460b      	mov	r3, r1
 800058e:	807b      	strh	r3, [r7, #2]
  HAL_GPIO_WritePin(ST7789VW_DC_GPIO_Port, ST7789VW_DC_Pin, GPIO_PIN_SET); // DC = 1 para dados
 8000590:	2201      	movs	r2, #1
 8000592:	2102      	movs	r1, #2
 8000594:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000598:	f000 fd7a 	bl	8001090 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ST7789VW_CS_GPIO_Port, ST7789VW_CS_Pin, GPIO_PIN_RESET); // CS = 0 para selecionar
 800059c:	2200      	movs	r2, #0
 800059e:	2101      	movs	r1, #1
 80005a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005a4:	f000 fd74 	bl	8001090 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(hspi_ptr, data, size, HAL_MAX_DELAY);
 80005a8:	4b08      	ldr	r3, [pc, #32]	@ (80005cc <ST7789VW_SendData+0x48>)
 80005aa:	6818      	ldr	r0, [r3, #0]
 80005ac:	887a      	ldrh	r2, [r7, #2]
 80005ae:	f04f 33ff 	mov.w	r3, #4294967295
 80005b2:	6879      	ldr	r1, [r7, #4]
 80005b4:	f001 fbd9 	bl	8001d6a <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(ST7789VW_CS_GPIO_Port, ST7789VW_CS_Pin, GPIO_PIN_SET);   // CS = 1 para deselecionar
 80005b8:	2201      	movs	r2, #1
 80005ba:	2101      	movs	r1, #1
 80005bc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005c0:	f000 fd66 	bl	8001090 <HAL_GPIO_WritePin>
}
 80005c4:	bf00      	nop
 80005c6:	3708      	adds	r7, #8
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	2000008c 	.word	0x2000008c

080005d0 <ST7789VW_Init>:
 ST7789VW_SendData(data, 4);
}


// Função de inicialização do display ST7789VW
void ST7789VW_Init(SPI_HandleTypeDef *hspi) {
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b084      	sub	sp, #16
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
  hspi_ptr = hspi;
 80005d8:	4a1f      	ldr	r2, [pc, #124]	@ (8000658 <ST7789VW_Init+0x88>)
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	6013      	str	r3, [r2, #0]

  // Reset do display
  HAL_GPIO_WritePin(ST7789VW_RST_GPIO_Port, ST7789VW_RST_Pin, GPIO_PIN_RESET);
 80005de:	2200      	movs	r2, #0
 80005e0:	2104      	movs	r1, #4
 80005e2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005e6:	f000 fd53 	bl	8001090 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 80005ea:	2064      	movs	r0, #100	@ 0x64
 80005ec:	f000 fac8 	bl	8000b80 <HAL_Delay>
  HAL_GPIO_WritePin(ST7789VW_RST_GPIO_Port, ST7789VW_RST_Pin, GPIO_PIN_SET);
 80005f0:	2201      	movs	r2, #1
 80005f2:	2104      	movs	r1, #4
 80005f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005f8:	f000 fd4a 	bl	8001090 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 80005fc:	2064      	movs	r0, #100	@ 0x64
 80005fe:	f000 fabf 	bl	8000b80 <HAL_Delay>

  // Sequência de inicialização (baseada no datasheet do ST7789VW)
  ST7789VW_SendCommand(0x01); // SWRESET - Software reset
 8000602:	2001      	movs	r0, #1
 8000604:	f7ff ff98 	bl	8000538 <ST7789VW_SendCommand>
  HAL_Delay(150);
 8000608:	2096      	movs	r0, #150	@ 0x96
 800060a:	f000 fab9 	bl	8000b80 <HAL_Delay>

  ST7789VW_SendCommand(0x11); // SLPOUT - Leave sleep mode
 800060e:	2011      	movs	r0, #17
 8000610:	f7ff ff92 	bl	8000538 <ST7789VW_SendCommand>
  HAL_Delay(120);
 8000614:	2078      	movs	r0, #120	@ 0x78
 8000616:	f000 fab3 	bl	8000b80 <HAL_Delay>

  ST7789VW_SendCommand(0x3A); // COLMOD - Interface Pixel Format
 800061a:	203a      	movs	r0, #58	@ 0x3a
 800061c:	f7ff ff8c 	bl	8000538 <ST7789VW_SendCommand>
  uint8_t color_mode = 0x55;   // 16 bits/pixel (RGB565)
 8000620:	2355      	movs	r3, #85	@ 0x55
 8000622:	73fb      	strb	r3, [r7, #15]
  ST7789VW_SendData(&color_mode, 1);
 8000624:	f107 030f 	add.w	r3, r7, #15
 8000628:	2101      	movs	r1, #1
 800062a:	4618      	mov	r0, r3
 800062c:	f7ff ffaa 	bl	8000584 <ST7789VW_SendData>
  /*
  ST7789VW_SendCommand(0x36); // MADCTL - Memory Data Access Control
  uint8_t madctl = 0x00;       // Ajuste conforme a orientação desejada
  ST7789VW_SendData(&madctl, 1);
  */
  ST7789VW_SetRotation(ST7789VW_ORIENTACAO);
 8000630:	2001      	movs	r0, #1
 8000632:	f000 f8c9 	bl	80007c8 <ST7789VW_SetRotation>




  ST7789VW_SendCommand(0x21); // DISPINV - Display Inversion ON (opcional)
 8000636:	2021      	movs	r0, #33	@ 0x21
 8000638:	f7ff ff7e 	bl	8000538 <ST7789VW_SendCommand>

  ST7789VW_SendCommand(0x13); // NORON - Normal display mode ON
 800063c:	2013      	movs	r0, #19
 800063e:	f7ff ff7b 	bl	8000538 <ST7789VW_SendCommand>

  ST7789VW_SendCommand(0x29); // DISPON - Display ON
 8000642:	2029      	movs	r0, #41	@ 0x29
 8000644:	f7ff ff78 	bl	8000538 <ST7789VW_SendCommand>
  HAL_Delay(10);
 8000648:	200a      	movs	r0, #10
 800064a:	f000 fa99 	bl	8000b80 <HAL_Delay>
}
 800064e:	bf00      	nop
 8000650:	3710      	adds	r7, #16
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	2000008c 	.word	0x2000008c

0800065c <ST7789VW_DrawPixel>:

// Função para desenhar um pixel na tela
void ST7789VW_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 800065c:	b580      	push	{r7, lr}
 800065e:	b084      	sub	sp, #16
 8000660:	af00      	add	r7, sp, #0
 8000662:	4603      	mov	r3, r0
 8000664:	80fb      	strh	r3, [r7, #6]
 8000666:	460b      	mov	r3, r1
 8000668:	80bb      	strh	r3, [r7, #4]
 800066a:	4613      	mov	r3, r2
 800066c:	807b      	strh	r3, [r7, #2]
  if (x >= ST7789VW_WIDTH || y >= ST7789VW_HEIGHT) return;
 800066e:	88fb      	ldrh	r3, [r7, #6]
 8000670:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000674:	d246      	bcs.n	8000704 <ST7789VW_DrawPixel+0xa8>
 8000676:	88bb      	ldrh	r3, [r7, #4]
 8000678:	2bef      	cmp	r3, #239	@ 0xef
 800067a:	d843      	bhi.n	8000704 <ST7789VW_DrawPixel+0xa8>

  ST7789VW_SendCommand(0x2A); // CASET - Column Address Set
 800067c:	202a      	movs	r0, #42	@ 0x2a
 800067e:	f7ff ff5b 	bl	8000538 <ST7789VW_SendCommand>
  uint8_t data[4];
  data[0] = (x >> 8) & 0xFF;
 8000682:	88fb      	ldrh	r3, [r7, #6]
 8000684:	0a1b      	lsrs	r3, r3, #8
 8000686:	b29b      	uxth	r3, r3
 8000688:	b2db      	uxtb	r3, r3
 800068a:	733b      	strb	r3, [r7, #12]
  data[1] = x & 0xFF;
 800068c:	88fb      	ldrh	r3, [r7, #6]
 800068e:	b2db      	uxtb	r3, r3
 8000690:	737b      	strb	r3, [r7, #13]
  data[2] = (x >> 8) & 0xFF;
 8000692:	88fb      	ldrh	r3, [r7, #6]
 8000694:	0a1b      	lsrs	r3, r3, #8
 8000696:	b29b      	uxth	r3, r3
 8000698:	b2db      	uxtb	r3, r3
 800069a:	73bb      	strb	r3, [r7, #14]
  data[3] = x & 0xFF;
 800069c:	88fb      	ldrh	r3, [r7, #6]
 800069e:	b2db      	uxtb	r3, r3
 80006a0:	73fb      	strb	r3, [r7, #15]
  ST7789VW_SendData(data, 4);
 80006a2:	f107 030c 	add.w	r3, r7, #12
 80006a6:	2104      	movs	r1, #4
 80006a8:	4618      	mov	r0, r3
 80006aa:	f7ff ff6b 	bl	8000584 <ST7789VW_SendData>

  ST7789VW_SendCommand(0x2B); // RASET - Row Address Set
 80006ae:	202b      	movs	r0, #43	@ 0x2b
 80006b0:	f7ff ff42 	bl	8000538 <ST7789VW_SendCommand>
  data[0] = (y >> 8) & 0xFF;
 80006b4:	88bb      	ldrh	r3, [r7, #4]
 80006b6:	0a1b      	lsrs	r3, r3, #8
 80006b8:	b29b      	uxth	r3, r3
 80006ba:	b2db      	uxtb	r3, r3
 80006bc:	733b      	strb	r3, [r7, #12]
  data[1] = y & 0xFF;
 80006be:	88bb      	ldrh	r3, [r7, #4]
 80006c0:	b2db      	uxtb	r3, r3
 80006c2:	737b      	strb	r3, [r7, #13]
  data[2] = (y >> 8) & 0xFF;
 80006c4:	88bb      	ldrh	r3, [r7, #4]
 80006c6:	0a1b      	lsrs	r3, r3, #8
 80006c8:	b29b      	uxth	r3, r3
 80006ca:	b2db      	uxtb	r3, r3
 80006cc:	73bb      	strb	r3, [r7, #14]
  data[3] = y & 0xFF;
 80006ce:	88bb      	ldrh	r3, [r7, #4]
 80006d0:	b2db      	uxtb	r3, r3
 80006d2:	73fb      	strb	r3, [r7, #15]
  ST7789VW_SendData(data, 4);
 80006d4:	f107 030c 	add.w	r3, r7, #12
 80006d8:	2104      	movs	r1, #4
 80006da:	4618      	mov	r0, r3
 80006dc:	f7ff ff52 	bl	8000584 <ST7789VW_SendData>

  ST7789VW_SendCommand(0x2C); // RAMWR - Memory Write
 80006e0:	202c      	movs	r0, #44	@ 0x2c
 80006e2:	f7ff ff29 	bl	8000538 <ST7789VW_SendCommand>
  data[0] = (color >> 8) & 0xFF; // High byte
 80006e6:	887b      	ldrh	r3, [r7, #2]
 80006e8:	0a1b      	lsrs	r3, r3, #8
 80006ea:	b29b      	uxth	r3, r3
 80006ec:	b2db      	uxtb	r3, r3
 80006ee:	733b      	strb	r3, [r7, #12]
  data[1] = color & 0xFF;        // Low byte
 80006f0:	887b      	ldrh	r3, [r7, #2]
 80006f2:	b2db      	uxtb	r3, r3
 80006f4:	737b      	strb	r3, [r7, #13]
  ST7789VW_SendData(data, 2);
 80006f6:	f107 030c 	add.w	r3, r7, #12
 80006fa:	2102      	movs	r1, #2
 80006fc:	4618      	mov	r0, r3
 80006fe:	f7ff ff41 	bl	8000584 <ST7789VW_SendData>
 8000702:	e000      	b.n	8000706 <ST7789VW_DrawPixel+0xaa>
  if (x >= ST7789VW_WIDTH || y >= ST7789VW_HEIGHT) return;
 8000704:	bf00      	nop
}
 8000706:	3710      	adds	r7, #16
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}

0800070c <ST7789VW_FillScreen2>:
    //HAL_Delay(2);
  }
}

// Função para preencher toda a tela com uma única cor
void ST7789VW_FillScreen2(uint16_t color) {
 800070c:	b580      	push	{r7, lr}
 800070e:	b086      	sub	sp, #24
 8000710:	af00      	add	r7, sp, #0
 8000712:	4603      	mov	r3, r0
 8000714:	80fb      	strh	r3, [r7, #6]
  uint8_t data[2];
  data[0] = (color >> 8) & 0xFF; // High byte
 8000716:	88fb      	ldrh	r3, [r7, #6]
 8000718:	0a1b      	lsrs	r3, r3, #8
 800071a:	b29b      	uxth	r3, r3
 800071c:	b2db      	uxtb	r3, r3
 800071e:	743b      	strb	r3, [r7, #16]
  data[1] = color & 0xFF;        // Low byte
 8000720:	88fb      	ldrh	r3, [r7, #6]
 8000722:	b2db      	uxtb	r3, r3
 8000724:	747b      	strb	r3, [r7, #17]

  ST7789VW_SendCommand(0x2A); // CASET - Column Address Set
 8000726:	202a      	movs	r0, #42	@ 0x2a
 8000728:	f7ff ff06 	bl	8000538 <ST7789VW_SendCommand>
  uint8_t col_data[4];
  col_data[0] = 0x00;
 800072c:	2300      	movs	r3, #0
 800072e:	733b      	strb	r3, [r7, #12]
  col_data[1] = 0x00;
 8000730:	2300      	movs	r3, #0
 8000732:	737b      	strb	r3, [r7, #13]
  col_data[2] = (ST7789VW_WIDTH - 1) >> 8;
 8000734:	2301      	movs	r3, #1
 8000736:	73bb      	strb	r3, [r7, #14]
  col_data[3] = (ST7789VW_WIDTH - 1) & 0xFF;
 8000738:	233f      	movs	r3, #63	@ 0x3f
 800073a:	73fb      	strb	r3, [r7, #15]
  ST7789VW_SendData(col_data, 4);
 800073c:	f107 030c 	add.w	r3, r7, #12
 8000740:	2104      	movs	r1, #4
 8000742:	4618      	mov	r0, r3
 8000744:	f7ff ff1e 	bl	8000584 <ST7789VW_SendData>

  ST7789VW_SendCommand(0x2B); // RASET - Row Address Set
 8000748:	202b      	movs	r0, #43	@ 0x2b
 800074a:	f7ff fef5 	bl	8000538 <ST7789VW_SendCommand>
  uint8_t row_data[4];
  row_data[0] = 0x00;
 800074e:	2300      	movs	r3, #0
 8000750:	723b      	strb	r3, [r7, #8]
  row_data[1] = 0x00;
 8000752:	2300      	movs	r3, #0
 8000754:	727b      	strb	r3, [r7, #9]
  row_data[2] = (ST7789VW_HEIGHT - 1) >> 8;
 8000756:	2300      	movs	r3, #0
 8000758:	72bb      	strb	r3, [r7, #10]
  row_data[3] = (ST7789VW_HEIGHT - 1) & 0xFF;
 800075a:	23ef      	movs	r3, #239	@ 0xef
 800075c:	72fb      	strb	r3, [r7, #11]
  ST7789VW_SendData(row_data, 4);
 800075e:	f107 0308 	add.w	r3, r7, #8
 8000762:	2104      	movs	r1, #4
 8000764:	4618      	mov	r0, r3
 8000766:	f7ff ff0d 	bl	8000584 <ST7789VW_SendData>

  ST7789VW_SendCommand(0x2C); // RAMWR - Memory Write
 800076a:	202c      	movs	r0, #44	@ 0x2c
 800076c:	f7ff fee4 	bl	8000538 <ST7789VW_SendCommand>

  HAL_GPIO_WritePin(ST7789VW_DC_GPIO_Port, ST7789VW_DC_Pin, GPIO_PIN_SET); // DC = 1 para dados
 8000770:	2201      	movs	r2, #1
 8000772:	2102      	movs	r1, #2
 8000774:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000778:	f000 fc8a 	bl	8001090 <HAL_GPIO_WritePin>


  // Envia a cor para todos os pixels
  for (uint32_t i = 0; i < (uint32_t)ST7789VW_WIDTH * ST7789VW_HEIGHT; i++) {
 800077c:	2300      	movs	r3, #0
 800077e:	617b      	str	r3, [r7, #20]
 8000780:	e017      	b.n	80007b2 <ST7789VW_FillScreen2+0xa6>
    //ST7789VW_SendData(data, 2);
	  HAL_GPIO_WritePin(ST7789VW_CS_GPIO_Port, ST7789VW_CS_Pin, GPIO_PIN_RESET); // CS = 0 para selecionar
 8000782:	2200      	movs	r2, #0
 8000784:	2101      	movs	r1, #1
 8000786:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800078a:	f000 fc81 	bl	8001090 <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(hspi_ptr, data, 2, HAL_MAX_DELAY);
 800078e:	4b0d      	ldr	r3, [pc, #52]	@ (80007c4 <ST7789VW_FillScreen2+0xb8>)
 8000790:	6818      	ldr	r0, [r3, #0]
 8000792:	f107 0110 	add.w	r1, r7, #16
 8000796:	f04f 33ff 	mov.w	r3, #4294967295
 800079a:	2202      	movs	r2, #2
 800079c:	f001 fae5 	bl	8001d6a <HAL_SPI_Transmit>
	  HAL_GPIO_WritePin(ST7789VW_CS_GPIO_Port, ST7789VW_CS_Pin, GPIO_PIN_SET);   // CS = 1 para deselecionar
 80007a0:	2201      	movs	r2, #1
 80007a2:	2101      	movs	r1, #1
 80007a4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007a8:	f000 fc72 	bl	8001090 <HAL_GPIO_WritePin>
  for (uint32_t i = 0; i < (uint32_t)ST7789VW_WIDTH * ST7789VW_HEIGHT; i++) {
 80007ac:	697b      	ldr	r3, [r7, #20]
 80007ae:	3301      	adds	r3, #1
 80007b0:	617b      	str	r3, [r7, #20]
 80007b2:	697b      	ldr	r3, [r7, #20]
 80007b4:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 80007b8:	d3e3      	bcc.n	8000782 <ST7789VW_FillScreen2+0x76>
  }
}
 80007ba:	bf00      	nop
 80007bc:	bf00      	nop
 80007be:	3718      	adds	r7, #24
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	2000008c 	.word	0x2000008c

080007c8 <ST7789VW_SetRotation>:
    ST7789VW_SendData(dataCor, 2);
    //HAL_Delay(2);
  }
}

void ST7789VW_SetRotation(uint8_t rotation) {
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b084      	sub	sp, #16
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	4603      	mov	r3, r0
 80007d0:	71fb      	strb	r3, [r7, #7]
  uint8_t madctl = 0;
 80007d2:	2300      	movs	r3, #0
 80007d4:	73fb      	strb	r3, [r7, #15]

  switch (rotation) {
 80007d6:	79fb      	ldrb	r3, [r7, #7]
 80007d8:	2b03      	cmp	r3, #3
 80007da:	d817      	bhi.n	800080c <ST7789VW_SetRotation+0x44>
 80007dc:	a201      	add	r2, pc, #4	@ (adr r2, 80007e4 <ST7789VW_SetRotation+0x1c>)
 80007de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007e2:	bf00      	nop
 80007e4:	080007f5 	.word	0x080007f5
 80007e8:	080007fb 	.word	0x080007fb
 80007ec:	08000801 	.word	0x08000801
 80007f0:	08000807 	.word	0x08000807
    case 0: // 0 degrees (Portrait)
      madctl = 0x00;
 80007f4:	2300      	movs	r3, #0
 80007f6:	73fb      	strb	r3, [r7, #15]
      break;
 80007f8:	e009      	b.n	800080e <ST7789VW_SetRotation+0x46>
    case 1: // 90 degrees (Landscape)
      madctl = 0x60;
 80007fa:	2360      	movs	r3, #96	@ 0x60
 80007fc:	73fb      	strb	r3, [r7, #15]
      break;
 80007fe:	e006      	b.n	800080e <ST7789VW_SetRotation+0x46>
    case 2: // 180 degrees (Portrait inverted)
      madctl = 0xC0;
 8000800:	23c0      	movs	r3, #192	@ 0xc0
 8000802:	73fb      	strb	r3, [r7, #15]
      break;
 8000804:	e003      	b.n	800080e <ST7789VW_SetRotation+0x46>
    case 3: // 270 degrees (Landscape inverted)
      madctl = 0xA0;
 8000806:	23a0      	movs	r3, #160	@ 0xa0
 8000808:	73fb      	strb	r3, [r7, #15]
      break;
 800080a:	e000      	b.n	800080e <ST7789VW_SetRotation+0x46>
    default:
      break;
 800080c:	bf00      	nop
  }

  ST7789VW_SendCommand(0x36); // MADCTL
 800080e:	2036      	movs	r0, #54	@ 0x36
 8000810:	f7ff fe92 	bl	8000538 <ST7789VW_SendCommand>
  ST7789VW_SendData(&madctl, 1);
 8000814:	f107 030f 	add.w	r3, r7, #15
 8000818:	2101      	movs	r1, #1
 800081a:	4618      	mov	r0, r3
 800081c:	f7ff feb2 	bl	8000584 <ST7789VW_SendData>
}
 8000820:	bf00      	nop
 8000822:	3710      	adds	r7, #16
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}

08000828 <ST7789VW_DrawCharBig>:
        x += 6; // 5 pixels de largura + 1 de espaço
        str++;
    }
}

void ST7789VW_DrawCharBig(uint16_t x, uint16_t y, char ch, uint16_t textColor, uint16_t bgColor) {
 8000828:	b590      	push	{r4, r7, lr}
 800082a:	b087      	sub	sp, #28
 800082c:	af00      	add	r7, sp, #0
 800082e:	4604      	mov	r4, r0
 8000830:	4608      	mov	r0, r1
 8000832:	4611      	mov	r1, r2
 8000834:	461a      	mov	r2, r3
 8000836:	4623      	mov	r3, r4
 8000838:	80fb      	strh	r3, [r7, #6]
 800083a:	4603      	mov	r3, r0
 800083c:	80bb      	strh	r3, [r7, #4]
 800083e:	460b      	mov	r3, r1
 8000840:	70fb      	strb	r3, [r7, #3]
 8000842:	4613      	mov	r3, r2
 8000844:	803b      	strh	r3, [r7, #0]
    if (ch < 32 || ch > 126) return;
 8000846:	78fb      	ldrb	r3, [r7, #3]
 8000848:	2b1f      	cmp	r3, #31
 800084a:	f240 80a2 	bls.w	8000992 <ST7789VW_DrawCharBig+0x16a>
 800084e:	78fb      	ldrb	r3, [r7, #3]
 8000850:	2b7e      	cmp	r3, #126	@ 0x7e
 8000852:	f200 809e 	bhi.w	8000992 <ST7789VW_DrawCharBig+0x16a>

    const uint8_t *bitmap = font5x7[ch - 32];
 8000856:	78fb      	ldrb	r3, [r7, #3]
 8000858:	f1a3 0220 	sub.w	r2, r3, #32
 800085c:	4613      	mov	r3, r2
 800085e:	009b      	lsls	r3, r3, #2
 8000860:	4413      	add	r3, r2
 8000862:	4a4e      	ldr	r2, [pc, #312]	@ (800099c <ST7789VW_DrawCharBig+0x174>)
 8000864:	4413      	add	r3, r2
 8000866:	613b      	str	r3, [r7, #16]

    for (uint8_t col = 0; col < 5; col++) {
 8000868:	2300      	movs	r3, #0
 800086a:	75fb      	strb	r3, [r7, #23]
 800086c:	e06c      	b.n	8000948 <ST7789VW_DrawCharBig+0x120>
        uint8_t line = bitmap[col];
 800086e:	7dfb      	ldrb	r3, [r7, #23]
 8000870:	693a      	ldr	r2, [r7, #16]
 8000872:	4413      	add	r3, r2
 8000874:	781b      	ldrb	r3, [r3, #0]
 8000876:	75bb      	strb	r3, [r7, #22]
        for (uint8_t row = 0; row < 7; row++) {
 8000878:	2300      	movs	r3, #0
 800087a:	757b      	strb	r3, [r7, #21]
 800087c:	e05e      	b.n	800093c <ST7789VW_DrawCharBig+0x114>
            uint16_t pixelColor = (line & 0x01) ? textColor : bgColor;
 800087e:	7dbb      	ldrb	r3, [r7, #22]
 8000880:	f003 0301 	and.w	r3, r3, #1
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <ST7789VW_DrawCharBig+0x64>
 8000888:	883b      	ldrh	r3, [r7, #0]
 800088a:	e000      	b.n	800088e <ST7789VW_DrawCharBig+0x66>
 800088c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800088e:	81fb      	strh	r3, [r7, #14]

            // Desenha pixel em 2x2 (escala 2x)
            ST7789VW_DrawPixel(x + col * 2,     y + row * 2,     pixelColor);
 8000890:	7dfb      	ldrb	r3, [r7, #23]
 8000892:	b29b      	uxth	r3, r3
 8000894:	005b      	lsls	r3, r3, #1
 8000896:	b29a      	uxth	r2, r3
 8000898:	88fb      	ldrh	r3, [r7, #6]
 800089a:	4413      	add	r3, r2
 800089c:	b298      	uxth	r0, r3
 800089e:	7d7b      	ldrb	r3, [r7, #21]
 80008a0:	b29b      	uxth	r3, r3
 80008a2:	005b      	lsls	r3, r3, #1
 80008a4:	b29a      	uxth	r2, r3
 80008a6:	88bb      	ldrh	r3, [r7, #4]
 80008a8:	4413      	add	r3, r2
 80008aa:	b29b      	uxth	r3, r3
 80008ac:	89fa      	ldrh	r2, [r7, #14]
 80008ae:	4619      	mov	r1, r3
 80008b0:	f7ff fed4 	bl	800065c <ST7789VW_DrawPixel>
            ST7789VW_DrawPixel(x + col * 2 + 1, y + row * 2,     pixelColor);
 80008b4:	7dfb      	ldrb	r3, [r7, #23]
 80008b6:	b29b      	uxth	r3, r3
 80008b8:	005b      	lsls	r3, r3, #1
 80008ba:	b29a      	uxth	r2, r3
 80008bc:	88fb      	ldrh	r3, [r7, #6]
 80008be:	4413      	add	r3, r2
 80008c0:	b29b      	uxth	r3, r3
 80008c2:	3301      	adds	r3, #1
 80008c4:	b298      	uxth	r0, r3
 80008c6:	7d7b      	ldrb	r3, [r7, #21]
 80008c8:	b29b      	uxth	r3, r3
 80008ca:	005b      	lsls	r3, r3, #1
 80008cc:	b29a      	uxth	r2, r3
 80008ce:	88bb      	ldrh	r3, [r7, #4]
 80008d0:	4413      	add	r3, r2
 80008d2:	b29b      	uxth	r3, r3
 80008d4:	89fa      	ldrh	r2, [r7, #14]
 80008d6:	4619      	mov	r1, r3
 80008d8:	f7ff fec0 	bl	800065c <ST7789VW_DrawPixel>
            ST7789VW_DrawPixel(x + col * 2,     y + row * 2 + 1, pixelColor);
 80008dc:	7dfb      	ldrb	r3, [r7, #23]
 80008de:	b29b      	uxth	r3, r3
 80008e0:	005b      	lsls	r3, r3, #1
 80008e2:	b29a      	uxth	r2, r3
 80008e4:	88fb      	ldrh	r3, [r7, #6]
 80008e6:	4413      	add	r3, r2
 80008e8:	b298      	uxth	r0, r3
 80008ea:	7d7b      	ldrb	r3, [r7, #21]
 80008ec:	b29b      	uxth	r3, r3
 80008ee:	005b      	lsls	r3, r3, #1
 80008f0:	b29a      	uxth	r2, r3
 80008f2:	88bb      	ldrh	r3, [r7, #4]
 80008f4:	4413      	add	r3, r2
 80008f6:	b29b      	uxth	r3, r3
 80008f8:	3301      	adds	r3, #1
 80008fa:	b29b      	uxth	r3, r3
 80008fc:	89fa      	ldrh	r2, [r7, #14]
 80008fe:	4619      	mov	r1, r3
 8000900:	f7ff feac 	bl	800065c <ST7789VW_DrawPixel>
            ST7789VW_DrawPixel(x + col * 2 + 1, y + row * 2 + 1, pixelColor);
 8000904:	7dfb      	ldrb	r3, [r7, #23]
 8000906:	b29b      	uxth	r3, r3
 8000908:	005b      	lsls	r3, r3, #1
 800090a:	b29a      	uxth	r2, r3
 800090c:	88fb      	ldrh	r3, [r7, #6]
 800090e:	4413      	add	r3, r2
 8000910:	b29b      	uxth	r3, r3
 8000912:	3301      	adds	r3, #1
 8000914:	b298      	uxth	r0, r3
 8000916:	7d7b      	ldrb	r3, [r7, #21]
 8000918:	b29b      	uxth	r3, r3
 800091a:	005b      	lsls	r3, r3, #1
 800091c:	b29a      	uxth	r2, r3
 800091e:	88bb      	ldrh	r3, [r7, #4]
 8000920:	4413      	add	r3, r2
 8000922:	b29b      	uxth	r3, r3
 8000924:	3301      	adds	r3, #1
 8000926:	b29b      	uxth	r3, r3
 8000928:	89fa      	ldrh	r2, [r7, #14]
 800092a:	4619      	mov	r1, r3
 800092c:	f7ff fe96 	bl	800065c <ST7789VW_DrawPixel>

            line >>= 1;
 8000930:	7dbb      	ldrb	r3, [r7, #22]
 8000932:	085b      	lsrs	r3, r3, #1
 8000934:	75bb      	strb	r3, [r7, #22]
        for (uint8_t row = 0; row < 7; row++) {
 8000936:	7d7b      	ldrb	r3, [r7, #21]
 8000938:	3301      	adds	r3, #1
 800093a:	757b      	strb	r3, [r7, #21]
 800093c:	7d7b      	ldrb	r3, [r7, #21]
 800093e:	2b06      	cmp	r3, #6
 8000940:	d99d      	bls.n	800087e <ST7789VW_DrawCharBig+0x56>
    for (uint8_t col = 0; col < 5; col++) {
 8000942:	7dfb      	ldrb	r3, [r7, #23]
 8000944:	3301      	adds	r3, #1
 8000946:	75fb      	strb	r3, [r7, #23]
 8000948:	7dfb      	ldrb	r3, [r7, #23]
 800094a:	2b04      	cmp	r3, #4
 800094c:	d98f      	bls.n	800086e <ST7789VW_DrawCharBig+0x46>
        }
    }

    // Espaço de 2 pixels entre caracteres
    for (uint8_t dy = 0; dy < 14; dy++) {
 800094e:	2300      	movs	r3, #0
 8000950:	753b      	strb	r3, [r7, #20]
 8000952:	e01a      	b.n	800098a <ST7789VW_DrawCharBig+0x162>
    	ST7789VW_DrawPixel(x + 10, y + dy, bgColor);
 8000954:	88fb      	ldrh	r3, [r7, #6]
 8000956:	330a      	adds	r3, #10
 8000958:	b298      	uxth	r0, r3
 800095a:	7d3b      	ldrb	r3, [r7, #20]
 800095c:	b29a      	uxth	r2, r3
 800095e:	88bb      	ldrh	r3, [r7, #4]
 8000960:	4413      	add	r3, r2
 8000962:	b29b      	uxth	r3, r3
 8000964:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8000966:	4619      	mov	r1, r3
 8000968:	f7ff fe78 	bl	800065c <ST7789VW_DrawPixel>
    	ST7789VW_DrawPixel(x + 11, y + dy, bgColor);
 800096c:	88fb      	ldrh	r3, [r7, #6]
 800096e:	330b      	adds	r3, #11
 8000970:	b298      	uxth	r0, r3
 8000972:	7d3b      	ldrb	r3, [r7, #20]
 8000974:	b29a      	uxth	r2, r3
 8000976:	88bb      	ldrh	r3, [r7, #4]
 8000978:	4413      	add	r3, r2
 800097a:	b29b      	uxth	r3, r3
 800097c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800097e:	4619      	mov	r1, r3
 8000980:	f7ff fe6c 	bl	800065c <ST7789VW_DrawPixel>
    for (uint8_t dy = 0; dy < 14; dy++) {
 8000984:	7d3b      	ldrb	r3, [r7, #20]
 8000986:	3301      	adds	r3, #1
 8000988:	753b      	strb	r3, [r7, #20]
 800098a:	7d3b      	ldrb	r3, [r7, #20]
 800098c:	2b0d      	cmp	r3, #13
 800098e:	d9e1      	bls.n	8000954 <ST7789VW_DrawCharBig+0x12c>
 8000990:	e000      	b.n	8000994 <ST7789VW_DrawCharBig+0x16c>
    if (ch < 32 || ch > 126) return;
 8000992:	bf00      	nop
    }
}
 8000994:	371c      	adds	r7, #28
 8000996:	46bd      	mov	sp, r7
 8000998:	bd90      	pop	{r4, r7, pc}
 800099a:	bf00      	nop
 800099c:	080023cc 	.word	0x080023cc

080009a0 <ST7789VW_DrawStringBig>:

void ST7789VW_DrawStringBig(uint16_t x, uint16_t y, const char* str, uint16_t textColor, uint16_t bgColor) {
 80009a0:	b590      	push	{r4, r7, lr}
 80009a2:	b087      	sub	sp, #28
 80009a4:	af02      	add	r7, sp, #8
 80009a6:	60ba      	str	r2, [r7, #8]
 80009a8:	461a      	mov	r2, r3
 80009aa:	4603      	mov	r3, r0
 80009ac:	81fb      	strh	r3, [r7, #14]
 80009ae:	460b      	mov	r3, r1
 80009b0:	81bb      	strh	r3, [r7, #12]
 80009b2:	4613      	mov	r3, r2
 80009b4:	80fb      	strh	r3, [r7, #6]
    while (*str) {
 80009b6:	e00f      	b.n	80009d8 <ST7789VW_DrawStringBig+0x38>
    	ST7789VW_DrawCharBig(x, y, *str, textColor, bgColor);
 80009b8:	68bb      	ldr	r3, [r7, #8]
 80009ba:	781a      	ldrb	r2, [r3, #0]
 80009bc:	88fc      	ldrh	r4, [r7, #6]
 80009be:	89b9      	ldrh	r1, [r7, #12]
 80009c0:	89f8      	ldrh	r0, [r7, #14]
 80009c2:	8c3b      	ldrh	r3, [r7, #32]
 80009c4:	9300      	str	r3, [sp, #0]
 80009c6:	4623      	mov	r3, r4
 80009c8:	f7ff ff2e 	bl	8000828 <ST7789VW_DrawCharBig>
        x += 12; // 10 pixels da letra + 2 de espaço
 80009cc:	89fb      	ldrh	r3, [r7, #14]
 80009ce:	330c      	adds	r3, #12
 80009d0:	81fb      	strh	r3, [r7, #14]
        str++;
 80009d2:	68bb      	ldr	r3, [r7, #8]
 80009d4:	3301      	adds	r3, #1
 80009d6:	60bb      	str	r3, [r7, #8]
    while (*str) {
 80009d8:	68bb      	ldr	r3, [r7, #8]
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d1eb      	bne.n	80009b8 <ST7789VW_DrawStringBig+0x18>
    }
}
 80009e0:	bf00      	nop
 80009e2:	bf00      	nop
 80009e4:	3714      	adds	r7, #20
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd90      	pop	{r4, r7, pc}
	...

080009ec <main_nelsitoboy>:

#include <stdlib.h>
#include <time.h>


int main_nelsitoboy(void){
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af02      	add	r7, sp, #8

	// Inicialize o display
    ST7789VW_Init(&hspi1);
 80009f2:	4813      	ldr	r0, [pc, #76]	@ (8000a40 <main_nelsitoboy+0x54>)
 80009f4:	f7ff fdec 	bl	80005d0 <ST7789VW_Init>
    // Inicializa o gerador de números aleatórios com base no tempo
    //srand(time(NULL));


    while(1){
        ST7789VW_FillScreen2(COLOR_LIGHT_GRAY);
 80009f8:	f24c 6018 	movw	r0, #50712	@ 0xc618
 80009fc:	f7ff fe86 	bl	800070c <ST7789VW_FillScreen2>
        HAL_Delay(5000);
 8000a00:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000a04:	f000 f8bc 	bl	8000b80 <HAL_Delay>

       // main_game();

        //ST7789VW_DrawChar(50, 50, "N", COLOR_ORANGE, COLOR_LIGHT_GRAY);

        HAL_Delay(5000);
 8000a08:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000a0c:	f000 f8b8 	bl	8000b80 <HAL_Delay>

        ST7789VW_DrawStringBig(0, 50, "abcdefghijklmnopqrstuvxz", COLOR_BLACK, COLOR_BLUE);
 8000a10:	231f      	movs	r3, #31
 8000a12:	9300      	str	r3, [sp, #0]
 8000a14:	2300      	movs	r3, #0
 8000a16:	4a0b      	ldr	r2, [pc, #44]	@ (8000a44 <main_nelsitoboy+0x58>)
 8000a18:	2132      	movs	r1, #50	@ 0x32
 8000a1a:	2000      	movs	r0, #0
 8000a1c:	f7ff ffc0 	bl	80009a0 <ST7789VW_DrawStringBig>
        ST7789VW_DrawStringBig(0, 70, "1234567890ñ", COLOR_RED, COLOR_LIGHT_GRAY);
 8000a20:	f24c 6318 	movw	r3, #50712	@ 0xc618
 8000a24:	9300      	str	r3, [sp, #0]
 8000a26:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000a2a:	4a07      	ldr	r2, [pc, #28]	@ (8000a48 <main_nelsitoboy+0x5c>)
 8000a2c:	2146      	movs	r1, #70	@ 0x46
 8000a2e:	2000      	movs	r0, #0
 8000a30:	f7ff ffb6 	bl	80009a0 <ST7789VW_DrawStringBig>

        HAL_Delay(5000);
 8000a34:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000a38:	f000 f8a2 	bl	8000b80 <HAL_Delay>
    while(1){
 8000a3c:	bf00      	nop
 8000a3e:	e7db      	b.n	80009f8 <main_nelsitoboy+0xc>
 8000a40:	20000028 	.word	0x20000028
 8000a44:	08002390 	.word	0x08002390
 8000a48:	080023ac 	.word	0x080023ac

08000a4c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a4c:	480d      	ldr	r0, [pc, #52]	@ (8000a84 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a4e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a50:	f7ff fd60 	bl	8000514 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a54:	480c      	ldr	r0, [pc, #48]	@ (8000a88 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a56:	490d      	ldr	r1, [pc, #52]	@ (8000a8c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a58:	4a0d      	ldr	r2, [pc, #52]	@ (8000a90 <LoopForever+0xe>)
  movs r3, #0
 8000a5a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000a5c:	e002      	b.n	8000a64 <LoopCopyDataInit>

08000a5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a62:	3304      	adds	r3, #4

08000a64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a68:	d3f9      	bcc.n	8000a5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a6a:	4a0a      	ldr	r2, [pc, #40]	@ (8000a94 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a6c:	4c0a      	ldr	r4, [pc, #40]	@ (8000a98 <LoopForever+0x16>)
  movs r3, #0
 8000a6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a70:	e001      	b.n	8000a76 <LoopFillZerobss>

08000a72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a74:	3204      	adds	r2, #4

08000a76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a78:	d3fb      	bcc.n	8000a72 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8000a7a:	f001 fc59 	bl	8002330 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a7e:	f7ff fc15 	bl	80002ac <main>

08000a82 <LoopForever>:

LoopForever:
    b LoopForever
 8000a82:	e7fe      	b.n	8000a82 <LoopForever>
  ldr   r0, =_estack
 8000a84:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000a88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a8c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a90:	080025b0 	.word	0x080025b0
  ldr r2, =_sbss
 8000a94:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a98:	20000094 	.word	0x20000094

08000a9c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a9c:	e7fe      	b.n	8000a9c <ADC1_2_IRQHandler>

08000a9e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a9e:	b580      	push	{r7, lr}
 8000aa0:	b082      	sub	sp, #8
 8000aa2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000aa8:	2003      	movs	r0, #3
 8000aaa:	f000 f93d 	bl	8000d28 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000aae:	200f      	movs	r0, #15
 8000ab0:	f000 f80e 	bl	8000ad0 <HAL_InitTick>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d002      	beq.n	8000ac0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000aba:	2301      	movs	r3, #1
 8000abc:	71fb      	strb	r3, [r7, #7]
 8000abe:	e001      	b.n	8000ac4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ac0:	f7ff fcd4 	bl	800046c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ac4:	79fb      	ldrb	r3, [r7, #7]

}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	3708      	adds	r7, #8
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
	...

08000ad0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b084      	sub	sp, #16
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000adc:	4b16      	ldr	r3, [pc, #88]	@ (8000b38 <HAL_InitTick+0x68>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d022      	beq.n	8000b2a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000ae4:	4b15      	ldr	r3, [pc, #84]	@ (8000b3c <HAL_InitTick+0x6c>)
 8000ae6:	681a      	ldr	r2, [r3, #0]
 8000ae8:	4b13      	ldr	r3, [pc, #76]	@ (8000b38 <HAL_InitTick+0x68>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000af0:	fbb1 f3f3 	udiv	r3, r1, r3
 8000af4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000af8:	4618      	mov	r0, r3
 8000afa:	f000 f93a 	bl	8000d72 <HAL_SYSTICK_Config>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d10f      	bne.n	8000b24 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	2b0f      	cmp	r3, #15
 8000b08:	d809      	bhi.n	8000b1e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	6879      	ldr	r1, [r7, #4]
 8000b0e:	f04f 30ff 	mov.w	r0, #4294967295
 8000b12:	f000 f914 	bl	8000d3e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b16:	4a0a      	ldr	r2, [pc, #40]	@ (8000b40 <HAL_InitTick+0x70>)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	6013      	str	r3, [r2, #0]
 8000b1c:	e007      	b.n	8000b2e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000b1e:	2301      	movs	r3, #1
 8000b20:	73fb      	strb	r3, [r7, #15]
 8000b22:	e004      	b.n	8000b2e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b24:	2301      	movs	r3, #1
 8000b26:	73fb      	strb	r3, [r7, #15]
 8000b28:	e001      	b.n	8000b2e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b30:	4618      	mov	r0, r3
 8000b32:	3710      	adds	r7, #16
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	20000008 	.word	0x20000008
 8000b3c:	20000000 	.word	0x20000000
 8000b40:	20000004 	.word	0x20000004

08000b44 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b48:	4b05      	ldr	r3, [pc, #20]	@ (8000b60 <HAL_IncTick+0x1c>)
 8000b4a:	681a      	ldr	r2, [r3, #0]
 8000b4c:	4b05      	ldr	r3, [pc, #20]	@ (8000b64 <HAL_IncTick+0x20>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4413      	add	r3, r2
 8000b52:	4a03      	ldr	r2, [pc, #12]	@ (8000b60 <HAL_IncTick+0x1c>)
 8000b54:	6013      	str	r3, [r2, #0]
}
 8000b56:	bf00      	nop
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr
 8000b60:	20000090 	.word	0x20000090
 8000b64:	20000008 	.word	0x20000008

08000b68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b6c:	4b03      	ldr	r3, [pc, #12]	@ (8000b7c <HAL_GetTick+0x14>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop
 8000b7c:	20000090 	.word	0x20000090

08000b80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b084      	sub	sp, #16
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b88:	f7ff ffee 	bl	8000b68 <HAL_GetTick>
 8000b8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b98:	d004      	beq.n	8000ba4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b9a:	4b09      	ldr	r3, [pc, #36]	@ (8000bc0 <HAL_Delay+0x40>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	68fa      	ldr	r2, [r7, #12]
 8000ba0:	4413      	add	r3, r2
 8000ba2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ba4:	bf00      	nop
 8000ba6:	f7ff ffdf 	bl	8000b68 <HAL_GetTick>
 8000baa:	4602      	mov	r2, r0
 8000bac:	68bb      	ldr	r3, [r7, #8]
 8000bae:	1ad3      	subs	r3, r2, r3
 8000bb0:	68fa      	ldr	r2, [r7, #12]
 8000bb2:	429a      	cmp	r2, r3
 8000bb4:	d8f7      	bhi.n	8000ba6 <HAL_Delay+0x26>
  {
  }
}
 8000bb6:	bf00      	nop
 8000bb8:	bf00      	nop
 8000bba:	3710      	adds	r7, #16
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	20000008 	.word	0x20000008

08000bc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b085      	sub	sp, #20
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	f003 0307 	and.w	r3, r3, #7
 8000bd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bd4:	4b0c      	ldr	r3, [pc, #48]	@ (8000c08 <__NVIC_SetPriorityGrouping+0x44>)
 8000bd6:	68db      	ldr	r3, [r3, #12]
 8000bd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bda:	68ba      	ldr	r2, [r7, #8]
 8000bdc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000be0:	4013      	ands	r3, r2
 8000be2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000be8:	68bb      	ldr	r3, [r7, #8]
 8000bea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000bf0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bf4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bf6:	4a04      	ldr	r2, [pc, #16]	@ (8000c08 <__NVIC_SetPriorityGrouping+0x44>)
 8000bf8:	68bb      	ldr	r3, [r7, #8]
 8000bfa:	60d3      	str	r3, [r2, #12]
}
 8000bfc:	bf00      	nop
 8000bfe:	3714      	adds	r7, #20
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr
 8000c08:	e000ed00 	.word	0xe000ed00

08000c0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c10:	4b04      	ldr	r3, [pc, #16]	@ (8000c24 <__NVIC_GetPriorityGrouping+0x18>)
 8000c12:	68db      	ldr	r3, [r3, #12]
 8000c14:	0a1b      	lsrs	r3, r3, #8
 8000c16:	f003 0307 	and.w	r3, r3, #7
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr
 8000c24:	e000ed00 	.word	0xe000ed00

08000c28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b083      	sub	sp, #12
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	4603      	mov	r3, r0
 8000c30:	6039      	str	r1, [r7, #0]
 8000c32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	db0a      	blt.n	8000c52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	b2da      	uxtb	r2, r3
 8000c40:	490c      	ldr	r1, [pc, #48]	@ (8000c74 <__NVIC_SetPriority+0x4c>)
 8000c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c46:	0112      	lsls	r2, r2, #4
 8000c48:	b2d2      	uxtb	r2, r2
 8000c4a:	440b      	add	r3, r1
 8000c4c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c50:	e00a      	b.n	8000c68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	b2da      	uxtb	r2, r3
 8000c56:	4908      	ldr	r1, [pc, #32]	@ (8000c78 <__NVIC_SetPriority+0x50>)
 8000c58:	79fb      	ldrb	r3, [r7, #7]
 8000c5a:	f003 030f 	and.w	r3, r3, #15
 8000c5e:	3b04      	subs	r3, #4
 8000c60:	0112      	lsls	r2, r2, #4
 8000c62:	b2d2      	uxtb	r2, r2
 8000c64:	440b      	add	r3, r1
 8000c66:	761a      	strb	r2, [r3, #24]
}
 8000c68:	bf00      	nop
 8000c6a:	370c      	adds	r7, #12
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr
 8000c74:	e000e100 	.word	0xe000e100
 8000c78:	e000ed00 	.word	0xe000ed00

08000c7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b089      	sub	sp, #36	@ 0x24
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	60f8      	str	r0, [r7, #12]
 8000c84:	60b9      	str	r1, [r7, #8]
 8000c86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	f003 0307 	and.w	r3, r3, #7
 8000c8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c90:	69fb      	ldr	r3, [r7, #28]
 8000c92:	f1c3 0307 	rsb	r3, r3, #7
 8000c96:	2b04      	cmp	r3, #4
 8000c98:	bf28      	it	cs
 8000c9a:	2304      	movcs	r3, #4
 8000c9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c9e:	69fb      	ldr	r3, [r7, #28]
 8000ca0:	3304      	adds	r3, #4
 8000ca2:	2b06      	cmp	r3, #6
 8000ca4:	d902      	bls.n	8000cac <NVIC_EncodePriority+0x30>
 8000ca6:	69fb      	ldr	r3, [r7, #28]
 8000ca8:	3b03      	subs	r3, #3
 8000caa:	e000      	b.n	8000cae <NVIC_EncodePriority+0x32>
 8000cac:	2300      	movs	r3, #0
 8000cae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cb0:	f04f 32ff 	mov.w	r2, #4294967295
 8000cb4:	69bb      	ldr	r3, [r7, #24]
 8000cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cba:	43da      	mvns	r2, r3
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	401a      	ands	r2, r3
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cc4:	f04f 31ff 	mov.w	r1, #4294967295
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	fa01 f303 	lsl.w	r3, r1, r3
 8000cce:	43d9      	mvns	r1, r3
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cd4:	4313      	orrs	r3, r2
         );
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	3724      	adds	r7, #36	@ 0x24
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
	...

08000ce4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	3b01      	subs	r3, #1
 8000cf0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000cf4:	d301      	bcc.n	8000cfa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	e00f      	b.n	8000d1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cfa:	4a0a      	ldr	r2, [pc, #40]	@ (8000d24 <SysTick_Config+0x40>)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	3b01      	subs	r3, #1
 8000d00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d02:	210f      	movs	r1, #15
 8000d04:	f04f 30ff 	mov.w	r0, #4294967295
 8000d08:	f7ff ff8e 	bl	8000c28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d0c:	4b05      	ldr	r3, [pc, #20]	@ (8000d24 <SysTick_Config+0x40>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d12:	4b04      	ldr	r3, [pc, #16]	@ (8000d24 <SysTick_Config+0x40>)
 8000d14:	2207      	movs	r2, #7
 8000d16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d18:	2300      	movs	r3, #0
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	3708      	adds	r7, #8
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	e000e010 	.word	0xe000e010

08000d28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d30:	6878      	ldr	r0, [r7, #4]
 8000d32:	f7ff ff47 	bl	8000bc4 <__NVIC_SetPriorityGrouping>
}
 8000d36:	bf00      	nop
 8000d38:	3708      	adds	r7, #8
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}

08000d3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d3e:	b580      	push	{r7, lr}
 8000d40:	b086      	sub	sp, #24
 8000d42:	af00      	add	r7, sp, #0
 8000d44:	4603      	mov	r3, r0
 8000d46:	60b9      	str	r1, [r7, #8]
 8000d48:	607a      	str	r2, [r7, #4]
 8000d4a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d4c:	f7ff ff5e 	bl	8000c0c <__NVIC_GetPriorityGrouping>
 8000d50:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d52:	687a      	ldr	r2, [r7, #4]
 8000d54:	68b9      	ldr	r1, [r7, #8]
 8000d56:	6978      	ldr	r0, [r7, #20]
 8000d58:	f7ff ff90 	bl	8000c7c <NVIC_EncodePriority>
 8000d5c:	4602      	mov	r2, r0
 8000d5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d62:	4611      	mov	r1, r2
 8000d64:	4618      	mov	r0, r3
 8000d66:	f7ff ff5f 	bl	8000c28 <__NVIC_SetPriority>
}
 8000d6a:	bf00      	nop
 8000d6c:	3718      	adds	r7, #24
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}

08000d72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d72:	b580      	push	{r7, lr}
 8000d74:	b082      	sub	sp, #8
 8000d76:	af00      	add	r7, sp, #0
 8000d78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d7a:	6878      	ldr	r0, [r7, #4]
 8000d7c:	f7ff ffb2 	bl	8000ce4 <SysTick_Config>
 8000d80:	4603      	mov	r3, r0
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	3708      	adds	r7, #8
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
	...

08000d8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b087      	sub	sp, #28
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
 8000d94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000d96:	2300      	movs	r3, #0
 8000d98:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000d9a:	e15a      	b.n	8001052 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	681a      	ldr	r2, [r3, #0]
 8000da0:	2101      	movs	r1, #1
 8000da2:	697b      	ldr	r3, [r7, #20]
 8000da4:	fa01 f303 	lsl.w	r3, r1, r3
 8000da8:	4013      	ands	r3, r2
 8000daa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	f000 814c 	beq.w	800104c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	f003 0303 	and.w	r3, r3, #3
 8000dbc:	2b01      	cmp	r3, #1
 8000dbe:	d005      	beq.n	8000dcc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000dc8:	2b02      	cmp	r3, #2
 8000dca:	d130      	bne.n	8000e2e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	689b      	ldr	r3, [r3, #8]
 8000dd0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000dd2:	697b      	ldr	r3, [r7, #20]
 8000dd4:	005b      	lsls	r3, r3, #1
 8000dd6:	2203      	movs	r2, #3
 8000dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ddc:	43db      	mvns	r3, r3
 8000dde:	693a      	ldr	r2, [r7, #16]
 8000de0:	4013      	ands	r3, r2
 8000de2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	68da      	ldr	r2, [r3, #12]
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	005b      	lsls	r3, r3, #1
 8000dec:	fa02 f303 	lsl.w	r3, r2, r3
 8000df0:	693a      	ldr	r2, [r7, #16]
 8000df2:	4313      	orrs	r3, r2
 8000df4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	693a      	ldr	r2, [r7, #16]
 8000dfa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e02:	2201      	movs	r2, #1
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0a:	43db      	mvns	r3, r3
 8000e0c:	693a      	ldr	r2, [r7, #16]
 8000e0e:	4013      	ands	r3, r2
 8000e10:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	091b      	lsrs	r3, r3, #4
 8000e18:	f003 0201 	and.w	r2, r3, #1
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e22:	693a      	ldr	r2, [r7, #16]
 8000e24:	4313      	orrs	r3, r2
 8000e26:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	693a      	ldr	r2, [r7, #16]
 8000e2c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	f003 0303 	and.w	r3, r3, #3
 8000e36:	2b03      	cmp	r3, #3
 8000e38:	d017      	beq.n	8000e6a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	68db      	ldr	r3, [r3, #12]
 8000e3e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	005b      	lsls	r3, r3, #1
 8000e44:	2203      	movs	r2, #3
 8000e46:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4a:	43db      	mvns	r3, r3
 8000e4c:	693a      	ldr	r2, [r7, #16]
 8000e4e:	4013      	ands	r3, r2
 8000e50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	689a      	ldr	r2, [r3, #8]
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	005b      	lsls	r3, r3, #1
 8000e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5e:	693a      	ldr	r2, [r7, #16]
 8000e60:	4313      	orrs	r3, r2
 8000e62:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	693a      	ldr	r2, [r7, #16]
 8000e68:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	f003 0303 	and.w	r3, r3, #3
 8000e72:	2b02      	cmp	r3, #2
 8000e74:	d123      	bne.n	8000ebe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	08da      	lsrs	r2, r3, #3
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	3208      	adds	r2, #8
 8000e7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e82:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	f003 0307 	and.w	r3, r3, #7
 8000e8a:	009b      	lsls	r3, r3, #2
 8000e8c:	220f      	movs	r2, #15
 8000e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e92:	43db      	mvns	r3, r3
 8000e94:	693a      	ldr	r2, [r7, #16]
 8000e96:	4013      	ands	r3, r2
 8000e98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	691a      	ldr	r2, [r3, #16]
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	f003 0307 	and.w	r3, r3, #7
 8000ea4:	009b      	lsls	r3, r3, #2
 8000ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eaa:	693a      	ldr	r2, [r7, #16]
 8000eac:	4313      	orrs	r3, r2
 8000eae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	08da      	lsrs	r2, r3, #3
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	3208      	adds	r2, #8
 8000eb8:	6939      	ldr	r1, [r7, #16]
 8000eba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	005b      	lsls	r3, r3, #1
 8000ec8:	2203      	movs	r2, #3
 8000eca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ece:	43db      	mvns	r3, r3
 8000ed0:	693a      	ldr	r2, [r7, #16]
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	f003 0203 	and.w	r2, r3, #3
 8000ede:	697b      	ldr	r3, [r7, #20]
 8000ee0:	005b      	lsls	r3, r3, #1
 8000ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee6:	693a      	ldr	r2, [r7, #16]
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	693a      	ldr	r2, [r7, #16]
 8000ef0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	f000 80a6 	beq.w	800104c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f00:	4b5b      	ldr	r3, [pc, #364]	@ (8001070 <HAL_GPIO_Init+0x2e4>)
 8000f02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f04:	4a5a      	ldr	r2, [pc, #360]	@ (8001070 <HAL_GPIO_Init+0x2e4>)
 8000f06:	f043 0301 	orr.w	r3, r3, #1
 8000f0a:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f0c:	4b58      	ldr	r3, [pc, #352]	@ (8001070 <HAL_GPIO_Init+0x2e4>)
 8000f0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f10:	f003 0301 	and.w	r3, r3, #1
 8000f14:	60bb      	str	r3, [r7, #8]
 8000f16:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f18:	4a56      	ldr	r2, [pc, #344]	@ (8001074 <HAL_GPIO_Init+0x2e8>)
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	089b      	lsrs	r3, r3, #2
 8000f1e:	3302      	adds	r3, #2
 8000f20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f24:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	f003 0303 	and.w	r3, r3, #3
 8000f2c:	009b      	lsls	r3, r3, #2
 8000f2e:	220f      	movs	r2, #15
 8000f30:	fa02 f303 	lsl.w	r3, r2, r3
 8000f34:	43db      	mvns	r3, r3
 8000f36:	693a      	ldr	r2, [r7, #16]
 8000f38:	4013      	ands	r3, r2
 8000f3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000f42:	d01f      	beq.n	8000f84 <HAL_GPIO_Init+0x1f8>
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	4a4c      	ldr	r2, [pc, #304]	@ (8001078 <HAL_GPIO_Init+0x2ec>)
 8000f48:	4293      	cmp	r3, r2
 8000f4a:	d019      	beq.n	8000f80 <HAL_GPIO_Init+0x1f4>
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	4a4b      	ldr	r2, [pc, #300]	@ (800107c <HAL_GPIO_Init+0x2f0>)
 8000f50:	4293      	cmp	r3, r2
 8000f52:	d013      	beq.n	8000f7c <HAL_GPIO_Init+0x1f0>
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	4a4a      	ldr	r2, [pc, #296]	@ (8001080 <HAL_GPIO_Init+0x2f4>)
 8000f58:	4293      	cmp	r3, r2
 8000f5a:	d00d      	beq.n	8000f78 <HAL_GPIO_Init+0x1ec>
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	4a49      	ldr	r2, [pc, #292]	@ (8001084 <HAL_GPIO_Init+0x2f8>)
 8000f60:	4293      	cmp	r3, r2
 8000f62:	d007      	beq.n	8000f74 <HAL_GPIO_Init+0x1e8>
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	4a48      	ldr	r2, [pc, #288]	@ (8001088 <HAL_GPIO_Init+0x2fc>)
 8000f68:	4293      	cmp	r3, r2
 8000f6a:	d101      	bne.n	8000f70 <HAL_GPIO_Init+0x1e4>
 8000f6c:	2305      	movs	r3, #5
 8000f6e:	e00a      	b.n	8000f86 <HAL_GPIO_Init+0x1fa>
 8000f70:	2306      	movs	r3, #6
 8000f72:	e008      	b.n	8000f86 <HAL_GPIO_Init+0x1fa>
 8000f74:	2304      	movs	r3, #4
 8000f76:	e006      	b.n	8000f86 <HAL_GPIO_Init+0x1fa>
 8000f78:	2303      	movs	r3, #3
 8000f7a:	e004      	b.n	8000f86 <HAL_GPIO_Init+0x1fa>
 8000f7c:	2302      	movs	r3, #2
 8000f7e:	e002      	b.n	8000f86 <HAL_GPIO_Init+0x1fa>
 8000f80:	2301      	movs	r3, #1
 8000f82:	e000      	b.n	8000f86 <HAL_GPIO_Init+0x1fa>
 8000f84:	2300      	movs	r3, #0
 8000f86:	697a      	ldr	r2, [r7, #20]
 8000f88:	f002 0203 	and.w	r2, r2, #3
 8000f8c:	0092      	lsls	r2, r2, #2
 8000f8e:	4093      	lsls	r3, r2
 8000f90:	693a      	ldr	r2, [r7, #16]
 8000f92:	4313      	orrs	r3, r2
 8000f94:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f96:	4937      	ldr	r1, [pc, #220]	@ (8001074 <HAL_GPIO_Init+0x2e8>)
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	089b      	lsrs	r3, r3, #2
 8000f9c:	3302      	adds	r3, #2
 8000f9e:	693a      	ldr	r2, [r7, #16]
 8000fa0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000fa4:	4b39      	ldr	r3, [pc, #228]	@ (800108c <HAL_GPIO_Init+0x300>)
 8000fa6:	689b      	ldr	r3, [r3, #8]
 8000fa8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	43db      	mvns	r3, r3
 8000fae:	693a      	ldr	r2, [r7, #16]
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d003      	beq.n	8000fc8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8000fc0:	693a      	ldr	r2, [r7, #16]
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000fc8:	4a30      	ldr	r2, [pc, #192]	@ (800108c <HAL_GPIO_Init+0x300>)
 8000fca:	693b      	ldr	r3, [r7, #16]
 8000fcc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000fce:	4b2f      	ldr	r3, [pc, #188]	@ (800108c <HAL_GPIO_Init+0x300>)
 8000fd0:	68db      	ldr	r3, [r3, #12]
 8000fd2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	43db      	mvns	r3, r3
 8000fd8:	693a      	ldr	r2, [r7, #16]
 8000fda:	4013      	ands	r3, r2
 8000fdc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d003      	beq.n	8000ff2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8000fea:	693a      	ldr	r2, [r7, #16]
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000ff2:	4a26      	ldr	r2, [pc, #152]	@ (800108c <HAL_GPIO_Init+0x300>)
 8000ff4:	693b      	ldr	r3, [r7, #16]
 8000ff6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8000ff8:	4b24      	ldr	r3, [pc, #144]	@ (800108c <HAL_GPIO_Init+0x300>)
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	43db      	mvns	r3, r3
 8001002:	693a      	ldr	r2, [r7, #16]
 8001004:	4013      	ands	r3, r2
 8001006:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001010:	2b00      	cmp	r3, #0
 8001012:	d003      	beq.n	800101c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001014:	693a      	ldr	r2, [r7, #16]
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	4313      	orrs	r3, r2
 800101a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800101c:	4a1b      	ldr	r2, [pc, #108]	@ (800108c <HAL_GPIO_Init+0x300>)
 800101e:	693b      	ldr	r3, [r7, #16]
 8001020:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001022:	4b1a      	ldr	r3, [pc, #104]	@ (800108c <HAL_GPIO_Init+0x300>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	43db      	mvns	r3, r3
 800102c:	693a      	ldr	r2, [r7, #16]
 800102e:	4013      	ands	r3, r2
 8001030:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800103a:	2b00      	cmp	r3, #0
 800103c:	d003      	beq.n	8001046 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800103e:	693a      	ldr	r2, [r7, #16]
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	4313      	orrs	r3, r2
 8001044:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001046:	4a11      	ldr	r2, [pc, #68]	@ (800108c <HAL_GPIO_Init+0x300>)
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	3301      	adds	r3, #1
 8001050:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	681a      	ldr	r2, [r3, #0]
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	fa22 f303 	lsr.w	r3, r2, r3
 800105c:	2b00      	cmp	r3, #0
 800105e:	f47f ae9d 	bne.w	8000d9c <HAL_GPIO_Init+0x10>
  }
}
 8001062:	bf00      	nop
 8001064:	bf00      	nop
 8001066:	371c      	adds	r7, #28
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr
 8001070:	40021000 	.word	0x40021000
 8001074:	40010000 	.word	0x40010000
 8001078:	48000400 	.word	0x48000400
 800107c:	48000800 	.word	0x48000800
 8001080:	48000c00 	.word	0x48000c00
 8001084:	48001000 	.word	0x48001000
 8001088:	48001400 	.word	0x48001400
 800108c:	40010400 	.word	0x40010400

08001090 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	460b      	mov	r3, r1
 800109a:	807b      	strh	r3, [r7, #2]
 800109c:	4613      	mov	r3, r2
 800109e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80010a0:	787b      	ldrb	r3, [r7, #1]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d003      	beq.n	80010ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80010a6:	887a      	ldrh	r2, [r7, #2]
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80010ac:	e002      	b.n	80010b4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80010ae:	887a      	ldrh	r2, [r7, #2]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80010b4:	bf00      	nop
 80010b6:	370c      	adds	r7, #12
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr

080010c0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b085      	sub	sp, #20
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d141      	bne.n	8001152 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80010ce:	4b4b      	ldr	r3, [pc, #300]	@ (80011fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80010d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80010da:	d131      	bne.n	8001140 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80010dc:	4b47      	ldr	r3, [pc, #284]	@ (80011fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80010e2:	4a46      	ldr	r2, [pc, #280]	@ (80011fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80010e8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80010ec:	4b43      	ldr	r3, [pc, #268]	@ (80011fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80010f4:	4a41      	ldr	r2, [pc, #260]	@ (80011fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010f6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80010fa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80010fc:	4b40      	ldr	r3, [pc, #256]	@ (8001200 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	2232      	movs	r2, #50	@ 0x32
 8001102:	fb02 f303 	mul.w	r3, r2, r3
 8001106:	4a3f      	ldr	r2, [pc, #252]	@ (8001204 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001108:	fba2 2303 	umull	r2, r3, r2, r3
 800110c:	0c9b      	lsrs	r3, r3, #18
 800110e:	3301      	adds	r3, #1
 8001110:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001112:	e002      	b.n	800111a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	3b01      	subs	r3, #1
 8001118:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800111a:	4b38      	ldr	r3, [pc, #224]	@ (80011fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800111c:	695b      	ldr	r3, [r3, #20]
 800111e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001122:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001126:	d102      	bne.n	800112e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d1f2      	bne.n	8001114 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800112e:	4b33      	ldr	r3, [pc, #204]	@ (80011fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001130:	695b      	ldr	r3, [r3, #20]
 8001132:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001136:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800113a:	d158      	bne.n	80011ee <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800113c:	2303      	movs	r3, #3
 800113e:	e057      	b.n	80011f0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001140:	4b2e      	ldr	r3, [pc, #184]	@ (80011fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001142:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001146:	4a2d      	ldr	r2, [pc, #180]	@ (80011fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001148:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800114c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001150:	e04d      	b.n	80011ee <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001158:	d141      	bne.n	80011de <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800115a:	4b28      	ldr	r3, [pc, #160]	@ (80011fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001162:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001166:	d131      	bne.n	80011cc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001168:	4b24      	ldr	r3, [pc, #144]	@ (80011fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800116a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800116e:	4a23      	ldr	r2, [pc, #140]	@ (80011fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001170:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001174:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001178:	4b20      	ldr	r3, [pc, #128]	@ (80011fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001180:	4a1e      	ldr	r2, [pc, #120]	@ (80011fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001182:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001186:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001188:	4b1d      	ldr	r3, [pc, #116]	@ (8001200 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	2232      	movs	r2, #50	@ 0x32
 800118e:	fb02 f303 	mul.w	r3, r2, r3
 8001192:	4a1c      	ldr	r2, [pc, #112]	@ (8001204 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001194:	fba2 2303 	umull	r2, r3, r2, r3
 8001198:	0c9b      	lsrs	r3, r3, #18
 800119a:	3301      	adds	r3, #1
 800119c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800119e:	e002      	b.n	80011a6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	3b01      	subs	r3, #1
 80011a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011a6:	4b15      	ldr	r3, [pc, #84]	@ (80011fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011a8:	695b      	ldr	r3, [r3, #20]
 80011aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80011ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80011b2:	d102      	bne.n	80011ba <HAL_PWREx_ControlVoltageScaling+0xfa>
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d1f2      	bne.n	80011a0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80011ba:	4b10      	ldr	r3, [pc, #64]	@ (80011fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011bc:	695b      	ldr	r3, [r3, #20]
 80011be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80011c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80011c6:	d112      	bne.n	80011ee <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80011c8:	2303      	movs	r3, #3
 80011ca:	e011      	b.n	80011f0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80011cc:	4b0b      	ldr	r3, [pc, #44]	@ (80011fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80011d2:	4a0a      	ldr	r2, [pc, #40]	@ (80011fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011d8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80011dc:	e007      	b.n	80011ee <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80011de:	4b07      	ldr	r3, [pc, #28]	@ (80011fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80011e6:	4a05      	ldr	r2, [pc, #20]	@ (80011fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011e8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80011ec:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80011ee:	2300      	movs	r3, #0
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	3714      	adds	r7, #20
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr
 80011fc:	40007000 	.word	0x40007000
 8001200:	20000000 	.word	0x20000000
 8001204:	431bde83 	.word	0x431bde83

08001208 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800120c:	4b05      	ldr	r3, [pc, #20]	@ (8001224 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800120e:	689b      	ldr	r3, [r3, #8]
 8001210:	4a04      	ldr	r2, [pc, #16]	@ (8001224 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001212:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001216:	6093      	str	r3, [r2, #8]
}
 8001218:	bf00      	nop
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	40007000 	.word	0x40007000

08001228 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b088      	sub	sp, #32
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d101      	bne.n	800123a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001236:	2301      	movs	r3, #1
 8001238:	e2fe      	b.n	8001838 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f003 0301 	and.w	r3, r3, #1
 8001242:	2b00      	cmp	r3, #0
 8001244:	d075      	beq.n	8001332 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001246:	4b97      	ldr	r3, [pc, #604]	@ (80014a4 <HAL_RCC_OscConfig+0x27c>)
 8001248:	689b      	ldr	r3, [r3, #8]
 800124a:	f003 030c 	and.w	r3, r3, #12
 800124e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001250:	4b94      	ldr	r3, [pc, #592]	@ (80014a4 <HAL_RCC_OscConfig+0x27c>)
 8001252:	68db      	ldr	r3, [r3, #12]
 8001254:	f003 0303 	and.w	r3, r3, #3
 8001258:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800125a:	69bb      	ldr	r3, [r7, #24]
 800125c:	2b0c      	cmp	r3, #12
 800125e:	d102      	bne.n	8001266 <HAL_RCC_OscConfig+0x3e>
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	2b03      	cmp	r3, #3
 8001264:	d002      	beq.n	800126c <HAL_RCC_OscConfig+0x44>
 8001266:	69bb      	ldr	r3, [r7, #24]
 8001268:	2b08      	cmp	r3, #8
 800126a:	d10b      	bne.n	8001284 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800126c:	4b8d      	ldr	r3, [pc, #564]	@ (80014a4 <HAL_RCC_OscConfig+0x27c>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001274:	2b00      	cmp	r3, #0
 8001276:	d05b      	beq.n	8001330 <HAL_RCC_OscConfig+0x108>
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d157      	bne.n	8001330 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001280:	2301      	movs	r3, #1
 8001282:	e2d9      	b.n	8001838 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800128c:	d106      	bne.n	800129c <HAL_RCC_OscConfig+0x74>
 800128e:	4b85      	ldr	r3, [pc, #532]	@ (80014a4 <HAL_RCC_OscConfig+0x27c>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a84      	ldr	r2, [pc, #528]	@ (80014a4 <HAL_RCC_OscConfig+0x27c>)
 8001294:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001298:	6013      	str	r3, [r2, #0]
 800129a:	e01d      	b.n	80012d8 <HAL_RCC_OscConfig+0xb0>
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80012a4:	d10c      	bne.n	80012c0 <HAL_RCC_OscConfig+0x98>
 80012a6:	4b7f      	ldr	r3, [pc, #508]	@ (80014a4 <HAL_RCC_OscConfig+0x27c>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a7e      	ldr	r2, [pc, #504]	@ (80014a4 <HAL_RCC_OscConfig+0x27c>)
 80012ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80012b0:	6013      	str	r3, [r2, #0]
 80012b2:	4b7c      	ldr	r3, [pc, #496]	@ (80014a4 <HAL_RCC_OscConfig+0x27c>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4a7b      	ldr	r2, [pc, #492]	@ (80014a4 <HAL_RCC_OscConfig+0x27c>)
 80012b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012bc:	6013      	str	r3, [r2, #0]
 80012be:	e00b      	b.n	80012d8 <HAL_RCC_OscConfig+0xb0>
 80012c0:	4b78      	ldr	r3, [pc, #480]	@ (80014a4 <HAL_RCC_OscConfig+0x27c>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a77      	ldr	r2, [pc, #476]	@ (80014a4 <HAL_RCC_OscConfig+0x27c>)
 80012c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80012ca:	6013      	str	r3, [r2, #0]
 80012cc:	4b75      	ldr	r3, [pc, #468]	@ (80014a4 <HAL_RCC_OscConfig+0x27c>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a74      	ldr	r2, [pc, #464]	@ (80014a4 <HAL_RCC_OscConfig+0x27c>)
 80012d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80012d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d013      	beq.n	8001308 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012e0:	f7ff fc42 	bl	8000b68 <HAL_GetTick>
 80012e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80012e6:	e008      	b.n	80012fa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012e8:	f7ff fc3e 	bl	8000b68 <HAL_GetTick>
 80012ec:	4602      	mov	r2, r0
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	1ad3      	subs	r3, r2, r3
 80012f2:	2b64      	cmp	r3, #100	@ 0x64
 80012f4:	d901      	bls.n	80012fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80012f6:	2303      	movs	r3, #3
 80012f8:	e29e      	b.n	8001838 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80012fa:	4b6a      	ldr	r3, [pc, #424]	@ (80014a4 <HAL_RCC_OscConfig+0x27c>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001302:	2b00      	cmp	r3, #0
 8001304:	d0f0      	beq.n	80012e8 <HAL_RCC_OscConfig+0xc0>
 8001306:	e014      	b.n	8001332 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001308:	f7ff fc2e 	bl	8000b68 <HAL_GetTick>
 800130c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800130e:	e008      	b.n	8001322 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001310:	f7ff fc2a 	bl	8000b68 <HAL_GetTick>
 8001314:	4602      	mov	r2, r0
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	1ad3      	subs	r3, r2, r3
 800131a:	2b64      	cmp	r3, #100	@ 0x64
 800131c:	d901      	bls.n	8001322 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800131e:	2303      	movs	r3, #3
 8001320:	e28a      	b.n	8001838 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001322:	4b60      	ldr	r3, [pc, #384]	@ (80014a4 <HAL_RCC_OscConfig+0x27c>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800132a:	2b00      	cmp	r3, #0
 800132c:	d1f0      	bne.n	8001310 <HAL_RCC_OscConfig+0xe8>
 800132e:	e000      	b.n	8001332 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001330:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f003 0302 	and.w	r3, r3, #2
 800133a:	2b00      	cmp	r3, #0
 800133c:	d075      	beq.n	800142a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800133e:	4b59      	ldr	r3, [pc, #356]	@ (80014a4 <HAL_RCC_OscConfig+0x27c>)
 8001340:	689b      	ldr	r3, [r3, #8]
 8001342:	f003 030c 	and.w	r3, r3, #12
 8001346:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001348:	4b56      	ldr	r3, [pc, #344]	@ (80014a4 <HAL_RCC_OscConfig+0x27c>)
 800134a:	68db      	ldr	r3, [r3, #12]
 800134c:	f003 0303 	and.w	r3, r3, #3
 8001350:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001352:	69bb      	ldr	r3, [r7, #24]
 8001354:	2b0c      	cmp	r3, #12
 8001356:	d102      	bne.n	800135e <HAL_RCC_OscConfig+0x136>
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	2b02      	cmp	r3, #2
 800135c:	d002      	beq.n	8001364 <HAL_RCC_OscConfig+0x13c>
 800135e:	69bb      	ldr	r3, [r7, #24]
 8001360:	2b04      	cmp	r3, #4
 8001362:	d11f      	bne.n	80013a4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001364:	4b4f      	ldr	r3, [pc, #316]	@ (80014a4 <HAL_RCC_OscConfig+0x27c>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800136c:	2b00      	cmp	r3, #0
 800136e:	d005      	beq.n	800137c <HAL_RCC_OscConfig+0x154>
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	68db      	ldr	r3, [r3, #12]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d101      	bne.n	800137c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001378:	2301      	movs	r3, #1
 800137a:	e25d      	b.n	8001838 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800137c:	4b49      	ldr	r3, [pc, #292]	@ (80014a4 <HAL_RCC_OscConfig+0x27c>)
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	691b      	ldr	r3, [r3, #16]
 8001388:	061b      	lsls	r3, r3, #24
 800138a:	4946      	ldr	r1, [pc, #280]	@ (80014a4 <HAL_RCC_OscConfig+0x27c>)
 800138c:	4313      	orrs	r3, r2
 800138e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001390:	4b45      	ldr	r3, [pc, #276]	@ (80014a8 <HAL_RCC_OscConfig+0x280>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4618      	mov	r0, r3
 8001396:	f7ff fb9b 	bl	8000ad0 <HAL_InitTick>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d043      	beq.n	8001428 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80013a0:	2301      	movs	r3, #1
 80013a2:	e249      	b.n	8001838 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	68db      	ldr	r3, [r3, #12]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d023      	beq.n	80013f4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013ac:	4b3d      	ldr	r3, [pc, #244]	@ (80014a4 <HAL_RCC_OscConfig+0x27c>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a3c      	ldr	r2, [pc, #240]	@ (80014a4 <HAL_RCC_OscConfig+0x27c>)
 80013b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013b8:	f7ff fbd6 	bl	8000b68 <HAL_GetTick>
 80013bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80013be:	e008      	b.n	80013d2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013c0:	f7ff fbd2 	bl	8000b68 <HAL_GetTick>
 80013c4:	4602      	mov	r2, r0
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	2b02      	cmp	r3, #2
 80013cc:	d901      	bls.n	80013d2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80013ce:	2303      	movs	r3, #3
 80013d0:	e232      	b.n	8001838 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80013d2:	4b34      	ldr	r3, [pc, #208]	@ (80014a4 <HAL_RCC_OscConfig+0x27c>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d0f0      	beq.n	80013c0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013de:	4b31      	ldr	r3, [pc, #196]	@ (80014a4 <HAL_RCC_OscConfig+0x27c>)
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	691b      	ldr	r3, [r3, #16]
 80013ea:	061b      	lsls	r3, r3, #24
 80013ec:	492d      	ldr	r1, [pc, #180]	@ (80014a4 <HAL_RCC_OscConfig+0x27c>)
 80013ee:	4313      	orrs	r3, r2
 80013f0:	604b      	str	r3, [r1, #4]
 80013f2:	e01a      	b.n	800142a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013f4:	4b2b      	ldr	r3, [pc, #172]	@ (80014a4 <HAL_RCC_OscConfig+0x27c>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a2a      	ldr	r2, [pc, #168]	@ (80014a4 <HAL_RCC_OscConfig+0x27c>)
 80013fa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80013fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001400:	f7ff fbb2 	bl	8000b68 <HAL_GetTick>
 8001404:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001406:	e008      	b.n	800141a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001408:	f7ff fbae 	bl	8000b68 <HAL_GetTick>
 800140c:	4602      	mov	r2, r0
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	1ad3      	subs	r3, r2, r3
 8001412:	2b02      	cmp	r3, #2
 8001414:	d901      	bls.n	800141a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001416:	2303      	movs	r3, #3
 8001418:	e20e      	b.n	8001838 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800141a:	4b22      	ldr	r3, [pc, #136]	@ (80014a4 <HAL_RCC_OscConfig+0x27c>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001422:	2b00      	cmp	r3, #0
 8001424:	d1f0      	bne.n	8001408 <HAL_RCC_OscConfig+0x1e0>
 8001426:	e000      	b.n	800142a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001428:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f003 0308 	and.w	r3, r3, #8
 8001432:	2b00      	cmp	r3, #0
 8001434:	d041      	beq.n	80014ba <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	695b      	ldr	r3, [r3, #20]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d01c      	beq.n	8001478 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800143e:	4b19      	ldr	r3, [pc, #100]	@ (80014a4 <HAL_RCC_OscConfig+0x27c>)
 8001440:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001444:	4a17      	ldr	r2, [pc, #92]	@ (80014a4 <HAL_RCC_OscConfig+0x27c>)
 8001446:	f043 0301 	orr.w	r3, r3, #1
 800144a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800144e:	f7ff fb8b 	bl	8000b68 <HAL_GetTick>
 8001452:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001454:	e008      	b.n	8001468 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001456:	f7ff fb87 	bl	8000b68 <HAL_GetTick>
 800145a:	4602      	mov	r2, r0
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	1ad3      	subs	r3, r2, r3
 8001460:	2b02      	cmp	r3, #2
 8001462:	d901      	bls.n	8001468 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001464:	2303      	movs	r3, #3
 8001466:	e1e7      	b.n	8001838 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001468:	4b0e      	ldr	r3, [pc, #56]	@ (80014a4 <HAL_RCC_OscConfig+0x27c>)
 800146a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800146e:	f003 0302 	and.w	r3, r3, #2
 8001472:	2b00      	cmp	r3, #0
 8001474:	d0ef      	beq.n	8001456 <HAL_RCC_OscConfig+0x22e>
 8001476:	e020      	b.n	80014ba <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001478:	4b0a      	ldr	r3, [pc, #40]	@ (80014a4 <HAL_RCC_OscConfig+0x27c>)
 800147a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800147e:	4a09      	ldr	r2, [pc, #36]	@ (80014a4 <HAL_RCC_OscConfig+0x27c>)
 8001480:	f023 0301 	bic.w	r3, r3, #1
 8001484:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001488:	f7ff fb6e 	bl	8000b68 <HAL_GetTick>
 800148c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800148e:	e00d      	b.n	80014ac <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001490:	f7ff fb6a 	bl	8000b68 <HAL_GetTick>
 8001494:	4602      	mov	r2, r0
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	2b02      	cmp	r3, #2
 800149c:	d906      	bls.n	80014ac <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800149e:	2303      	movs	r3, #3
 80014a0:	e1ca      	b.n	8001838 <HAL_RCC_OscConfig+0x610>
 80014a2:	bf00      	nop
 80014a4:	40021000 	.word	0x40021000
 80014a8:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80014ac:	4b8c      	ldr	r3, [pc, #560]	@ (80016e0 <HAL_RCC_OscConfig+0x4b8>)
 80014ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80014b2:	f003 0302 	and.w	r3, r3, #2
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d1ea      	bne.n	8001490 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f003 0304 	and.w	r3, r3, #4
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	f000 80a6 	beq.w	8001614 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014c8:	2300      	movs	r3, #0
 80014ca:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80014cc:	4b84      	ldr	r3, [pc, #528]	@ (80016e0 <HAL_RCC_OscConfig+0x4b8>)
 80014ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d101      	bne.n	80014dc <HAL_RCC_OscConfig+0x2b4>
 80014d8:	2301      	movs	r3, #1
 80014da:	e000      	b.n	80014de <HAL_RCC_OscConfig+0x2b6>
 80014dc:	2300      	movs	r3, #0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d00d      	beq.n	80014fe <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014e2:	4b7f      	ldr	r3, [pc, #508]	@ (80016e0 <HAL_RCC_OscConfig+0x4b8>)
 80014e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014e6:	4a7e      	ldr	r2, [pc, #504]	@ (80016e0 <HAL_RCC_OscConfig+0x4b8>)
 80014e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80014ee:	4b7c      	ldr	r3, [pc, #496]	@ (80016e0 <HAL_RCC_OscConfig+0x4b8>)
 80014f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014f6:	60fb      	str	r3, [r7, #12]
 80014f8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80014fa:	2301      	movs	r3, #1
 80014fc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014fe:	4b79      	ldr	r3, [pc, #484]	@ (80016e4 <HAL_RCC_OscConfig+0x4bc>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001506:	2b00      	cmp	r3, #0
 8001508:	d118      	bne.n	800153c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800150a:	4b76      	ldr	r3, [pc, #472]	@ (80016e4 <HAL_RCC_OscConfig+0x4bc>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4a75      	ldr	r2, [pc, #468]	@ (80016e4 <HAL_RCC_OscConfig+0x4bc>)
 8001510:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001514:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001516:	f7ff fb27 	bl	8000b68 <HAL_GetTick>
 800151a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800151c:	e008      	b.n	8001530 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800151e:	f7ff fb23 	bl	8000b68 <HAL_GetTick>
 8001522:	4602      	mov	r2, r0
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	1ad3      	subs	r3, r2, r3
 8001528:	2b02      	cmp	r3, #2
 800152a:	d901      	bls.n	8001530 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800152c:	2303      	movs	r3, #3
 800152e:	e183      	b.n	8001838 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001530:	4b6c      	ldr	r3, [pc, #432]	@ (80016e4 <HAL_RCC_OscConfig+0x4bc>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001538:	2b00      	cmp	r3, #0
 800153a:	d0f0      	beq.n	800151e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	689b      	ldr	r3, [r3, #8]
 8001540:	2b01      	cmp	r3, #1
 8001542:	d108      	bne.n	8001556 <HAL_RCC_OscConfig+0x32e>
 8001544:	4b66      	ldr	r3, [pc, #408]	@ (80016e0 <HAL_RCC_OscConfig+0x4b8>)
 8001546:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800154a:	4a65      	ldr	r2, [pc, #404]	@ (80016e0 <HAL_RCC_OscConfig+0x4b8>)
 800154c:	f043 0301 	orr.w	r3, r3, #1
 8001550:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001554:	e024      	b.n	80015a0 <HAL_RCC_OscConfig+0x378>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	689b      	ldr	r3, [r3, #8]
 800155a:	2b05      	cmp	r3, #5
 800155c:	d110      	bne.n	8001580 <HAL_RCC_OscConfig+0x358>
 800155e:	4b60      	ldr	r3, [pc, #384]	@ (80016e0 <HAL_RCC_OscConfig+0x4b8>)
 8001560:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001564:	4a5e      	ldr	r2, [pc, #376]	@ (80016e0 <HAL_RCC_OscConfig+0x4b8>)
 8001566:	f043 0304 	orr.w	r3, r3, #4
 800156a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800156e:	4b5c      	ldr	r3, [pc, #368]	@ (80016e0 <HAL_RCC_OscConfig+0x4b8>)
 8001570:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001574:	4a5a      	ldr	r2, [pc, #360]	@ (80016e0 <HAL_RCC_OscConfig+0x4b8>)
 8001576:	f043 0301 	orr.w	r3, r3, #1
 800157a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800157e:	e00f      	b.n	80015a0 <HAL_RCC_OscConfig+0x378>
 8001580:	4b57      	ldr	r3, [pc, #348]	@ (80016e0 <HAL_RCC_OscConfig+0x4b8>)
 8001582:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001586:	4a56      	ldr	r2, [pc, #344]	@ (80016e0 <HAL_RCC_OscConfig+0x4b8>)
 8001588:	f023 0301 	bic.w	r3, r3, #1
 800158c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001590:	4b53      	ldr	r3, [pc, #332]	@ (80016e0 <HAL_RCC_OscConfig+0x4b8>)
 8001592:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001596:	4a52      	ldr	r2, [pc, #328]	@ (80016e0 <HAL_RCC_OscConfig+0x4b8>)
 8001598:	f023 0304 	bic.w	r3, r3, #4
 800159c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d016      	beq.n	80015d6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015a8:	f7ff fade 	bl	8000b68 <HAL_GetTick>
 80015ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80015ae:	e00a      	b.n	80015c6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015b0:	f7ff fada 	bl	8000b68 <HAL_GetTick>
 80015b4:	4602      	mov	r2, r0
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015be:	4293      	cmp	r3, r2
 80015c0:	d901      	bls.n	80015c6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80015c2:	2303      	movs	r3, #3
 80015c4:	e138      	b.n	8001838 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80015c6:	4b46      	ldr	r3, [pc, #280]	@ (80016e0 <HAL_RCC_OscConfig+0x4b8>)
 80015c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80015cc:	f003 0302 	and.w	r3, r3, #2
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d0ed      	beq.n	80015b0 <HAL_RCC_OscConfig+0x388>
 80015d4:	e015      	b.n	8001602 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015d6:	f7ff fac7 	bl	8000b68 <HAL_GetTick>
 80015da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80015dc:	e00a      	b.n	80015f4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015de:	f7ff fac3 	bl	8000b68 <HAL_GetTick>
 80015e2:	4602      	mov	r2, r0
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	1ad3      	subs	r3, r2, r3
 80015e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d901      	bls.n	80015f4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80015f0:	2303      	movs	r3, #3
 80015f2:	e121      	b.n	8001838 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80015f4:	4b3a      	ldr	r3, [pc, #232]	@ (80016e0 <HAL_RCC_OscConfig+0x4b8>)
 80015f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80015fa:	f003 0302 	and.w	r3, r3, #2
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d1ed      	bne.n	80015de <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001602:	7ffb      	ldrb	r3, [r7, #31]
 8001604:	2b01      	cmp	r3, #1
 8001606:	d105      	bne.n	8001614 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001608:	4b35      	ldr	r3, [pc, #212]	@ (80016e0 <HAL_RCC_OscConfig+0x4b8>)
 800160a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800160c:	4a34      	ldr	r2, [pc, #208]	@ (80016e0 <HAL_RCC_OscConfig+0x4b8>)
 800160e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001612:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f003 0320 	and.w	r3, r3, #32
 800161c:	2b00      	cmp	r3, #0
 800161e:	d03c      	beq.n	800169a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	699b      	ldr	r3, [r3, #24]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d01c      	beq.n	8001662 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001628:	4b2d      	ldr	r3, [pc, #180]	@ (80016e0 <HAL_RCC_OscConfig+0x4b8>)
 800162a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800162e:	4a2c      	ldr	r2, [pc, #176]	@ (80016e0 <HAL_RCC_OscConfig+0x4b8>)
 8001630:	f043 0301 	orr.w	r3, r3, #1
 8001634:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001638:	f7ff fa96 	bl	8000b68 <HAL_GetTick>
 800163c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800163e:	e008      	b.n	8001652 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001640:	f7ff fa92 	bl	8000b68 <HAL_GetTick>
 8001644:	4602      	mov	r2, r0
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	1ad3      	subs	r3, r2, r3
 800164a:	2b02      	cmp	r3, #2
 800164c:	d901      	bls.n	8001652 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800164e:	2303      	movs	r3, #3
 8001650:	e0f2      	b.n	8001838 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001652:	4b23      	ldr	r3, [pc, #140]	@ (80016e0 <HAL_RCC_OscConfig+0x4b8>)
 8001654:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001658:	f003 0302 	and.w	r3, r3, #2
 800165c:	2b00      	cmp	r3, #0
 800165e:	d0ef      	beq.n	8001640 <HAL_RCC_OscConfig+0x418>
 8001660:	e01b      	b.n	800169a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001662:	4b1f      	ldr	r3, [pc, #124]	@ (80016e0 <HAL_RCC_OscConfig+0x4b8>)
 8001664:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001668:	4a1d      	ldr	r2, [pc, #116]	@ (80016e0 <HAL_RCC_OscConfig+0x4b8>)
 800166a:	f023 0301 	bic.w	r3, r3, #1
 800166e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001672:	f7ff fa79 	bl	8000b68 <HAL_GetTick>
 8001676:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001678:	e008      	b.n	800168c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800167a:	f7ff fa75 	bl	8000b68 <HAL_GetTick>
 800167e:	4602      	mov	r2, r0
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	1ad3      	subs	r3, r2, r3
 8001684:	2b02      	cmp	r3, #2
 8001686:	d901      	bls.n	800168c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001688:	2303      	movs	r3, #3
 800168a:	e0d5      	b.n	8001838 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800168c:	4b14      	ldr	r3, [pc, #80]	@ (80016e0 <HAL_RCC_OscConfig+0x4b8>)
 800168e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001692:	f003 0302 	and.w	r3, r3, #2
 8001696:	2b00      	cmp	r3, #0
 8001698:	d1ef      	bne.n	800167a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	69db      	ldr	r3, [r3, #28]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	f000 80c9 	beq.w	8001836 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80016a4:	4b0e      	ldr	r3, [pc, #56]	@ (80016e0 <HAL_RCC_OscConfig+0x4b8>)
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	f003 030c 	and.w	r3, r3, #12
 80016ac:	2b0c      	cmp	r3, #12
 80016ae:	f000 8083 	beq.w	80017b8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	69db      	ldr	r3, [r3, #28]
 80016b6:	2b02      	cmp	r3, #2
 80016b8:	d15e      	bne.n	8001778 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016ba:	4b09      	ldr	r3, [pc, #36]	@ (80016e0 <HAL_RCC_OscConfig+0x4b8>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a08      	ldr	r2, [pc, #32]	@ (80016e0 <HAL_RCC_OscConfig+0x4b8>)
 80016c0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80016c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016c6:	f7ff fa4f 	bl	8000b68 <HAL_GetTick>
 80016ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016cc:	e00c      	b.n	80016e8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016ce:	f7ff fa4b 	bl	8000b68 <HAL_GetTick>
 80016d2:	4602      	mov	r2, r0
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	1ad3      	subs	r3, r2, r3
 80016d8:	2b02      	cmp	r3, #2
 80016da:	d905      	bls.n	80016e8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80016dc:	2303      	movs	r3, #3
 80016de:	e0ab      	b.n	8001838 <HAL_RCC_OscConfig+0x610>
 80016e0:	40021000 	.word	0x40021000
 80016e4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016e8:	4b55      	ldr	r3, [pc, #340]	@ (8001840 <HAL_RCC_OscConfig+0x618>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d1ec      	bne.n	80016ce <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016f4:	4b52      	ldr	r3, [pc, #328]	@ (8001840 <HAL_RCC_OscConfig+0x618>)
 80016f6:	68da      	ldr	r2, [r3, #12]
 80016f8:	4b52      	ldr	r3, [pc, #328]	@ (8001844 <HAL_RCC_OscConfig+0x61c>)
 80016fa:	4013      	ands	r3, r2
 80016fc:	687a      	ldr	r2, [r7, #4]
 80016fe:	6a11      	ldr	r1, [r2, #32]
 8001700:	687a      	ldr	r2, [r7, #4]
 8001702:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001704:	3a01      	subs	r2, #1
 8001706:	0112      	lsls	r2, r2, #4
 8001708:	4311      	orrs	r1, r2
 800170a:	687a      	ldr	r2, [r7, #4]
 800170c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800170e:	0212      	lsls	r2, r2, #8
 8001710:	4311      	orrs	r1, r2
 8001712:	687a      	ldr	r2, [r7, #4]
 8001714:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001716:	0852      	lsrs	r2, r2, #1
 8001718:	3a01      	subs	r2, #1
 800171a:	0552      	lsls	r2, r2, #21
 800171c:	4311      	orrs	r1, r2
 800171e:	687a      	ldr	r2, [r7, #4]
 8001720:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001722:	0852      	lsrs	r2, r2, #1
 8001724:	3a01      	subs	r2, #1
 8001726:	0652      	lsls	r2, r2, #25
 8001728:	4311      	orrs	r1, r2
 800172a:	687a      	ldr	r2, [r7, #4]
 800172c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800172e:	06d2      	lsls	r2, r2, #27
 8001730:	430a      	orrs	r2, r1
 8001732:	4943      	ldr	r1, [pc, #268]	@ (8001840 <HAL_RCC_OscConfig+0x618>)
 8001734:	4313      	orrs	r3, r2
 8001736:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001738:	4b41      	ldr	r3, [pc, #260]	@ (8001840 <HAL_RCC_OscConfig+0x618>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a40      	ldr	r2, [pc, #256]	@ (8001840 <HAL_RCC_OscConfig+0x618>)
 800173e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001742:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001744:	4b3e      	ldr	r3, [pc, #248]	@ (8001840 <HAL_RCC_OscConfig+0x618>)
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	4a3d      	ldr	r2, [pc, #244]	@ (8001840 <HAL_RCC_OscConfig+0x618>)
 800174a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800174e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001750:	f7ff fa0a 	bl	8000b68 <HAL_GetTick>
 8001754:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001756:	e008      	b.n	800176a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001758:	f7ff fa06 	bl	8000b68 <HAL_GetTick>
 800175c:	4602      	mov	r2, r0
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	2b02      	cmp	r3, #2
 8001764:	d901      	bls.n	800176a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001766:	2303      	movs	r3, #3
 8001768:	e066      	b.n	8001838 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800176a:	4b35      	ldr	r3, [pc, #212]	@ (8001840 <HAL_RCC_OscConfig+0x618>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001772:	2b00      	cmp	r3, #0
 8001774:	d0f0      	beq.n	8001758 <HAL_RCC_OscConfig+0x530>
 8001776:	e05e      	b.n	8001836 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001778:	4b31      	ldr	r3, [pc, #196]	@ (8001840 <HAL_RCC_OscConfig+0x618>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a30      	ldr	r2, [pc, #192]	@ (8001840 <HAL_RCC_OscConfig+0x618>)
 800177e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001782:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001784:	f7ff f9f0 	bl	8000b68 <HAL_GetTick>
 8001788:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800178a:	e008      	b.n	800179e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800178c:	f7ff f9ec 	bl	8000b68 <HAL_GetTick>
 8001790:	4602      	mov	r2, r0
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	2b02      	cmp	r3, #2
 8001798:	d901      	bls.n	800179e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800179a:	2303      	movs	r3, #3
 800179c:	e04c      	b.n	8001838 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800179e:	4b28      	ldr	r3, [pc, #160]	@ (8001840 <HAL_RCC_OscConfig+0x618>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d1f0      	bne.n	800178c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80017aa:	4b25      	ldr	r3, [pc, #148]	@ (8001840 <HAL_RCC_OscConfig+0x618>)
 80017ac:	68da      	ldr	r2, [r3, #12]
 80017ae:	4924      	ldr	r1, [pc, #144]	@ (8001840 <HAL_RCC_OscConfig+0x618>)
 80017b0:	4b25      	ldr	r3, [pc, #148]	@ (8001848 <HAL_RCC_OscConfig+0x620>)
 80017b2:	4013      	ands	r3, r2
 80017b4:	60cb      	str	r3, [r1, #12]
 80017b6:	e03e      	b.n	8001836 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	69db      	ldr	r3, [r3, #28]
 80017bc:	2b01      	cmp	r3, #1
 80017be:	d101      	bne.n	80017c4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80017c0:	2301      	movs	r3, #1
 80017c2:	e039      	b.n	8001838 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80017c4:	4b1e      	ldr	r3, [pc, #120]	@ (8001840 <HAL_RCC_OscConfig+0x618>)
 80017c6:	68db      	ldr	r3, [r3, #12]
 80017c8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	f003 0203 	and.w	r2, r3, #3
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6a1b      	ldr	r3, [r3, #32]
 80017d4:	429a      	cmp	r2, r3
 80017d6:	d12c      	bne.n	8001832 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017e2:	3b01      	subs	r3, #1
 80017e4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017e6:	429a      	cmp	r2, r3
 80017e8:	d123      	bne.n	8001832 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017f4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80017f6:	429a      	cmp	r2, r3
 80017f8:	d11b      	bne.n	8001832 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001804:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001806:	429a      	cmp	r2, r3
 8001808:	d113      	bne.n	8001832 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001814:	085b      	lsrs	r3, r3, #1
 8001816:	3b01      	subs	r3, #1
 8001818:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800181a:	429a      	cmp	r2, r3
 800181c:	d109      	bne.n	8001832 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001828:	085b      	lsrs	r3, r3, #1
 800182a:	3b01      	subs	r3, #1
 800182c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800182e:	429a      	cmp	r2, r3
 8001830:	d001      	beq.n	8001836 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001832:	2301      	movs	r3, #1
 8001834:	e000      	b.n	8001838 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8001836:	2300      	movs	r3, #0
}
 8001838:	4618      	mov	r0, r3
 800183a:	3720      	adds	r7, #32
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	40021000 	.word	0x40021000
 8001844:	019f800c 	.word	0x019f800c
 8001848:	feeefffc 	.word	0xfeeefffc

0800184c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b086      	sub	sp, #24
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
 8001854:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001856:	2300      	movs	r3, #0
 8001858:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d101      	bne.n	8001864 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001860:	2301      	movs	r3, #1
 8001862:	e11e      	b.n	8001aa2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001864:	4b91      	ldr	r3, [pc, #580]	@ (8001aac <HAL_RCC_ClockConfig+0x260>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f003 030f 	and.w	r3, r3, #15
 800186c:	683a      	ldr	r2, [r7, #0]
 800186e:	429a      	cmp	r2, r3
 8001870:	d910      	bls.n	8001894 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001872:	4b8e      	ldr	r3, [pc, #568]	@ (8001aac <HAL_RCC_ClockConfig+0x260>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f023 020f 	bic.w	r2, r3, #15
 800187a:	498c      	ldr	r1, [pc, #560]	@ (8001aac <HAL_RCC_ClockConfig+0x260>)
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	4313      	orrs	r3, r2
 8001880:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001882:	4b8a      	ldr	r3, [pc, #552]	@ (8001aac <HAL_RCC_ClockConfig+0x260>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 030f 	and.w	r3, r3, #15
 800188a:	683a      	ldr	r2, [r7, #0]
 800188c:	429a      	cmp	r2, r3
 800188e:	d001      	beq.n	8001894 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001890:	2301      	movs	r3, #1
 8001892:	e106      	b.n	8001aa2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f003 0301 	and.w	r3, r3, #1
 800189c:	2b00      	cmp	r3, #0
 800189e:	d073      	beq.n	8001988 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	2b03      	cmp	r3, #3
 80018a6:	d129      	bne.n	80018fc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018a8:	4b81      	ldr	r3, [pc, #516]	@ (8001ab0 <HAL_RCC_ClockConfig+0x264>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d101      	bne.n	80018b8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80018b4:	2301      	movs	r3, #1
 80018b6:	e0f4      	b.n	8001aa2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80018b8:	f000 f966 	bl	8001b88 <RCC_GetSysClockFreqFromPLLSource>
 80018bc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	4a7c      	ldr	r2, [pc, #496]	@ (8001ab4 <HAL_RCC_ClockConfig+0x268>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d93f      	bls.n	8001946 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80018c6:	4b7a      	ldr	r3, [pc, #488]	@ (8001ab0 <HAL_RCC_ClockConfig+0x264>)
 80018c8:	689b      	ldr	r3, [r3, #8]
 80018ca:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d009      	beq.n	80018e6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d033      	beq.n	8001946 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d12f      	bne.n	8001946 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80018e6:	4b72      	ldr	r3, [pc, #456]	@ (8001ab0 <HAL_RCC_ClockConfig+0x264>)
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80018ee:	4a70      	ldr	r2, [pc, #448]	@ (8001ab0 <HAL_RCC_ClockConfig+0x264>)
 80018f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80018f4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80018f6:	2380      	movs	r3, #128	@ 0x80
 80018f8:	617b      	str	r3, [r7, #20]
 80018fa:	e024      	b.n	8001946 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	2b02      	cmp	r3, #2
 8001902:	d107      	bne.n	8001914 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001904:	4b6a      	ldr	r3, [pc, #424]	@ (8001ab0 <HAL_RCC_ClockConfig+0x264>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800190c:	2b00      	cmp	r3, #0
 800190e:	d109      	bne.n	8001924 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001910:	2301      	movs	r3, #1
 8001912:	e0c6      	b.n	8001aa2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001914:	4b66      	ldr	r3, [pc, #408]	@ (8001ab0 <HAL_RCC_ClockConfig+0x264>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800191c:	2b00      	cmp	r3, #0
 800191e:	d101      	bne.n	8001924 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	e0be      	b.n	8001aa2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001924:	f000 f8ce 	bl	8001ac4 <HAL_RCC_GetSysClockFreq>
 8001928:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	4a61      	ldr	r2, [pc, #388]	@ (8001ab4 <HAL_RCC_ClockConfig+0x268>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d909      	bls.n	8001946 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001932:	4b5f      	ldr	r3, [pc, #380]	@ (8001ab0 <HAL_RCC_ClockConfig+0x264>)
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800193a:	4a5d      	ldr	r2, [pc, #372]	@ (8001ab0 <HAL_RCC_ClockConfig+0x264>)
 800193c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001940:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001942:	2380      	movs	r3, #128	@ 0x80
 8001944:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001946:	4b5a      	ldr	r3, [pc, #360]	@ (8001ab0 <HAL_RCC_ClockConfig+0x264>)
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	f023 0203 	bic.w	r2, r3, #3
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	4957      	ldr	r1, [pc, #348]	@ (8001ab0 <HAL_RCC_ClockConfig+0x264>)
 8001954:	4313      	orrs	r3, r2
 8001956:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001958:	f7ff f906 	bl	8000b68 <HAL_GetTick>
 800195c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800195e:	e00a      	b.n	8001976 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001960:	f7ff f902 	bl	8000b68 <HAL_GetTick>
 8001964:	4602      	mov	r2, r0
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800196e:	4293      	cmp	r3, r2
 8001970:	d901      	bls.n	8001976 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001972:	2303      	movs	r3, #3
 8001974:	e095      	b.n	8001aa2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001976:	4b4e      	ldr	r3, [pc, #312]	@ (8001ab0 <HAL_RCC_ClockConfig+0x264>)
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	f003 020c 	and.w	r2, r3, #12
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	429a      	cmp	r2, r3
 8001986:	d1eb      	bne.n	8001960 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f003 0302 	and.w	r3, r3, #2
 8001990:	2b00      	cmp	r3, #0
 8001992:	d023      	beq.n	80019dc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f003 0304 	and.w	r3, r3, #4
 800199c:	2b00      	cmp	r3, #0
 800199e:	d005      	beq.n	80019ac <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019a0:	4b43      	ldr	r3, [pc, #268]	@ (8001ab0 <HAL_RCC_ClockConfig+0x264>)
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	4a42      	ldr	r2, [pc, #264]	@ (8001ab0 <HAL_RCC_ClockConfig+0x264>)
 80019a6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80019aa:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f003 0308 	and.w	r3, r3, #8
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d007      	beq.n	80019c8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80019b8:	4b3d      	ldr	r3, [pc, #244]	@ (8001ab0 <HAL_RCC_ClockConfig+0x264>)
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80019c0:	4a3b      	ldr	r2, [pc, #236]	@ (8001ab0 <HAL_RCC_ClockConfig+0x264>)
 80019c2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80019c6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019c8:	4b39      	ldr	r3, [pc, #228]	@ (8001ab0 <HAL_RCC_ClockConfig+0x264>)
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	4936      	ldr	r1, [pc, #216]	@ (8001ab0 <HAL_RCC_ClockConfig+0x264>)
 80019d6:	4313      	orrs	r3, r2
 80019d8:	608b      	str	r3, [r1, #8]
 80019da:	e008      	b.n	80019ee <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	2b80      	cmp	r3, #128	@ 0x80
 80019e0:	d105      	bne.n	80019ee <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80019e2:	4b33      	ldr	r3, [pc, #204]	@ (8001ab0 <HAL_RCC_ClockConfig+0x264>)
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	4a32      	ldr	r2, [pc, #200]	@ (8001ab0 <HAL_RCC_ClockConfig+0x264>)
 80019e8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80019ec:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80019ee:	4b2f      	ldr	r3, [pc, #188]	@ (8001aac <HAL_RCC_ClockConfig+0x260>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 030f 	and.w	r3, r3, #15
 80019f6:	683a      	ldr	r2, [r7, #0]
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d21d      	bcs.n	8001a38 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019fc:	4b2b      	ldr	r3, [pc, #172]	@ (8001aac <HAL_RCC_ClockConfig+0x260>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f023 020f 	bic.w	r2, r3, #15
 8001a04:	4929      	ldr	r1, [pc, #164]	@ (8001aac <HAL_RCC_ClockConfig+0x260>)
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001a0c:	f7ff f8ac 	bl	8000b68 <HAL_GetTick>
 8001a10:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a12:	e00a      	b.n	8001a2a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a14:	f7ff f8a8 	bl	8000b68 <HAL_GetTick>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d901      	bls.n	8001a2a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001a26:	2303      	movs	r3, #3
 8001a28:	e03b      	b.n	8001aa2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a2a:	4b20      	ldr	r3, [pc, #128]	@ (8001aac <HAL_RCC_ClockConfig+0x260>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 030f 	and.w	r3, r3, #15
 8001a32:	683a      	ldr	r2, [r7, #0]
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d1ed      	bne.n	8001a14 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f003 0304 	and.w	r3, r3, #4
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d008      	beq.n	8001a56 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a44:	4b1a      	ldr	r3, [pc, #104]	@ (8001ab0 <HAL_RCC_ClockConfig+0x264>)
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	68db      	ldr	r3, [r3, #12]
 8001a50:	4917      	ldr	r1, [pc, #92]	@ (8001ab0 <HAL_RCC_ClockConfig+0x264>)
 8001a52:	4313      	orrs	r3, r2
 8001a54:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0308 	and.w	r3, r3, #8
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d009      	beq.n	8001a76 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a62:	4b13      	ldr	r3, [pc, #76]	@ (8001ab0 <HAL_RCC_ClockConfig+0x264>)
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	691b      	ldr	r3, [r3, #16]
 8001a6e:	00db      	lsls	r3, r3, #3
 8001a70:	490f      	ldr	r1, [pc, #60]	@ (8001ab0 <HAL_RCC_ClockConfig+0x264>)
 8001a72:	4313      	orrs	r3, r2
 8001a74:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001a76:	f000 f825 	bl	8001ac4 <HAL_RCC_GetSysClockFreq>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	4b0c      	ldr	r3, [pc, #48]	@ (8001ab0 <HAL_RCC_ClockConfig+0x264>)
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	091b      	lsrs	r3, r3, #4
 8001a82:	f003 030f 	and.w	r3, r3, #15
 8001a86:	490c      	ldr	r1, [pc, #48]	@ (8001ab8 <HAL_RCC_ClockConfig+0x26c>)
 8001a88:	5ccb      	ldrb	r3, [r1, r3]
 8001a8a:	f003 031f 	and.w	r3, r3, #31
 8001a8e:	fa22 f303 	lsr.w	r3, r2, r3
 8001a92:	4a0a      	ldr	r2, [pc, #40]	@ (8001abc <HAL_RCC_ClockConfig+0x270>)
 8001a94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001a96:	4b0a      	ldr	r3, [pc, #40]	@ (8001ac0 <HAL_RCC_ClockConfig+0x274>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f7ff f818 	bl	8000ad0 <HAL_InitTick>
 8001aa0:	4603      	mov	r3, r0
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3718      	adds	r7, #24
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	40022000 	.word	0x40022000
 8001ab0:	40021000 	.word	0x40021000
 8001ab4:	04c4b400 	.word	0x04c4b400
 8001ab8:	080023bc 	.word	0x080023bc
 8001abc:	20000000 	.word	0x20000000
 8001ac0:	20000004 	.word	0x20000004

08001ac4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b087      	sub	sp, #28
 8001ac8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001aca:	4b2c      	ldr	r3, [pc, #176]	@ (8001b7c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	f003 030c 	and.w	r3, r3, #12
 8001ad2:	2b04      	cmp	r3, #4
 8001ad4:	d102      	bne.n	8001adc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001ad6:	4b2a      	ldr	r3, [pc, #168]	@ (8001b80 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001ad8:	613b      	str	r3, [r7, #16]
 8001ada:	e047      	b.n	8001b6c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001adc:	4b27      	ldr	r3, [pc, #156]	@ (8001b7c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	f003 030c 	and.w	r3, r3, #12
 8001ae4:	2b08      	cmp	r3, #8
 8001ae6:	d102      	bne.n	8001aee <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001ae8:	4b26      	ldr	r3, [pc, #152]	@ (8001b84 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001aea:	613b      	str	r3, [r7, #16]
 8001aec:	e03e      	b.n	8001b6c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001aee:	4b23      	ldr	r3, [pc, #140]	@ (8001b7c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	f003 030c 	and.w	r3, r3, #12
 8001af6:	2b0c      	cmp	r3, #12
 8001af8:	d136      	bne.n	8001b68 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001afa:	4b20      	ldr	r3, [pc, #128]	@ (8001b7c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001afc:	68db      	ldr	r3, [r3, #12]
 8001afe:	f003 0303 	and.w	r3, r3, #3
 8001b02:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001b04:	4b1d      	ldr	r3, [pc, #116]	@ (8001b7c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b06:	68db      	ldr	r3, [r3, #12]
 8001b08:	091b      	lsrs	r3, r3, #4
 8001b0a:	f003 030f 	and.w	r3, r3, #15
 8001b0e:	3301      	adds	r3, #1
 8001b10:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	2b03      	cmp	r3, #3
 8001b16:	d10c      	bne.n	8001b32 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001b18:	4a1a      	ldr	r2, [pc, #104]	@ (8001b84 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001b1a:	68bb      	ldr	r3, [r7, #8]
 8001b1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b20:	4a16      	ldr	r2, [pc, #88]	@ (8001b7c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b22:	68d2      	ldr	r2, [r2, #12]
 8001b24:	0a12      	lsrs	r2, r2, #8
 8001b26:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001b2a:	fb02 f303 	mul.w	r3, r2, r3
 8001b2e:	617b      	str	r3, [r7, #20]
      break;
 8001b30:	e00c      	b.n	8001b4c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001b32:	4a13      	ldr	r2, [pc, #76]	@ (8001b80 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b3a:	4a10      	ldr	r2, [pc, #64]	@ (8001b7c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b3c:	68d2      	ldr	r2, [r2, #12]
 8001b3e:	0a12      	lsrs	r2, r2, #8
 8001b40:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001b44:	fb02 f303 	mul.w	r3, r2, r3
 8001b48:	617b      	str	r3, [r7, #20]
      break;
 8001b4a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001b4c:	4b0b      	ldr	r3, [pc, #44]	@ (8001b7c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	0e5b      	lsrs	r3, r3, #25
 8001b52:	f003 0303 	and.w	r3, r3, #3
 8001b56:	3301      	adds	r3, #1
 8001b58:	005b      	lsls	r3, r3, #1
 8001b5a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001b5c:	697a      	ldr	r2, [r7, #20]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b64:	613b      	str	r3, [r7, #16]
 8001b66:	e001      	b.n	8001b6c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001b6c:	693b      	ldr	r3, [r7, #16]
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	371c      	adds	r7, #28
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr
 8001b7a:	bf00      	nop
 8001b7c:	40021000 	.word	0x40021000
 8001b80:	00f42400 	.word	0x00f42400
 8001b84:	007a1200 	.word	0x007a1200

08001b88 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b087      	sub	sp, #28
 8001b8c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001b8e:	4b1e      	ldr	r3, [pc, #120]	@ (8001c08 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001b90:	68db      	ldr	r3, [r3, #12]
 8001b92:	f003 0303 	and.w	r3, r3, #3
 8001b96:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001b98:	4b1b      	ldr	r3, [pc, #108]	@ (8001c08 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001b9a:	68db      	ldr	r3, [r3, #12]
 8001b9c:	091b      	lsrs	r3, r3, #4
 8001b9e:	f003 030f 	and.w	r3, r3, #15
 8001ba2:	3301      	adds	r3, #1
 8001ba4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	2b03      	cmp	r3, #3
 8001baa:	d10c      	bne.n	8001bc6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001bac:	4a17      	ldr	r2, [pc, #92]	@ (8001c0c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bb4:	4a14      	ldr	r2, [pc, #80]	@ (8001c08 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001bb6:	68d2      	ldr	r2, [r2, #12]
 8001bb8:	0a12      	lsrs	r2, r2, #8
 8001bba:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001bbe:	fb02 f303 	mul.w	r3, r2, r3
 8001bc2:	617b      	str	r3, [r7, #20]
    break;
 8001bc4:	e00c      	b.n	8001be0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001bc6:	4a12      	ldr	r2, [pc, #72]	@ (8001c10 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bce:	4a0e      	ldr	r2, [pc, #56]	@ (8001c08 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001bd0:	68d2      	ldr	r2, [r2, #12]
 8001bd2:	0a12      	lsrs	r2, r2, #8
 8001bd4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001bd8:	fb02 f303 	mul.w	r3, r2, r3
 8001bdc:	617b      	str	r3, [r7, #20]
    break;
 8001bde:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001be0:	4b09      	ldr	r3, [pc, #36]	@ (8001c08 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	0e5b      	lsrs	r3, r3, #25
 8001be6:	f003 0303 	and.w	r3, r3, #3
 8001bea:	3301      	adds	r3, #1
 8001bec:	005b      	lsls	r3, r3, #1
 8001bee:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001bf0:	697a      	ldr	r2, [r7, #20]
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bf8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001bfa:	687b      	ldr	r3, [r7, #4]
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	371c      	adds	r7, #28
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr
 8001c08:	40021000 	.word	0x40021000
 8001c0c:	007a1200 	.word	0x007a1200
 8001c10:	00f42400 	.word	0x00f42400

08001c14 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b084      	sub	sp, #16
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d101      	bne.n	8001c26 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	e09d      	b.n	8001d62 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d108      	bne.n	8001c40 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001c36:	d009      	beq.n	8001c4c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	61da      	str	r2, [r3, #28]
 8001c3e:	e005      	b.n	8001c4c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2200      	movs	r2, #0
 8001c44:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2200      	movs	r2, #0
 8001c50:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d106      	bne.n	8001c6c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2200      	movs	r2, #0
 8001c62:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001c66:	6878      	ldr	r0, [r7, #4]
 8001c68:	f7fe fbbe 	bl	80003e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2202      	movs	r2, #2
 8001c70:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001c82:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8001c8c:	d902      	bls.n	8001c94 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	60fb      	str	r3, [r7, #12]
 8001c92:	e002      	b.n	8001c9a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001c94:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c98:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	68db      	ldr	r3, [r3, #12]
 8001c9e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8001ca2:	d007      	beq.n	8001cb4 <HAL_SPI_Init+0xa0>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8001cac:	d002      	beq.n	8001cb4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8001cc4:	431a      	orrs	r2, r3
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	691b      	ldr	r3, [r3, #16]
 8001cca:	f003 0302 	and.w	r3, r3, #2
 8001cce:	431a      	orrs	r2, r3
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	695b      	ldr	r3, [r3, #20]
 8001cd4:	f003 0301 	and.w	r3, r3, #1
 8001cd8:	431a      	orrs	r2, r3
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	699b      	ldr	r3, [r3, #24]
 8001cde:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001ce2:	431a      	orrs	r2, r3
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	69db      	ldr	r3, [r3, #28]
 8001ce8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001cec:	431a      	orrs	r2, r3
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6a1b      	ldr	r3, [r3, #32]
 8001cf2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001cf6:	ea42 0103 	orr.w	r1, r2, r3
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cfe:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	430a      	orrs	r2, r1
 8001d08:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	699b      	ldr	r3, [r3, #24]
 8001d0e:	0c1b      	lsrs	r3, r3, #16
 8001d10:	f003 0204 	and.w	r2, r3, #4
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d18:	f003 0310 	and.w	r3, r3, #16
 8001d1c:	431a      	orrs	r2, r3
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d22:	f003 0308 	and.w	r3, r3, #8
 8001d26:	431a      	orrs	r2, r3
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	68db      	ldr	r3, [r3, #12]
 8001d2c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8001d30:	ea42 0103 	orr.w	r1, r2, r3
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	430a      	orrs	r2, r1
 8001d40:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	69da      	ldr	r2, [r3, #28]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001d50:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2200      	movs	r2, #0
 8001d56:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8001d60:	2300      	movs	r3, #0
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3710      	adds	r7, #16
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}

08001d6a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d6a:	b580      	push	{r7, lr}
 8001d6c:	b088      	sub	sp, #32
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	60f8      	str	r0, [r7, #12]
 8001d72:	60b9      	str	r1, [r7, #8]
 8001d74:	603b      	str	r3, [r7, #0]
 8001d76:	4613      	mov	r3, r2
 8001d78:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001d7a:	f7fe fef5 	bl	8000b68 <HAL_GetTick>
 8001d7e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8001d80:	88fb      	ldrh	r3, [r7, #6]
 8001d82:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8001d8a:	b2db      	uxtb	r3, r3
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d001      	beq.n	8001d94 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8001d90:	2302      	movs	r3, #2
 8001d92:	e15c      	b.n	800204e <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d002      	beq.n	8001da0 <HAL_SPI_Transmit+0x36>
 8001d9a:	88fb      	ldrh	r3, [r7, #6]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d101      	bne.n	8001da4 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8001da0:	2301      	movs	r3, #1
 8001da2:	e154      	b.n	800204e <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001daa:	2b01      	cmp	r3, #1
 8001dac:	d101      	bne.n	8001db2 <HAL_SPI_Transmit+0x48>
 8001dae:	2302      	movs	r3, #2
 8001db0:	e14d      	b.n	800204e <HAL_SPI_Transmit+0x2e4>
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	2201      	movs	r2, #1
 8001db6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	2203      	movs	r2, #3
 8001dbe:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	68ba      	ldr	r2, [r7, #8]
 8001dcc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	88fa      	ldrh	r2, [r7, #6]
 8001dd2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	88fa      	ldrh	r2, [r7, #6]
 8001dd8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	2200      	movs	r2, #0
 8001de4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	2200      	movs	r2, #0
 8001dec:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	2200      	movs	r2, #0
 8001df4:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001e04:	d10f      	bne.n	8001e26 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001e14:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001e24:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e30:	2b40      	cmp	r3, #64	@ 0x40
 8001e32:	d007      	beq.n	8001e44 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001e42:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	68db      	ldr	r3, [r3, #12]
 8001e48:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8001e4c:	d952      	bls.n	8001ef4 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d002      	beq.n	8001e5c <HAL_SPI_Transmit+0xf2>
 8001e56:	8b7b      	ldrh	r3, [r7, #26]
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d145      	bne.n	8001ee8 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e60:	881a      	ldrh	r2, [r3, #0]
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e6c:	1c9a      	adds	r2, r3, #2
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001e76:	b29b      	uxth	r3, r3
 8001e78:	3b01      	subs	r3, #1
 8001e7a:	b29a      	uxth	r2, r3
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001e80:	e032      	b.n	8001ee8 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	f003 0302 	and.w	r3, r3, #2
 8001e8c:	2b02      	cmp	r3, #2
 8001e8e:	d112      	bne.n	8001eb6 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e94:	881a      	ldrh	r2, [r3, #0]
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ea0:	1c9a      	adds	r2, r3, #2
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001eaa:	b29b      	uxth	r3, r3
 8001eac:	3b01      	subs	r3, #1
 8001eae:	b29a      	uxth	r2, r3
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8001eb4:	e018      	b.n	8001ee8 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001eb6:	f7fe fe57 	bl	8000b68 <HAL_GetTick>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	69fb      	ldr	r3, [r7, #28]
 8001ebe:	1ad3      	subs	r3, r2, r3
 8001ec0:	683a      	ldr	r2, [r7, #0]
 8001ec2:	429a      	cmp	r2, r3
 8001ec4:	d803      	bhi.n	8001ece <HAL_SPI_Transmit+0x164>
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ecc:	d102      	bne.n	8001ed4 <HAL_SPI_Transmit+0x16a>
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d109      	bne.n	8001ee8 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8001ee4:	2303      	movs	r3, #3
 8001ee6:	e0b2      	b.n	800204e <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001eec:	b29b      	uxth	r3, r3
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d1c7      	bne.n	8001e82 <HAL_SPI_Transmit+0x118>
 8001ef2:	e083      	b.n	8001ffc <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d002      	beq.n	8001f02 <HAL_SPI_Transmit+0x198>
 8001efc:	8b7b      	ldrh	r3, [r7, #26]
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	d177      	bne.n	8001ff2 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001f06:	b29b      	uxth	r3, r3
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d912      	bls.n	8001f32 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f10:	881a      	ldrh	r2, [r3, #0]
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f1c:	1c9a      	adds	r2, r3, #2
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001f26:	b29b      	uxth	r3, r3
 8001f28:	3b02      	subs	r3, #2
 8001f2a:	b29a      	uxth	r2, r3
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8001f30:	e05f      	b.n	8001ff2 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	330c      	adds	r3, #12
 8001f3c:	7812      	ldrb	r2, [r2, #0]
 8001f3e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f44:	1c5a      	adds	r2, r3, #1
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001f4e:	b29b      	uxth	r3, r3
 8001f50:	3b01      	subs	r3, #1
 8001f52:	b29a      	uxth	r2, r3
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8001f58:	e04b      	b.n	8001ff2 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	f003 0302 	and.w	r3, r3, #2
 8001f64:	2b02      	cmp	r3, #2
 8001f66:	d12b      	bne.n	8001fc0 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001f6c:	b29b      	uxth	r3, r3
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d912      	bls.n	8001f98 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f76:	881a      	ldrh	r2, [r3, #0]
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f82:	1c9a      	adds	r2, r3, #2
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001f8c:	b29b      	uxth	r3, r3
 8001f8e:	3b02      	subs	r3, #2
 8001f90:	b29a      	uxth	r2, r3
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8001f96:	e02c      	b.n	8001ff2 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	330c      	adds	r3, #12
 8001fa2:	7812      	ldrb	r2, [r2, #0]
 8001fa4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001faa:	1c5a      	adds	r2, r3, #1
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001fb4:	b29b      	uxth	r3, r3
 8001fb6:	3b01      	subs	r3, #1
 8001fb8:	b29a      	uxth	r2, r3
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8001fbe:	e018      	b.n	8001ff2 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001fc0:	f7fe fdd2 	bl	8000b68 <HAL_GetTick>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	683a      	ldr	r2, [r7, #0]
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d803      	bhi.n	8001fd8 <HAL_SPI_Transmit+0x26e>
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fd6:	d102      	bne.n	8001fde <HAL_SPI_Transmit+0x274>
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d109      	bne.n	8001ff2 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8001fee:	2303      	movs	r3, #3
 8001ff0:	e02d      	b.n	800204e <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001ff6:	b29b      	uxth	r3, r3
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d1ae      	bne.n	8001f5a <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001ffc:	69fa      	ldr	r2, [r7, #28]
 8001ffe:	6839      	ldr	r1, [r7, #0]
 8002000:	68f8      	ldr	r0, [r7, #12]
 8002002:	f000 f947 	bl	8002294 <SPI_EndRxTxTransaction>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d002      	beq.n	8002012 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	2220      	movs	r2, #32
 8002010:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d10a      	bne.n	8002030 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800201a:	2300      	movs	r3, #0
 800201c:	617b      	str	r3, [r7, #20]
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	617b      	str	r3, [r7, #20]
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	617b      	str	r3, [r7, #20]
 800202e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	2201      	movs	r2, #1
 8002034:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	2200      	movs	r2, #0
 800203c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002044:	2b00      	cmp	r3, #0
 8002046:	d001      	beq.n	800204c <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	e000      	b.n	800204e <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 800204c:	2300      	movs	r3, #0
  }
}
 800204e:	4618      	mov	r0, r3
 8002050:	3720      	adds	r7, #32
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
	...

08002058 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b088      	sub	sp, #32
 800205c:	af00      	add	r7, sp, #0
 800205e:	60f8      	str	r0, [r7, #12]
 8002060:	60b9      	str	r1, [r7, #8]
 8002062:	603b      	str	r3, [r7, #0]
 8002064:	4613      	mov	r3, r2
 8002066:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002068:	f7fe fd7e 	bl	8000b68 <HAL_GetTick>
 800206c:	4602      	mov	r2, r0
 800206e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002070:	1a9b      	subs	r3, r3, r2
 8002072:	683a      	ldr	r2, [r7, #0]
 8002074:	4413      	add	r3, r2
 8002076:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002078:	f7fe fd76 	bl	8000b68 <HAL_GetTick>
 800207c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800207e:	4b39      	ldr	r3, [pc, #228]	@ (8002164 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	015b      	lsls	r3, r3, #5
 8002084:	0d1b      	lsrs	r3, r3, #20
 8002086:	69fa      	ldr	r2, [r7, #28]
 8002088:	fb02 f303 	mul.w	r3, r2, r3
 800208c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800208e:	e054      	b.n	800213a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002096:	d050      	beq.n	800213a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002098:	f7fe fd66 	bl	8000b68 <HAL_GetTick>
 800209c:	4602      	mov	r2, r0
 800209e:	69bb      	ldr	r3, [r7, #24]
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	69fa      	ldr	r2, [r7, #28]
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d902      	bls.n	80020ae <SPI_WaitFlagStateUntilTimeout+0x56>
 80020a8:	69fb      	ldr	r3, [r7, #28]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d13d      	bne.n	800212a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	685a      	ldr	r2, [r3, #4]
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80020bc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80020c6:	d111      	bne.n	80020ec <SPI_WaitFlagStateUntilTimeout+0x94>
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80020d0:	d004      	beq.n	80020dc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80020da:	d107      	bne.n	80020ec <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80020ea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80020f4:	d10f      	bne.n	8002116 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002104:	601a      	str	r2, [r3, #0]
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002114:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	2201      	movs	r2, #1
 800211a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	2200      	movs	r2, #0
 8002122:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8002126:	2303      	movs	r3, #3
 8002128:	e017      	b.n	800215a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d101      	bne.n	8002134 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002130:	2300      	movs	r3, #0
 8002132:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	3b01      	subs	r3, #1
 8002138:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	689a      	ldr	r2, [r3, #8]
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	4013      	ands	r3, r2
 8002144:	68ba      	ldr	r2, [r7, #8]
 8002146:	429a      	cmp	r2, r3
 8002148:	bf0c      	ite	eq
 800214a:	2301      	moveq	r3, #1
 800214c:	2300      	movne	r3, #0
 800214e:	b2db      	uxtb	r3, r3
 8002150:	461a      	mov	r2, r3
 8002152:	79fb      	ldrb	r3, [r7, #7]
 8002154:	429a      	cmp	r2, r3
 8002156:	d19b      	bne.n	8002090 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002158:	2300      	movs	r3, #0
}
 800215a:	4618      	mov	r0, r3
 800215c:	3720      	adds	r7, #32
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	20000000 	.word	0x20000000

08002168 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b08a      	sub	sp, #40	@ 0x28
 800216c:	af00      	add	r7, sp, #0
 800216e:	60f8      	str	r0, [r7, #12]
 8002170:	60b9      	str	r1, [r7, #8]
 8002172:	607a      	str	r2, [r7, #4]
 8002174:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002176:	2300      	movs	r3, #0
 8002178:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800217a:	f7fe fcf5 	bl	8000b68 <HAL_GetTick>
 800217e:	4602      	mov	r2, r0
 8002180:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002182:	1a9b      	subs	r3, r3, r2
 8002184:	683a      	ldr	r2, [r7, #0]
 8002186:	4413      	add	r3, r2
 8002188:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800218a:	f7fe fced 	bl	8000b68 <HAL_GetTick>
 800218e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	330c      	adds	r3, #12
 8002196:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002198:	4b3d      	ldr	r3, [pc, #244]	@ (8002290 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	4613      	mov	r3, r2
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	4413      	add	r3, r2
 80021a2:	00da      	lsls	r2, r3, #3
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	0d1b      	lsrs	r3, r3, #20
 80021a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021aa:	fb02 f303 	mul.w	r3, r2, r3
 80021ae:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80021b0:	e060      	b.n	8002274 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80021b8:	d107      	bne.n	80021ca <SPI_WaitFifoStateUntilTimeout+0x62>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d104      	bne.n	80021ca <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80021c0:	69fb      	ldr	r3, [r7, #28]
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80021c8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021d0:	d050      	beq.n	8002274 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80021d2:	f7fe fcc9 	bl	8000b68 <HAL_GetTick>
 80021d6:	4602      	mov	r2, r0
 80021d8:	6a3b      	ldr	r3, [r7, #32]
 80021da:	1ad3      	subs	r3, r2, r3
 80021dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021de:	429a      	cmp	r2, r3
 80021e0:	d902      	bls.n	80021e8 <SPI_WaitFifoStateUntilTimeout+0x80>
 80021e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d13d      	bne.n	8002264 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	685a      	ldr	r2, [r3, #4]
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80021f6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002200:	d111      	bne.n	8002226 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800220a:	d004      	beq.n	8002216 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002214:	d107      	bne.n	8002226 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002224:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800222a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800222e:	d10f      	bne.n	8002250 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800223e:	601a      	str	r2, [r3, #0]
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800224e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	2201      	movs	r2, #1
 8002254:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	2200      	movs	r2, #0
 800225c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8002260:	2303      	movs	r3, #3
 8002262:	e010      	b.n	8002286 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002264:	69bb      	ldr	r3, [r7, #24]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d101      	bne.n	800226e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800226a:	2300      	movs	r3, #0
 800226c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800226e:	69bb      	ldr	r3, [r7, #24]
 8002270:	3b01      	subs	r3, #1
 8002272:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	689a      	ldr	r2, [r3, #8]
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	4013      	ands	r3, r2
 800227e:	687a      	ldr	r2, [r7, #4]
 8002280:	429a      	cmp	r2, r3
 8002282:	d196      	bne.n	80021b2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8002284:	2300      	movs	r3, #0
}
 8002286:	4618      	mov	r0, r3
 8002288:	3728      	adds	r7, #40	@ 0x28
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	20000000 	.word	0x20000000

08002294 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b086      	sub	sp, #24
 8002298:	af02      	add	r7, sp, #8
 800229a:	60f8      	str	r0, [r7, #12]
 800229c:	60b9      	str	r1, [r7, #8]
 800229e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	9300      	str	r3, [sp, #0]
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	2200      	movs	r2, #0
 80022a8:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80022ac:	68f8      	ldr	r0, [r7, #12]
 80022ae:	f7ff ff5b 	bl	8002168 <SPI_WaitFifoStateUntilTimeout>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d007      	beq.n	80022c8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022bc:	f043 0220 	orr.w	r2, r3, #32
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80022c4:	2303      	movs	r3, #3
 80022c6:	e027      	b.n	8002318 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	9300      	str	r3, [sp, #0]
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	2200      	movs	r2, #0
 80022d0:	2180      	movs	r1, #128	@ 0x80
 80022d2:	68f8      	ldr	r0, [r7, #12]
 80022d4:	f7ff fec0 	bl	8002058 <SPI_WaitFlagStateUntilTimeout>
 80022d8:	4603      	mov	r3, r0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d007      	beq.n	80022ee <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022e2:	f043 0220 	orr.w	r2, r3, #32
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80022ea:	2303      	movs	r3, #3
 80022ec:	e014      	b.n	8002318 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	9300      	str	r3, [sp, #0]
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	2200      	movs	r2, #0
 80022f6:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80022fa:	68f8      	ldr	r0, [r7, #12]
 80022fc:	f7ff ff34 	bl	8002168 <SPI_WaitFifoStateUntilTimeout>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d007      	beq.n	8002316 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800230a:	f043 0220 	orr.w	r2, r3, #32
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002312:	2303      	movs	r3, #3
 8002314:	e000      	b.n	8002318 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002316:	2300      	movs	r3, #0
}
 8002318:	4618      	mov	r0, r3
 800231a:	3710      	adds	r7, #16
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}

08002320 <memset>:
 8002320:	4402      	add	r2, r0
 8002322:	4603      	mov	r3, r0
 8002324:	4293      	cmp	r3, r2
 8002326:	d100      	bne.n	800232a <memset+0xa>
 8002328:	4770      	bx	lr
 800232a:	f803 1b01 	strb.w	r1, [r3], #1
 800232e:	e7f9      	b.n	8002324 <memset+0x4>

08002330 <__libc_init_array>:
 8002330:	b570      	push	{r4, r5, r6, lr}
 8002332:	4d0d      	ldr	r5, [pc, #52]	@ (8002368 <__libc_init_array+0x38>)
 8002334:	4c0d      	ldr	r4, [pc, #52]	@ (800236c <__libc_init_array+0x3c>)
 8002336:	1b64      	subs	r4, r4, r5
 8002338:	10a4      	asrs	r4, r4, #2
 800233a:	2600      	movs	r6, #0
 800233c:	42a6      	cmp	r6, r4
 800233e:	d109      	bne.n	8002354 <__libc_init_array+0x24>
 8002340:	4d0b      	ldr	r5, [pc, #44]	@ (8002370 <__libc_init_array+0x40>)
 8002342:	4c0c      	ldr	r4, [pc, #48]	@ (8002374 <__libc_init_array+0x44>)
 8002344:	f000 f818 	bl	8002378 <_init>
 8002348:	1b64      	subs	r4, r4, r5
 800234a:	10a4      	asrs	r4, r4, #2
 800234c:	2600      	movs	r6, #0
 800234e:	42a6      	cmp	r6, r4
 8002350:	d105      	bne.n	800235e <__libc_init_array+0x2e>
 8002352:	bd70      	pop	{r4, r5, r6, pc}
 8002354:	f855 3b04 	ldr.w	r3, [r5], #4
 8002358:	4798      	blx	r3
 800235a:	3601      	adds	r6, #1
 800235c:	e7ee      	b.n	800233c <__libc_init_array+0xc>
 800235e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002362:	4798      	blx	r3
 8002364:	3601      	adds	r6, #1
 8002366:	e7f2      	b.n	800234e <__libc_init_array+0x1e>
 8002368:	080025a8 	.word	0x080025a8
 800236c:	080025a8 	.word	0x080025a8
 8002370:	080025a8 	.word	0x080025a8
 8002374:	080025ac 	.word	0x080025ac

08002378 <_init>:
 8002378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800237a:	bf00      	nop
 800237c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800237e:	bc08      	pop	{r3}
 8002380:	469e      	mov	lr, r3
 8002382:	4770      	bx	lr

08002384 <_fini>:
 8002384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002386:	bf00      	nop
 8002388:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800238a:	bc08      	pop	{r3}
 800238c:	469e      	mov	lr, r3
 800238e:	4770      	bx	lr
