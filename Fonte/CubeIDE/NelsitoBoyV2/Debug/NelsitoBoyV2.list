
NelsitoBoyV2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002290  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  08002468  08002468  00003468  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002578  08002578  0000404c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08002578  08002578  0000404c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08002578  08002578  0000404c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002578  08002578  00003578  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800257c  0800257c  0000357c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000004c  20000000  08002580  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000088  2000004c  080025cc  0000404c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000d4  080025cc  000040d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000404c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007dc6  00000000  00000000  0000407c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c12  00000000  00000000  0000be42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000898  00000000  00000000  0000da58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000653  00000000  00000000  0000e2f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c6f4  00000000  00000000  0000e943  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b0e8  00000000  00000000  0002b037  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b2b10  00000000  00000000  0003611f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e8c2f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002010  00000000  00000000  000e8c74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000eac84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000004c 	.word	0x2000004c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08002450 	.word	0x08002450

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000050 	.word	0x20000050
 8000214:	08002450 	.word	0x08002450

08000218 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b088      	sub	sp, #32
 800021c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800021e:	f107 030c 	add.w	r3, r7, #12
 8000222:	2200      	movs	r2, #0
 8000224:	601a      	str	r2, [r3, #0]
 8000226:	605a      	str	r2, [r3, #4]
 8000228:	609a      	str	r2, [r3, #8]
 800022a:	60da      	str	r2, [r3, #12]
 800022c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800022e:	4b1e      	ldr	r3, [pc, #120]	@ (80002a8 <MX_GPIO_Init+0x90>)
 8000230:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000232:	4a1d      	ldr	r2, [pc, #116]	@ (80002a8 <MX_GPIO_Init+0x90>)
 8000234:	f043 0320 	orr.w	r3, r3, #32
 8000238:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800023a:	4b1b      	ldr	r3, [pc, #108]	@ (80002a8 <MX_GPIO_Init+0x90>)
 800023c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800023e:	f003 0320 	and.w	r3, r3, #32
 8000242:	60bb      	str	r3, [r7, #8]
 8000244:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000246:	4b18      	ldr	r3, [pc, #96]	@ (80002a8 <MX_GPIO_Init+0x90>)
 8000248:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800024a:	4a17      	ldr	r2, [pc, #92]	@ (80002a8 <MX_GPIO_Init+0x90>)
 800024c:	f043 0301 	orr.w	r3, r3, #1
 8000250:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000252:	4b15      	ldr	r3, [pc, #84]	@ (80002a8 <MX_GPIO_Init+0x90>)
 8000254:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000256:	f003 0301 	and.w	r3, r3, #1
 800025a:	607b      	str	r3, [r7, #4]
 800025c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800025e:	4b12      	ldr	r3, [pc, #72]	@ (80002a8 <MX_GPIO_Init+0x90>)
 8000260:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000262:	4a11      	ldr	r2, [pc, #68]	@ (80002a8 <MX_GPIO_Init+0x90>)
 8000264:	f043 0302 	orr.w	r3, r3, #2
 8000268:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800026a:	4b0f      	ldr	r3, [pc, #60]	@ (80002a8 <MX_GPIO_Init+0x90>)
 800026c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800026e:	f003 0302 	and.w	r3, r3, #2
 8000272:	603b      	str	r3, [r7, #0]
 8000274:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 8000276:	2200      	movs	r2, #0
 8000278:	2107      	movs	r1, #7
 800027a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800027e:	f000 ff73 	bl	8001168 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000282:	2307      	movs	r3, #7
 8000284:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000286:	2301      	movs	r3, #1
 8000288:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800028a:	2300      	movs	r3, #0
 800028c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800028e:	2303      	movs	r3, #3
 8000290:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000292:	f107 030c 	add.w	r3, r7, #12
 8000296:	4619      	mov	r1, r3
 8000298:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800029c:	f000 fde2 	bl	8000e64 <HAL_GPIO_Init>

}
 80002a0:	bf00      	nop
 80002a2:	3720      	adds	r7, #32
 80002a4:	46bd      	mov	sp, r7
 80002a6:	bd80      	pop	{r7, pc}
 80002a8:	40021000 	.word	0x40021000

080002ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002b0:	f000 fc61 	bl	8000b76 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002b4:	f000 f808 	bl	80002c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002b8:	f7ff ffae 	bl	8000218 <MX_GPIO_Init>
  MX_SPI1_Init();
 80002bc:	f000 f856 	bl	800036c <MX_SPI1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  main_nelsitoboy();
 80002c0:	f000 fc18 	bl	8000af4 <main_nelsitoboy>
  while (1)
 80002c4:	bf00      	nop
 80002c6:	e7fd      	b.n	80002c4 <main+0x18>

080002c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b094      	sub	sp, #80	@ 0x50
 80002cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ce:	f107 0318 	add.w	r3, r7, #24
 80002d2:	2238      	movs	r2, #56	@ 0x38
 80002d4:	2100      	movs	r1, #0
 80002d6:	4618      	mov	r0, r3
 80002d8:	f002 f88e 	bl	80023f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002dc:	1d3b      	adds	r3, r7, #4
 80002de:	2200      	movs	r2, #0
 80002e0:	601a      	str	r2, [r3, #0]
 80002e2:	605a      	str	r2, [r3, #4]
 80002e4:	609a      	str	r2, [r3, #8]
 80002e6:	60da      	str	r2, [r3, #12]
 80002e8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80002ea:	2000      	movs	r0, #0
 80002ec:	f000 ff54 	bl	8001198 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002f0:	2302      	movs	r3, #2
 80002f2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002f4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80002f8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002fa:	2340      	movs	r3, #64	@ 0x40
 80002fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002fe:	2302      	movs	r3, #2
 8000300:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000302:	2302      	movs	r3, #2
 8000304:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000306:	2304      	movs	r3, #4
 8000308:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800030a:	2355      	movs	r3, #85	@ 0x55
 800030c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800030e:	2302      	movs	r3, #2
 8000310:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000312:	2302      	movs	r3, #2
 8000314:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000316:	2302      	movs	r3, #2
 8000318:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800031a:	f107 0318 	add.w	r3, r7, #24
 800031e:	4618      	mov	r0, r3
 8000320:	f000 ffee 	bl	8001300 <HAL_RCC_OscConfig>
 8000324:	4603      	mov	r3, r0
 8000326:	2b00      	cmp	r3, #0
 8000328:	d001      	beq.n	800032e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800032a:	f000 f818 	bl	800035e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800032e:	230f      	movs	r3, #15
 8000330:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000332:	2303      	movs	r3, #3
 8000334:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000336:	2300      	movs	r3, #0
 8000338:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800033a:	2300      	movs	r3, #0
 800033c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800033e:	2300      	movs	r3, #0
 8000340:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000342:	1d3b      	adds	r3, r7, #4
 8000344:	2104      	movs	r1, #4
 8000346:	4618      	mov	r0, r3
 8000348:	f001 faec 	bl	8001924 <HAL_RCC_ClockConfig>
 800034c:	4603      	mov	r3, r0
 800034e:	2b00      	cmp	r3, #0
 8000350:	d001      	beq.n	8000356 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000352:	f000 f804 	bl	800035e <Error_Handler>
  }
}
 8000356:	bf00      	nop
 8000358:	3750      	adds	r7, #80	@ 0x50
 800035a:	46bd      	mov	sp, r7
 800035c:	bd80      	pop	{r7, pc}

0800035e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800035e:	b480      	push	{r7}
 8000360:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000362:	b672      	cpsid	i
}
 8000364:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000366:	bf00      	nop
 8000368:	e7fd      	b.n	8000366 <Error_Handler+0x8>
	...

0800036c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000370:	4b1b      	ldr	r3, [pc, #108]	@ (80003e0 <MX_SPI1_Init+0x74>)
 8000372:	4a1c      	ldr	r2, [pc, #112]	@ (80003e4 <MX_SPI1_Init+0x78>)
 8000374:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000376:	4b1a      	ldr	r3, [pc, #104]	@ (80003e0 <MX_SPI1_Init+0x74>)
 8000378:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800037c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800037e:	4b18      	ldr	r3, [pc, #96]	@ (80003e0 <MX_SPI1_Init+0x74>)
 8000380:	2200      	movs	r2, #0
 8000382:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000384:	4b16      	ldr	r3, [pc, #88]	@ (80003e0 <MX_SPI1_Init+0x74>)
 8000386:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800038a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800038c:	4b14      	ldr	r3, [pc, #80]	@ (80003e0 <MX_SPI1_Init+0x74>)
 800038e:	2202      	movs	r2, #2
 8000390:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000392:	4b13      	ldr	r3, [pc, #76]	@ (80003e0 <MX_SPI1_Init+0x74>)
 8000394:	2200      	movs	r2, #0
 8000396:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000398:	4b11      	ldr	r3, [pc, #68]	@ (80003e0 <MX_SPI1_Init+0x74>)
 800039a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800039e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80003a0:	4b0f      	ldr	r3, [pc, #60]	@ (80003e0 <MX_SPI1_Init+0x74>)
 80003a2:	2210      	movs	r2, #16
 80003a4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80003a6:	4b0e      	ldr	r3, [pc, #56]	@ (80003e0 <MX_SPI1_Init+0x74>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80003ac:	4b0c      	ldr	r3, [pc, #48]	@ (80003e0 <MX_SPI1_Init+0x74>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80003b2:	4b0b      	ldr	r3, [pc, #44]	@ (80003e0 <MX_SPI1_Init+0x74>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80003b8:	4b09      	ldr	r3, [pc, #36]	@ (80003e0 <MX_SPI1_Init+0x74>)
 80003ba:	2207      	movs	r2, #7
 80003bc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80003be:	4b08      	ldr	r3, [pc, #32]	@ (80003e0 <MX_SPI1_Init+0x74>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80003c4:	4b06      	ldr	r3, [pc, #24]	@ (80003e0 <MX_SPI1_Init+0x74>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80003ca:	4805      	ldr	r0, [pc, #20]	@ (80003e0 <MX_SPI1_Init+0x74>)
 80003cc:	f001 fc8e 	bl	8001cec <HAL_SPI_Init>
 80003d0:	4603      	mov	r3, r0
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d001      	beq.n	80003da <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80003d6:	f7ff ffc2 	bl	800035e <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80003da:	bf00      	nop
 80003dc:	bd80      	pop	{r7, pc}
 80003de:	bf00      	nop
 80003e0:	20000068 	.word	0x20000068
 80003e4:	40013000 	.word	0x40013000

080003e8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b08a      	sub	sp, #40	@ 0x28
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003f0:	f107 0314 	add.w	r3, r7, #20
 80003f4:	2200      	movs	r2, #0
 80003f6:	601a      	str	r2, [r3, #0]
 80003f8:	605a      	str	r2, [r3, #4]
 80003fa:	609a      	str	r2, [r3, #8]
 80003fc:	60da      	str	r2, [r3, #12]
 80003fe:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	4a17      	ldr	r2, [pc, #92]	@ (8000464 <HAL_SPI_MspInit+0x7c>)
 8000406:	4293      	cmp	r3, r2
 8000408:	d128      	bne.n	800045c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800040a:	4b17      	ldr	r3, [pc, #92]	@ (8000468 <HAL_SPI_MspInit+0x80>)
 800040c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800040e:	4a16      	ldr	r2, [pc, #88]	@ (8000468 <HAL_SPI_MspInit+0x80>)
 8000410:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000414:	6613      	str	r3, [r2, #96]	@ 0x60
 8000416:	4b14      	ldr	r3, [pc, #80]	@ (8000468 <HAL_SPI_MspInit+0x80>)
 8000418:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800041a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800041e:	613b      	str	r3, [r7, #16]
 8000420:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000422:	4b11      	ldr	r3, [pc, #68]	@ (8000468 <HAL_SPI_MspInit+0x80>)
 8000424:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000426:	4a10      	ldr	r2, [pc, #64]	@ (8000468 <HAL_SPI_MspInit+0x80>)
 8000428:	f043 0301 	orr.w	r3, r3, #1
 800042c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800042e:	4b0e      	ldr	r3, [pc, #56]	@ (8000468 <HAL_SPI_MspInit+0x80>)
 8000430:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000432:	f003 0301 	and.w	r3, r3, #1
 8000436:	60fb      	str	r3, [r7, #12]
 8000438:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800043a:	23a0      	movs	r3, #160	@ 0xa0
 800043c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800043e:	2302      	movs	r3, #2
 8000440:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000442:	2300      	movs	r3, #0
 8000444:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000446:	2303      	movs	r3, #3
 8000448:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800044a:	2305      	movs	r3, #5
 800044c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800044e:	f107 0314 	add.w	r3, r7, #20
 8000452:	4619      	mov	r1, r3
 8000454:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000458:	f000 fd04 	bl	8000e64 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800045c:	bf00      	nop
 800045e:	3728      	adds	r7, #40	@ 0x28
 8000460:	46bd      	mov	sp, r7
 8000462:	bd80      	pop	{r7, pc}
 8000464:	40013000 	.word	0x40013000
 8000468:	40021000 	.word	0x40021000

0800046c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b082      	sub	sp, #8
 8000470:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000472:	4b0f      	ldr	r3, [pc, #60]	@ (80004b0 <HAL_MspInit+0x44>)
 8000474:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000476:	4a0e      	ldr	r2, [pc, #56]	@ (80004b0 <HAL_MspInit+0x44>)
 8000478:	f043 0301 	orr.w	r3, r3, #1
 800047c:	6613      	str	r3, [r2, #96]	@ 0x60
 800047e:	4b0c      	ldr	r3, [pc, #48]	@ (80004b0 <HAL_MspInit+0x44>)
 8000480:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000482:	f003 0301 	and.w	r3, r3, #1
 8000486:	607b      	str	r3, [r7, #4]
 8000488:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800048a:	4b09      	ldr	r3, [pc, #36]	@ (80004b0 <HAL_MspInit+0x44>)
 800048c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800048e:	4a08      	ldr	r2, [pc, #32]	@ (80004b0 <HAL_MspInit+0x44>)
 8000490:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000494:	6593      	str	r3, [r2, #88]	@ 0x58
 8000496:	4b06      	ldr	r3, [pc, #24]	@ (80004b0 <HAL_MspInit+0x44>)
 8000498:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800049a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800049e:	603b      	str	r3, [r7, #0]
 80004a0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80004a2:	f000 ff1d 	bl	80012e0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004a6:	bf00      	nop
 80004a8:	3708      	adds	r7, #8
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bd80      	pop	{r7, pc}
 80004ae:	bf00      	nop
 80004b0:	40021000 	.word	0x40021000

080004b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004b4:	b480      	push	{r7}
 80004b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80004b8:	bf00      	nop
 80004ba:	e7fd      	b.n	80004b8 <NMI_Handler+0x4>

080004bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004bc:	b480      	push	{r7}
 80004be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004c0:	bf00      	nop
 80004c2:	e7fd      	b.n	80004c0 <HardFault_Handler+0x4>

080004c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004c4:	b480      	push	{r7}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004c8:	bf00      	nop
 80004ca:	e7fd      	b.n	80004c8 <MemManage_Handler+0x4>

080004cc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004cc:	b480      	push	{r7}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004d0:	bf00      	nop
 80004d2:	e7fd      	b.n	80004d0 <BusFault_Handler+0x4>

080004d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004d4:	b480      	push	{r7}
 80004d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004d8:	bf00      	nop
 80004da:	e7fd      	b.n	80004d8 <UsageFault_Handler+0x4>

080004dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004e0:	bf00      	nop
 80004e2:	46bd      	mov	sp, r7
 80004e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e8:	4770      	bx	lr

080004ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004ea:	b480      	push	{r7}
 80004ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004ee:	bf00      	nop
 80004f0:	46bd      	mov	sp, r7
 80004f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f6:	4770      	bx	lr

080004f8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004f8:	b480      	push	{r7}
 80004fa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004fc:	bf00      	nop
 80004fe:	46bd      	mov	sp, r7
 8000500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000504:	4770      	bx	lr

08000506 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000506:	b580      	push	{r7, lr}
 8000508:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800050a:	f000 fb87 	bl	8000c1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800050e:	bf00      	nop
 8000510:	bd80      	pop	{r7, pc}
	...

08000514 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000514:	b480      	push	{r7}
 8000516:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000518:	4b06      	ldr	r3, [pc, #24]	@ (8000534 <SystemInit+0x20>)
 800051a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800051e:	4a05      	ldr	r2, [pc, #20]	@ (8000534 <SystemInit+0x20>)
 8000520:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000524:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000528:	bf00      	nop
 800052a:	46bd      	mov	sp, r7
 800052c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop
 8000534:	e000ed00 	.word	0xe000ed00

08000538 <main_game>:
 } TRectWind;




void main_game(void){
 8000538:	b5f0      	push	{r4, r5, r6, r7, lr}
 800053a:	b093      	sub	sp, #76	@ 0x4c
 800053c:	af0e      	add	r7, sp, #56	@ 0x38
	bool gameLoopOn = true;
 800053e:	2301      	movs	r3, #1
 8000540:	73fb      	strb	r3, [r7, #15]
	TRectWind clrWind;
	uint8_t gameDelay = 20;
 8000542:	2314      	movs	r3, #20
 8000544:	73bb      	strb	r3, [r7, #14]

	TSpriteMov bola;

	bola.posX = 10;
 8000546:	230a      	movs	r3, #10
 8000548:	703b      	strb	r3, [r7, #0]
	bola.posY = 10;
 800054a:	230a      	movs	r3, #10
 800054c:	707b      	strb	r3, [r7, #1]
	bola.velocidade_X = 2;
 800054e:	2302      	movs	r3, #2
 8000550:	70bb      	strb	r3, [r7, #2]
	bola.velocidade_Y = 0;
 8000552:	2300      	movs	r3, #0
 8000554:	70fb      	strb	r3, [r7, #3]
	bola.idxTile = 1;
 8000556:	2301      	movs	r3, #1
 8000558:	713b      	strb	r3, [r7, #4]

	ST7789VW_FillScreen2(paletaGame.corRGB565[0x0B]);
 800055a:	4b2f      	ldr	r3, [pc, #188]	@ (8000618 <main_game+0xe0>)
 800055c:	8adb      	ldrh	r3, [r3, #22]
 800055e:	4618      	mov	r0, r3
 8000560:	f000 f9fa 	bl	8000958 <ST7789VW_FillScreen2>
	//J3GameEngine_DesenhaTile(listaTiles[1], 50 ,50);
	while(gameLoopOn){
 8000564:	e04f      	b.n	8000606 <main_game+0xce>
		//ST7789VW_FillScreen2(paletaGame.corRGB565[0x0B]);
		ST7789VW_FillWindow(clrWind.posX1, clrWind.posY1, clrWind.posX2, clrWind.posY2, paletaGame.corRGB565[0x0B]);
 8000566:	7a3b      	ldrb	r3, [r7, #8]
 8000568:	4618      	mov	r0, r3
 800056a:	7a7b      	ldrb	r3, [r7, #9]
 800056c:	4619      	mov	r1, r3
 800056e:	7abb      	ldrb	r3, [r7, #10]
 8000570:	461a      	mov	r2, r3
 8000572:	7afb      	ldrb	r3, [r7, #11]
 8000574:	461c      	mov	r4, r3
 8000576:	4b28      	ldr	r3, [pc, #160]	@ (8000618 <main_game+0xe0>)
 8000578:	8adb      	ldrh	r3, [r3, #22]
 800057a:	9300      	str	r3, [sp, #0]
 800057c:	4623      	mov	r3, r4
 800057e:	f000 fa49 	bl	8000a14 <ST7789VW_FillWindow>
		J3GameEngine_DesenhaTile(listaTiles[bola.idxTile], bola.posX ,bola.posY);
 8000582:	793b      	ldrb	r3, [r7, #4]
 8000584:	4619      	mov	r1, r3
 8000586:	783b      	ldrb	r3, [r7, #0]
 8000588:	787a      	ldrb	r2, [r7, #1]
 800058a:	4824      	ldr	r0, [pc, #144]	@ (800061c <main_game+0xe4>)
 800058c:	0189      	lsls	r1, r1, #6
 800058e:	1846      	adds	r6, r0, r1
 8000590:	920d      	str	r2, [sp, #52]	@ 0x34
 8000592:	930c      	str	r3, [sp, #48]	@ 0x30
 8000594:	466d      	mov	r5, sp
 8000596:	f106 0410 	add.w	r4, r6, #16
 800059a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800059c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800059e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80005a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80005a2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80005a6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80005aa:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80005ae:	f000 f849 	bl	8000644 <J3GameEngine_DesenhaTile>

		clrWind.posX1 = bola.posX;
 80005b2:	783b      	ldrb	r3, [r7, #0]
 80005b4:	723b      	strb	r3, [r7, #8]
		clrWind.posX2 = bola.posX + 7;
 80005b6:	783b      	ldrb	r3, [r7, #0]
 80005b8:	3307      	adds	r3, #7
 80005ba:	b2db      	uxtb	r3, r3
 80005bc:	72bb      	strb	r3, [r7, #10]
		clrWind.posY1 = bola.posY;
 80005be:	787b      	ldrb	r3, [r7, #1]
 80005c0:	727b      	strb	r3, [r7, #9]
		clrWind.posY2 = bola.posY + 7;
 80005c2:	787b      	ldrb	r3, [r7, #1]
 80005c4:	3307      	adds	r3, #7
 80005c6:	b2db      	uxtb	r3, r3
 80005c8:	72fb      	strb	r3, [r7, #11]

		bola.posX =  bola.posX + bola.velocidade_X;
 80005ca:	783a      	ldrb	r2, [r7, #0]
 80005cc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80005d0:	b2db      	uxtb	r3, r3
 80005d2:	4413      	add	r3, r2
 80005d4:	b2db      	uxtb	r3, r3
 80005d6:	703b      	strb	r3, [r7, #0]
		if(bola.posX >= 320){
			bola.posX = 320 - 1;
			bola.velocidade_X = bola.velocidade_X * (-1);
		}

		bola.posY =  bola.posY + bola.velocidade_Y;
 80005d8:	787a      	ldrb	r2, [r7, #1]
 80005da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80005de:	b2db      	uxtb	r3, r3
 80005e0:	4413      	add	r3, r2
 80005e2:	b2db      	uxtb	r3, r3
 80005e4:	707b      	strb	r3, [r7, #1]
		if(bola.posY >= 240){
 80005e6:	787b      	ldrb	r3, [r7, #1]
 80005e8:	2bef      	cmp	r3, #239	@ 0xef
 80005ea:	d908      	bls.n	80005fe <main_game+0xc6>
			bola.posY = 240 - 1;
 80005ec:	23ef      	movs	r3, #239	@ 0xef
 80005ee:	707b      	strb	r3, [r7, #1]
			bola.velocidade_Y = bola.velocidade_Y * (-1);
 80005f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80005f4:	b2db      	uxtb	r3, r3
 80005f6:	425b      	negs	r3, r3
 80005f8:	b2db      	uxtb	r3, r3
 80005fa:	b25b      	sxtb	r3, r3
 80005fc:	70fb      	strb	r3, [r7, #3]
		}


		HAL_Delay(gameDelay);
 80005fe:	7bbb      	ldrb	r3, [r7, #14]
 8000600:	4618      	mov	r0, r3
 8000602:	f000 fb29 	bl	8000c58 <HAL_Delay>
	while(gameLoopOn){
 8000606:	7bfb      	ldrb	r3, [r7, #15]
 8000608:	2b00      	cmp	r3, #0
 800060a:	d1ac      	bne.n	8000566 <main_game+0x2e>
	}

}
 800060c:	bf00      	nop
 800060e:	bf00      	nop
 8000610:	3714      	adds	r7, #20
 8000612:	46bd      	mov	sp, r7
 8000614:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000616:	bf00      	nop
 8000618:	20000004 	.word	0x20000004
 800061c:	08002478 	.word	0x08002478

08000620 <J3GameEngine_GetCorPaleta>:

void J3GameEngine_SetPaleta(TPaletaCor _paleta){
  gamePaleta = _paleta;
}

uint16_t J3GameEngine_GetCorPaleta(uint8_t _idxCor){
 8000620:	b480      	push	{r7}
 8000622:	b083      	sub	sp, #12
 8000624:	af00      	add	r7, sp, #0
 8000626:	4603      	mov	r3, r0
 8000628:	71fb      	strb	r3, [r7, #7]
	return gamePaleta.corRGB565[_idxCor];
 800062a:	79fb      	ldrb	r3, [r7, #7]
 800062c:	4a04      	ldr	r2, [pc, #16]	@ (8000640 <J3GameEngine_GetCorPaleta+0x20>)
 800062e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
}
 8000632:	4618      	mov	r0, r3
 8000634:	370c      	adds	r7, #12
 8000636:	46bd      	mov	sp, r7
 8000638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063c:	4770      	bx	lr
 800063e:	bf00      	nop
 8000640:	20000024 	.word	0x20000024

08000644 <J3GameEngine_DesenhaTile>:


void J3GameEngine_DesenhaTile(TTile _tile, uint8_t _posX, uint8_t _posY){
 8000644:	b084      	sub	sp, #16
 8000646:	b580      	push	{r7, lr}
 8000648:	b084      	sub	sp, #16
 800064a:	af00      	add	r7, sp, #0
 800064c:	f107 0c18 	add.w	ip, r7, #24
 8000650:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 8000654:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000658:	607b      	str	r3, [r7, #4]
uint8_t idxCorPaleta = 0;
 800065a:	2300      	movs	r3, #0
 800065c:	733b      	strb	r3, [r7, #12]
uint16_t auxCor;
uint8_t auxY = 0;
 800065e:	2300      	movs	r3, #0
 8000660:	73fb      	strb	r3, [r7, #15]
uint8_t auxX = 0;
 8000662:	2300      	movs	r3, #0
 8000664:	73bb      	strb	r3, [r7, #14]
for(uint8_t i = 0; i < TILE_TAMANHO*TILE_TAMANHO; i++){
 8000666:	2300      	movs	r3, #0
 8000668:	737b      	strb	r3, [r7, #13]
 800066a:	e02a      	b.n	80006c2 <J3GameEngine_DesenhaTile+0x7e>

	idxCorPaleta = _tile.tile_pixel[i];
 800066c:	7b7b      	ldrb	r3, [r7, #13]
 800066e:	f107 0218 	add.w	r2, r7, #24
 8000672:	5cd3      	ldrb	r3, [r2, r3]
 8000674:	733b      	strb	r3, [r7, #12]
	auxCor = J3GameEngine_GetCorPaleta(idxCorPaleta);
 8000676:	7b3b      	ldrb	r3, [r7, #12]
 8000678:	4618      	mov	r0, r3
 800067a:	f7ff ffd1 	bl	8000620 <J3GameEngine_GetCorPaleta>
 800067e:	4603      	mov	r3, r0
 8000680:	817b      	strh	r3, [r7, #10]
	ST7789VW_DrawPixel(_posX + auxX,  _posY + auxY, auxCor);
 8000682:	f897 3058 	ldrb.w	r3, [r7, #88]	@ 0x58
 8000686:	b29a      	uxth	r2, r3
 8000688:	7bbb      	ldrb	r3, [r7, #14]
 800068a:	b29b      	uxth	r3, r3
 800068c:	4413      	add	r3, r2
 800068e:	b298      	uxth	r0, r3
 8000690:	f897 305c 	ldrb.w	r3, [r7, #92]	@ 0x5c
 8000694:	b29a      	uxth	r2, r3
 8000696:	7bfb      	ldrb	r3, [r7, #15]
 8000698:	b29b      	uxth	r3, r3
 800069a:	4413      	add	r3, r2
 800069c:	b29b      	uxth	r3, r3
 800069e:	897a      	ldrh	r2, [r7, #10]
 80006a0:	4619      	mov	r1, r3
 80006a2:	f000 f909 	bl	80008b8 <ST7789VW_DrawPixel>
	auxX++;
 80006a6:	7bbb      	ldrb	r3, [r7, #14]
 80006a8:	3301      	adds	r3, #1
 80006aa:	73bb      	strb	r3, [r7, #14]
	if(auxX == 8){
 80006ac:	7bbb      	ldrb	r3, [r7, #14]
 80006ae:	2b08      	cmp	r3, #8
 80006b0:	d104      	bne.n	80006bc <J3GameEngine_DesenhaTile+0x78>
		auxX = 0;
 80006b2:	2300      	movs	r3, #0
 80006b4:	73bb      	strb	r3, [r7, #14]
		auxY++;
 80006b6:	7bfb      	ldrb	r3, [r7, #15]
 80006b8:	3301      	adds	r3, #1
 80006ba:	73fb      	strb	r3, [r7, #15]
for(uint8_t i = 0; i < TILE_TAMANHO*TILE_TAMANHO; i++){
 80006bc:	7b7b      	ldrb	r3, [r7, #13]
 80006be:	3301      	adds	r3, #1
 80006c0:	737b      	strb	r3, [r7, #13]
 80006c2:	7b7b      	ldrb	r3, [r7, #13]
 80006c4:	2b3f      	cmp	r3, #63	@ 0x3f
 80006c6:	d9d1      	bls.n	800066c <J3GameEngine_DesenhaTile+0x28>





}
 80006c8:	bf00      	nop
 80006ca:	bf00      	nop
 80006cc:	3710      	adds	r7, #16
 80006ce:	46bd      	mov	sp, r7
 80006d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80006d4:	b004      	add	sp, #16
 80006d6:	4770      	bx	lr

080006d8 <ST7789VW_SendCommand>:

// Handler para a interface SPI (será passado na inicialização)
static SPI_HandleTypeDef *hspi_ptr;

// Função para enviar um comando para o display
static void ST7789VW_SendCommand(uint8_t command) {
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
 80006de:	4603      	mov	r3, r0
 80006e0:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(ST7789VW_DC_GPIO_Port, ST7789VW_DC_Pin, GPIO_PIN_RESET); // DC = 0 para comando
 80006e2:	2200      	movs	r2, #0
 80006e4:	2102      	movs	r1, #2
 80006e6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006ea:	f000 fd3d 	bl	8001168 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ST7789VW_CS_GPIO_Port, ST7789VW_CS_Pin, GPIO_PIN_RESET); // CS = 0 para selecionar
 80006ee:	2200      	movs	r2, #0
 80006f0:	2101      	movs	r1, #1
 80006f2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006f6:	f000 fd37 	bl	8001168 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(hspi_ptr, &command, 1, HAL_MAX_DELAY);
 80006fa:	4b09      	ldr	r3, [pc, #36]	@ (8000720 <ST7789VW_SendCommand+0x48>)
 80006fc:	6818      	ldr	r0, [r3, #0]
 80006fe:	1df9      	adds	r1, r7, #7
 8000700:	f04f 33ff 	mov.w	r3, #4294967295
 8000704:	2201      	movs	r2, #1
 8000706:	f001 fb9c 	bl	8001e42 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(ST7789VW_CS_GPIO_Port, ST7789VW_CS_Pin, GPIO_PIN_SET);   // CS = 1 para deselecionar
 800070a:	2201      	movs	r2, #1
 800070c:	2101      	movs	r1, #1
 800070e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000712:	f000 fd29 	bl	8001168 <HAL_GPIO_WritePin>
}
 8000716:	bf00      	nop
 8000718:	3708      	adds	r7, #8
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	200000cc 	.word	0x200000cc

08000724 <ST7789VW_SendData>:

// Função para enviar dados para o display
static void ST7789VW_SendData(uint8_t *data, uint16_t size) {
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
 800072c:	460b      	mov	r3, r1
 800072e:	807b      	strh	r3, [r7, #2]
  HAL_GPIO_WritePin(ST7789VW_DC_GPIO_Port, ST7789VW_DC_Pin, GPIO_PIN_SET); // DC = 1 para dados
 8000730:	2201      	movs	r2, #1
 8000732:	2102      	movs	r1, #2
 8000734:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000738:	f000 fd16 	bl	8001168 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ST7789VW_CS_GPIO_Port, ST7789VW_CS_Pin, GPIO_PIN_RESET); // CS = 0 para selecionar
 800073c:	2200      	movs	r2, #0
 800073e:	2101      	movs	r1, #1
 8000740:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000744:	f000 fd10 	bl	8001168 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(hspi_ptr, data, size, HAL_MAX_DELAY);
 8000748:	4b08      	ldr	r3, [pc, #32]	@ (800076c <ST7789VW_SendData+0x48>)
 800074a:	6818      	ldr	r0, [r3, #0]
 800074c:	887a      	ldrh	r2, [r7, #2]
 800074e:	f04f 33ff 	mov.w	r3, #4294967295
 8000752:	6879      	ldr	r1, [r7, #4]
 8000754:	f001 fb75 	bl	8001e42 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(ST7789VW_CS_GPIO_Port, ST7789VW_CS_Pin, GPIO_PIN_SET);   // CS = 1 para deselecionar
 8000758:	2201      	movs	r2, #1
 800075a:	2101      	movs	r1, #1
 800075c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000760:	f000 fd02 	bl	8001168 <HAL_GPIO_WritePin>
}
 8000764:	bf00      	nop
 8000766:	3708      	adds	r7, #8
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}
 800076c:	200000cc 	.word	0x200000cc

08000770 <J3_ST7789VW_SetWindows>:

static void J3_ST7789VW_SetWindows(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2){
 8000770:	b590      	push	{r4, r7, lr}
 8000772:	b085      	sub	sp, #20
 8000774:	af00      	add	r7, sp, #0
 8000776:	4604      	mov	r4, r0
 8000778:	4608      	mov	r0, r1
 800077a:	4611      	mov	r1, r2
 800077c:	461a      	mov	r2, r3
 800077e:	4623      	mov	r3, r4
 8000780:	80fb      	strh	r3, [r7, #6]
 8000782:	4603      	mov	r3, r0
 8000784:	80bb      	strh	r3, [r7, #4]
 8000786:	460b      	mov	r3, r1
 8000788:	807b      	strh	r3, [r7, #2]
 800078a:	4613      	mov	r3, r2
 800078c:	803b      	strh	r3, [r7, #0]
 if(x2 >= ST7789VW_WIDTH) x2 = ST7789VW_WIDTH-1;
 800078e:	887b      	ldrh	r3, [r7, #2]
 8000790:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000794:	d302      	bcc.n	800079c <J3_ST7789VW_SetWindows+0x2c>
 8000796:	f240 133f 	movw	r3, #319	@ 0x13f
 800079a:	807b      	strh	r3, [r7, #2]
 if(y2 >= ST7789VW_HEIGHT) y2 = ST7789VW_HEIGHT-1;
 800079c:	883b      	ldrh	r3, [r7, #0]
 800079e:	2bef      	cmp	r3, #239	@ 0xef
 80007a0:	d901      	bls.n	80007a6 <J3_ST7789VW_SetWindows+0x36>
 80007a2:	23ef      	movs	r3, #239	@ 0xef
 80007a4:	803b      	strh	r3, [r7, #0]
 if(x1 > x2)x2 = x1;
 80007a6:	88fa      	ldrh	r2, [r7, #6]
 80007a8:	887b      	ldrh	r3, [r7, #2]
 80007aa:	429a      	cmp	r2, r3
 80007ac:	d901      	bls.n	80007b2 <J3_ST7789VW_SetWindows+0x42>
 80007ae:	88fb      	ldrh	r3, [r7, #6]
 80007b0:	807b      	strh	r3, [r7, #2]
 if(y1 > y2)y2 = y1;
 80007b2:	88ba      	ldrh	r2, [r7, #4]
 80007b4:	883b      	ldrh	r3, [r7, #0]
 80007b6:	429a      	cmp	r2, r3
 80007b8:	d901      	bls.n	80007be <J3_ST7789VW_SetWindows+0x4e>
 80007ba:	88bb      	ldrh	r3, [r7, #4]
 80007bc:	803b      	strh	r3, [r7, #0]



 ST7789VW_SendCommand(0x2A); // CASET - Column Address Set
 80007be:	202a      	movs	r0, #42	@ 0x2a
 80007c0:	f7ff ff8a 	bl	80006d8 <ST7789VW_SendCommand>
 uint8_t data[4];
 data[0] = (x1 >> 8) & 0xFF;
 80007c4:	88fb      	ldrh	r3, [r7, #6]
 80007c6:	0a1b      	lsrs	r3, r3, #8
 80007c8:	b29b      	uxth	r3, r3
 80007ca:	b2db      	uxtb	r3, r3
 80007cc:	733b      	strb	r3, [r7, #12]
 data[1] = x1 & 0xFF;
 80007ce:	88fb      	ldrh	r3, [r7, #6]
 80007d0:	b2db      	uxtb	r3, r3
 80007d2:	737b      	strb	r3, [r7, #13]
 data[2] = (x2 >> 8) & 0xFF;
 80007d4:	887b      	ldrh	r3, [r7, #2]
 80007d6:	0a1b      	lsrs	r3, r3, #8
 80007d8:	b29b      	uxth	r3, r3
 80007da:	b2db      	uxtb	r3, r3
 80007dc:	73bb      	strb	r3, [r7, #14]
 data[3] = x2 & 0xFF;
 80007de:	887b      	ldrh	r3, [r7, #2]
 80007e0:	b2db      	uxtb	r3, r3
 80007e2:	73fb      	strb	r3, [r7, #15]
 ST7789VW_SendData(data, 4);
 80007e4:	f107 030c 	add.w	r3, r7, #12
 80007e8:	2104      	movs	r1, #4
 80007ea:	4618      	mov	r0, r3
 80007ec:	f7ff ff9a 	bl	8000724 <ST7789VW_SendData>

 ST7789VW_SendCommand(0x2B); // RASET - Row Address Set
 80007f0:	202b      	movs	r0, #43	@ 0x2b
 80007f2:	f7ff ff71 	bl	80006d8 <ST7789VW_SendCommand>
 data[0] = (y1 >> 8) & 0xFF;
 80007f6:	88bb      	ldrh	r3, [r7, #4]
 80007f8:	0a1b      	lsrs	r3, r3, #8
 80007fa:	b29b      	uxth	r3, r3
 80007fc:	b2db      	uxtb	r3, r3
 80007fe:	733b      	strb	r3, [r7, #12]
 data[1] = y1 & 0xFF;
 8000800:	88bb      	ldrh	r3, [r7, #4]
 8000802:	b2db      	uxtb	r3, r3
 8000804:	737b      	strb	r3, [r7, #13]
 data[2] = (y2 >> 8) & 0xFF;
 8000806:	883b      	ldrh	r3, [r7, #0]
 8000808:	0a1b      	lsrs	r3, r3, #8
 800080a:	b29b      	uxth	r3, r3
 800080c:	b2db      	uxtb	r3, r3
 800080e:	73bb      	strb	r3, [r7, #14]
 data[3] = y2 & 0xFF;
 8000810:	883b      	ldrh	r3, [r7, #0]
 8000812:	b2db      	uxtb	r3, r3
 8000814:	73fb      	strb	r3, [r7, #15]
 ST7789VW_SendData(data, 4);
 8000816:	f107 030c 	add.w	r3, r7, #12
 800081a:	2104      	movs	r1, #4
 800081c:	4618      	mov	r0, r3
 800081e:	f7ff ff81 	bl	8000724 <ST7789VW_SendData>
}
 8000822:	bf00      	nop
 8000824:	3714      	adds	r7, #20
 8000826:	46bd      	mov	sp, r7
 8000828:	bd90      	pop	{r4, r7, pc}
	...

0800082c <ST7789VW_Init>:


// Função de inicialização do display ST7789VW
void ST7789VW_Init(SPI_HandleTypeDef *hspi) {
 800082c:	b580      	push	{r7, lr}
 800082e:	b084      	sub	sp, #16
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
  hspi_ptr = hspi;
 8000834:	4a1f      	ldr	r2, [pc, #124]	@ (80008b4 <ST7789VW_Init+0x88>)
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	6013      	str	r3, [r2, #0]

  // Reset do display
  HAL_GPIO_WritePin(ST7789VW_RST_GPIO_Port, ST7789VW_RST_Pin, GPIO_PIN_RESET);
 800083a:	2200      	movs	r2, #0
 800083c:	2104      	movs	r1, #4
 800083e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000842:	f000 fc91 	bl	8001168 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000846:	2064      	movs	r0, #100	@ 0x64
 8000848:	f000 fa06 	bl	8000c58 <HAL_Delay>
  HAL_GPIO_WritePin(ST7789VW_RST_GPIO_Port, ST7789VW_RST_Pin, GPIO_PIN_SET);
 800084c:	2201      	movs	r2, #1
 800084e:	2104      	movs	r1, #4
 8000850:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000854:	f000 fc88 	bl	8001168 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000858:	2064      	movs	r0, #100	@ 0x64
 800085a:	f000 f9fd 	bl	8000c58 <HAL_Delay>

  // Sequência de inicialização (baseada no datasheet do ST7789VW)
  ST7789VW_SendCommand(0x01); // SWRESET - Software reset
 800085e:	2001      	movs	r0, #1
 8000860:	f7ff ff3a 	bl	80006d8 <ST7789VW_SendCommand>
  HAL_Delay(150);
 8000864:	2096      	movs	r0, #150	@ 0x96
 8000866:	f000 f9f7 	bl	8000c58 <HAL_Delay>

  ST7789VW_SendCommand(0x11); // SLPOUT - Leave sleep mode
 800086a:	2011      	movs	r0, #17
 800086c:	f7ff ff34 	bl	80006d8 <ST7789VW_SendCommand>
  HAL_Delay(120);
 8000870:	2078      	movs	r0, #120	@ 0x78
 8000872:	f000 f9f1 	bl	8000c58 <HAL_Delay>

  ST7789VW_SendCommand(0x3A); // COLMOD - Interface Pixel Format
 8000876:	203a      	movs	r0, #58	@ 0x3a
 8000878:	f7ff ff2e 	bl	80006d8 <ST7789VW_SendCommand>
  uint8_t color_mode = 0x55;   // 16 bits/pixel (RGB565)
 800087c:	2355      	movs	r3, #85	@ 0x55
 800087e:	73fb      	strb	r3, [r7, #15]
  ST7789VW_SendData(&color_mode, 1);
 8000880:	f107 030f 	add.w	r3, r7, #15
 8000884:	2101      	movs	r1, #1
 8000886:	4618      	mov	r0, r3
 8000888:	f7ff ff4c 	bl	8000724 <ST7789VW_SendData>
  /*
  ST7789VW_SendCommand(0x36); // MADCTL - Memory Data Access Control
  uint8_t madctl = 0x00;       // Ajuste conforme a orientação desejada
  ST7789VW_SendData(&madctl, 1);
  */
  ST7789VW_SetRotation(ST7789VW_ORIENTACAO);
 800088c:	2001      	movs	r0, #1
 800088e:	f000 f901 	bl	8000a94 <ST7789VW_SetRotation>




  ST7789VW_SendCommand(0x21); // DISPINV - Display Inversion ON (opcional)
 8000892:	2021      	movs	r0, #33	@ 0x21
 8000894:	f7ff ff20 	bl	80006d8 <ST7789VW_SendCommand>

  ST7789VW_SendCommand(0x13); // NORON - Normal display mode ON
 8000898:	2013      	movs	r0, #19
 800089a:	f7ff ff1d 	bl	80006d8 <ST7789VW_SendCommand>

  ST7789VW_SendCommand(0x29); // DISPON - Display ON
 800089e:	2029      	movs	r0, #41	@ 0x29
 80008a0:	f7ff ff1a 	bl	80006d8 <ST7789VW_SendCommand>
  HAL_Delay(10);
 80008a4:	200a      	movs	r0, #10
 80008a6:	f000 f9d7 	bl	8000c58 <HAL_Delay>
}
 80008aa:	bf00      	nop
 80008ac:	3710      	adds	r7, #16
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	200000cc 	.word	0x200000cc

080008b8 <ST7789VW_DrawPixel>:

// Função para desenhar um pixel na tela
void ST7789VW_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b084      	sub	sp, #16
 80008bc:	af00      	add	r7, sp, #0
 80008be:	4603      	mov	r3, r0
 80008c0:	80fb      	strh	r3, [r7, #6]
 80008c2:	460b      	mov	r3, r1
 80008c4:	80bb      	strh	r3, [r7, #4]
 80008c6:	4613      	mov	r3, r2
 80008c8:	807b      	strh	r3, [r7, #2]
  //if (x >= ST7789VW_WIDTH || y >= ST7789VW_HEIGHT) return;

  ST7789VW_SendCommand(0x2A); // CASET - Column Address Set
 80008ca:	202a      	movs	r0, #42	@ 0x2a
 80008cc:	f7ff ff04 	bl	80006d8 <ST7789VW_SendCommand>
  uint8_t data[4];
  data[0] = (x >> 8) & 0xFF;
 80008d0:	88fb      	ldrh	r3, [r7, #6]
 80008d2:	0a1b      	lsrs	r3, r3, #8
 80008d4:	b29b      	uxth	r3, r3
 80008d6:	b2db      	uxtb	r3, r3
 80008d8:	733b      	strb	r3, [r7, #12]
  data[1] = x & 0xFF;
 80008da:	88fb      	ldrh	r3, [r7, #6]
 80008dc:	b2db      	uxtb	r3, r3
 80008de:	737b      	strb	r3, [r7, #13]
  data[2] = (x >> 8) & 0xFF;
 80008e0:	88fb      	ldrh	r3, [r7, #6]
 80008e2:	0a1b      	lsrs	r3, r3, #8
 80008e4:	b29b      	uxth	r3, r3
 80008e6:	b2db      	uxtb	r3, r3
 80008e8:	73bb      	strb	r3, [r7, #14]
  data[3] = x & 0xFF;
 80008ea:	88fb      	ldrh	r3, [r7, #6]
 80008ec:	b2db      	uxtb	r3, r3
 80008ee:	73fb      	strb	r3, [r7, #15]
  ST7789VW_SendData(data, 4);
 80008f0:	f107 030c 	add.w	r3, r7, #12
 80008f4:	2104      	movs	r1, #4
 80008f6:	4618      	mov	r0, r3
 80008f8:	f7ff ff14 	bl	8000724 <ST7789VW_SendData>

  ST7789VW_SendCommand(0x2B); // RASET - Row Address Set
 80008fc:	202b      	movs	r0, #43	@ 0x2b
 80008fe:	f7ff feeb 	bl	80006d8 <ST7789VW_SendCommand>
  data[0] = (y >> 8) & 0xFF;
 8000902:	88bb      	ldrh	r3, [r7, #4]
 8000904:	0a1b      	lsrs	r3, r3, #8
 8000906:	b29b      	uxth	r3, r3
 8000908:	b2db      	uxtb	r3, r3
 800090a:	733b      	strb	r3, [r7, #12]
  data[1] = y & 0xFF;
 800090c:	88bb      	ldrh	r3, [r7, #4]
 800090e:	b2db      	uxtb	r3, r3
 8000910:	737b      	strb	r3, [r7, #13]
  data[2] = (y >> 8) & 0xFF;
 8000912:	88bb      	ldrh	r3, [r7, #4]
 8000914:	0a1b      	lsrs	r3, r3, #8
 8000916:	b29b      	uxth	r3, r3
 8000918:	b2db      	uxtb	r3, r3
 800091a:	73bb      	strb	r3, [r7, #14]
  data[3] = y & 0xFF;
 800091c:	88bb      	ldrh	r3, [r7, #4]
 800091e:	b2db      	uxtb	r3, r3
 8000920:	73fb      	strb	r3, [r7, #15]
  ST7789VW_SendData(data, 4);
 8000922:	f107 030c 	add.w	r3, r7, #12
 8000926:	2104      	movs	r1, #4
 8000928:	4618      	mov	r0, r3
 800092a:	f7ff fefb 	bl	8000724 <ST7789VW_SendData>

  ST7789VW_SendCommand(0x2C); // RAMWR - Memory Write
 800092e:	202c      	movs	r0, #44	@ 0x2c
 8000930:	f7ff fed2 	bl	80006d8 <ST7789VW_SendCommand>
  data[0] = (color >> 8) & 0xFF; // High byte
 8000934:	887b      	ldrh	r3, [r7, #2]
 8000936:	0a1b      	lsrs	r3, r3, #8
 8000938:	b29b      	uxth	r3, r3
 800093a:	b2db      	uxtb	r3, r3
 800093c:	733b      	strb	r3, [r7, #12]
  data[1] = color & 0xFF;        // Low byte
 800093e:	887b      	ldrh	r3, [r7, #2]
 8000940:	b2db      	uxtb	r3, r3
 8000942:	737b      	strb	r3, [r7, #13]
  ST7789VW_SendData(data, 2);
 8000944:	f107 030c 	add.w	r3, r7, #12
 8000948:	2102      	movs	r1, #2
 800094a:	4618      	mov	r0, r3
 800094c:	f7ff feea 	bl	8000724 <ST7789VW_SendData>
}
 8000950:	bf00      	nop
 8000952:	3710      	adds	r7, #16
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}

08000958 <ST7789VW_FillScreen2>:
    //HAL_Delay(2);
  }
}

// Função para preencher toda a tela com uma única cor
void ST7789VW_FillScreen2(uint16_t color) {
 8000958:	b580      	push	{r7, lr}
 800095a:	b086      	sub	sp, #24
 800095c:	af00      	add	r7, sp, #0
 800095e:	4603      	mov	r3, r0
 8000960:	80fb      	strh	r3, [r7, #6]
  uint8_t data[2];
  data[0] = (color >> 8) & 0xFF; // High byte
 8000962:	88fb      	ldrh	r3, [r7, #6]
 8000964:	0a1b      	lsrs	r3, r3, #8
 8000966:	b29b      	uxth	r3, r3
 8000968:	b2db      	uxtb	r3, r3
 800096a:	743b      	strb	r3, [r7, #16]
  data[1] = color & 0xFF;        // Low byte
 800096c:	88fb      	ldrh	r3, [r7, #6]
 800096e:	b2db      	uxtb	r3, r3
 8000970:	747b      	strb	r3, [r7, #17]

  ST7789VW_SendCommand(0x2A); // CASET - Column Address Set
 8000972:	202a      	movs	r0, #42	@ 0x2a
 8000974:	f7ff feb0 	bl	80006d8 <ST7789VW_SendCommand>
  uint8_t col_data[4];
  col_data[0] = 0x00;
 8000978:	2300      	movs	r3, #0
 800097a:	733b      	strb	r3, [r7, #12]
  col_data[1] = 0x00;
 800097c:	2300      	movs	r3, #0
 800097e:	737b      	strb	r3, [r7, #13]
  col_data[2] = (ST7789VW_WIDTH - 1) >> 8;
 8000980:	2301      	movs	r3, #1
 8000982:	73bb      	strb	r3, [r7, #14]
  col_data[3] = (ST7789VW_WIDTH - 1) & 0xFF;
 8000984:	233f      	movs	r3, #63	@ 0x3f
 8000986:	73fb      	strb	r3, [r7, #15]
  ST7789VW_SendData(col_data, 4);
 8000988:	f107 030c 	add.w	r3, r7, #12
 800098c:	2104      	movs	r1, #4
 800098e:	4618      	mov	r0, r3
 8000990:	f7ff fec8 	bl	8000724 <ST7789VW_SendData>

  ST7789VW_SendCommand(0x2B); // RASET - Row Address Set
 8000994:	202b      	movs	r0, #43	@ 0x2b
 8000996:	f7ff fe9f 	bl	80006d8 <ST7789VW_SendCommand>
  uint8_t row_data[4];
  row_data[0] = 0x00;
 800099a:	2300      	movs	r3, #0
 800099c:	723b      	strb	r3, [r7, #8]
  row_data[1] = 0x00;
 800099e:	2300      	movs	r3, #0
 80009a0:	727b      	strb	r3, [r7, #9]
  row_data[2] = (ST7789VW_HEIGHT - 1) >> 8;
 80009a2:	2300      	movs	r3, #0
 80009a4:	72bb      	strb	r3, [r7, #10]
  row_data[3] = (ST7789VW_HEIGHT - 1) & 0xFF;
 80009a6:	23ef      	movs	r3, #239	@ 0xef
 80009a8:	72fb      	strb	r3, [r7, #11]
  ST7789VW_SendData(row_data, 4);
 80009aa:	f107 0308 	add.w	r3, r7, #8
 80009ae:	2104      	movs	r1, #4
 80009b0:	4618      	mov	r0, r3
 80009b2:	f7ff feb7 	bl	8000724 <ST7789VW_SendData>

  ST7789VW_SendCommand(0x2C); // RAMWR - Memory Write
 80009b6:	202c      	movs	r0, #44	@ 0x2c
 80009b8:	f7ff fe8e 	bl	80006d8 <ST7789VW_SendCommand>

  HAL_GPIO_WritePin(ST7789VW_DC_GPIO_Port, ST7789VW_DC_Pin, GPIO_PIN_SET); // DC = 1 para dados
 80009bc:	2201      	movs	r2, #1
 80009be:	2102      	movs	r1, #2
 80009c0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009c4:	f000 fbd0 	bl	8001168 <HAL_GPIO_WritePin>


  // Envia a cor para todos os pixels
  for (uint32_t i = 0; i < (uint32_t)ST7789VW_WIDTH * ST7789VW_HEIGHT; i++) {
 80009c8:	2300      	movs	r3, #0
 80009ca:	617b      	str	r3, [r7, #20]
 80009cc:	e017      	b.n	80009fe <ST7789VW_FillScreen2+0xa6>
    //ST7789VW_SendData(data, 2);
	  HAL_GPIO_WritePin(ST7789VW_CS_GPIO_Port, ST7789VW_CS_Pin, GPIO_PIN_RESET); // CS = 0 para selecionar
 80009ce:	2200      	movs	r2, #0
 80009d0:	2101      	movs	r1, #1
 80009d2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009d6:	f000 fbc7 	bl	8001168 <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(hspi_ptr, data, 2, HAL_MAX_DELAY);
 80009da:	4b0d      	ldr	r3, [pc, #52]	@ (8000a10 <ST7789VW_FillScreen2+0xb8>)
 80009dc:	6818      	ldr	r0, [r3, #0]
 80009de:	f107 0110 	add.w	r1, r7, #16
 80009e2:	f04f 33ff 	mov.w	r3, #4294967295
 80009e6:	2202      	movs	r2, #2
 80009e8:	f001 fa2b 	bl	8001e42 <HAL_SPI_Transmit>
	  HAL_GPIO_WritePin(ST7789VW_CS_GPIO_Port, ST7789VW_CS_Pin, GPIO_PIN_SET);   // CS = 1 para deselecionar
 80009ec:	2201      	movs	r2, #1
 80009ee:	2101      	movs	r1, #1
 80009f0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009f4:	f000 fbb8 	bl	8001168 <HAL_GPIO_WritePin>
  for (uint32_t i = 0; i < (uint32_t)ST7789VW_WIDTH * ST7789VW_HEIGHT; i++) {
 80009f8:	697b      	ldr	r3, [r7, #20]
 80009fa:	3301      	adds	r3, #1
 80009fc:	617b      	str	r3, [r7, #20]
 80009fe:	697b      	ldr	r3, [r7, #20]
 8000a00:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 8000a04:	d3e3      	bcc.n	80009ce <ST7789VW_FillScreen2+0x76>
  }
}
 8000a06:	bf00      	nop
 8000a08:	bf00      	nop
 8000a0a:	3718      	adds	r7, #24
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	200000cc 	.word	0x200000cc

08000a14 <ST7789VW_FillWindow>:

// Função para preencher toda a tela com uma única cor
void ST7789VW_FillWindow(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t _cor){
 8000a14:	b590      	push	{r4, r7, lr}
 8000a16:	b085      	sub	sp, #20
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	4604      	mov	r4, r0
 8000a1c:	4608      	mov	r0, r1
 8000a1e:	4611      	mov	r1, r2
 8000a20:	461a      	mov	r2, r3
 8000a22:	4623      	mov	r3, r4
 8000a24:	80fb      	strh	r3, [r7, #6]
 8000a26:	4603      	mov	r3, r0
 8000a28:	80bb      	strh	r3, [r7, #4]
 8000a2a:	460b      	mov	r3, r1
 8000a2c:	807b      	strh	r3, [r7, #2]
 8000a2e:	4613      	mov	r3, r2
 8000a30:	803b      	strh	r3, [r7, #0]
  uint8_t dataCor[2];
  dataCor[0] = (_cor >> 8) & 0xFF; // High byte
 8000a32:	8c3b      	ldrh	r3, [r7, #32]
 8000a34:	0a1b      	lsrs	r3, r3, #8
 8000a36:	b29b      	uxth	r3, r3
 8000a38:	b2db      	uxtb	r3, r3
 8000a3a:	723b      	strb	r3, [r7, #8]
  dataCor[1] = _cor & 0xFF;        // Low byte
 8000a3c:	8c3b      	ldrh	r3, [r7, #32]
 8000a3e:	b2db      	uxtb	r3, r3
 8000a40:	727b      	strb	r3, [r7, #9]

  J3_ST7789VW_SetWindows(x1, y1, x2, y2);
 8000a42:	883b      	ldrh	r3, [r7, #0]
 8000a44:	887a      	ldrh	r2, [r7, #2]
 8000a46:	88b9      	ldrh	r1, [r7, #4]
 8000a48:	88f8      	ldrh	r0, [r7, #6]
 8000a4a:	f7ff fe91 	bl	8000770 <J3_ST7789VW_SetWindows>

  ST7789VW_SendCommand(0x2C); // RAMWR - Memory Write
 8000a4e:	202c      	movs	r0, #44	@ 0x2c
 8000a50:	f7ff fe42 	bl	80006d8 <ST7789VW_SendCommand>

  // Envia a cor para todos os pixels
  for (uint32_t i = 0; i < (uint32_t)(x2-x1+1) * (y2-y1+1); i++) {
 8000a54:	2300      	movs	r3, #0
 8000a56:	60fb      	str	r3, [r7, #12]
 8000a58:	e008      	b.n	8000a6c <ST7789VW_FillWindow+0x58>
    ST7789VW_SendData(dataCor, 2);
 8000a5a:	f107 0308 	add.w	r3, r7, #8
 8000a5e:	2102      	movs	r1, #2
 8000a60:	4618      	mov	r0, r3
 8000a62:	f7ff fe5f 	bl	8000724 <ST7789VW_SendData>
  for (uint32_t i = 0; i < (uint32_t)(x2-x1+1) * (y2-y1+1); i++) {
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	3301      	adds	r3, #1
 8000a6a:	60fb      	str	r3, [r7, #12]
 8000a6c:	887a      	ldrh	r2, [r7, #2]
 8000a6e:	88fb      	ldrh	r3, [r7, #6]
 8000a70:	1ad3      	subs	r3, r2, r3
 8000a72:	3301      	adds	r3, #1
 8000a74:	4619      	mov	r1, r3
 8000a76:	883a      	ldrh	r2, [r7, #0]
 8000a78:	88bb      	ldrh	r3, [r7, #4]
 8000a7a:	1ad3      	subs	r3, r2, r3
 8000a7c:	3301      	adds	r3, #1
 8000a7e:	fb01 f303 	mul.w	r3, r1, r3
 8000a82:	68fa      	ldr	r2, [r7, #12]
 8000a84:	429a      	cmp	r2, r3
 8000a86:	d3e8      	bcc.n	8000a5a <ST7789VW_FillWindow+0x46>
    //HAL_Delay(2);
  }
}
 8000a88:	bf00      	nop
 8000a8a:	bf00      	nop
 8000a8c:	3714      	adds	r7, #20
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd90      	pop	{r4, r7, pc}
	...

08000a94 <ST7789VW_SetRotation>:

void ST7789VW_SetRotation(uint8_t rotation) {
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b084      	sub	sp, #16
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	71fb      	strb	r3, [r7, #7]
  uint8_t madctl = 0;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	73fb      	strb	r3, [r7, #15]

  switch (rotation) {
 8000aa2:	79fb      	ldrb	r3, [r7, #7]
 8000aa4:	2b03      	cmp	r3, #3
 8000aa6:	d817      	bhi.n	8000ad8 <ST7789VW_SetRotation+0x44>
 8000aa8:	a201      	add	r2, pc, #4	@ (adr r2, 8000ab0 <ST7789VW_SetRotation+0x1c>)
 8000aaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000aae:	bf00      	nop
 8000ab0:	08000ac1 	.word	0x08000ac1
 8000ab4:	08000ac7 	.word	0x08000ac7
 8000ab8:	08000acd 	.word	0x08000acd
 8000abc:	08000ad3 	.word	0x08000ad3
    case 0: // 0 degrees (Portrait)
      madctl = 0x00;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	73fb      	strb	r3, [r7, #15]
      break;
 8000ac4:	e009      	b.n	8000ada <ST7789VW_SetRotation+0x46>
    case 1: // 90 degrees (Landscape)
      madctl = 0x60;
 8000ac6:	2360      	movs	r3, #96	@ 0x60
 8000ac8:	73fb      	strb	r3, [r7, #15]
      break;
 8000aca:	e006      	b.n	8000ada <ST7789VW_SetRotation+0x46>
    case 2: // 180 degrees (Portrait inverted)
      madctl = 0xC0;
 8000acc:	23c0      	movs	r3, #192	@ 0xc0
 8000ace:	73fb      	strb	r3, [r7, #15]
      break;
 8000ad0:	e003      	b.n	8000ada <ST7789VW_SetRotation+0x46>
    case 3: // 270 degrees (Landscape inverted)
      madctl = 0xA0;
 8000ad2:	23a0      	movs	r3, #160	@ 0xa0
 8000ad4:	73fb      	strb	r3, [r7, #15]
      break;
 8000ad6:	e000      	b.n	8000ada <ST7789VW_SetRotation+0x46>
    default:
      break;
 8000ad8:	bf00      	nop
  }

  ST7789VW_SendCommand(0x36); // MADCTL
 8000ada:	2036      	movs	r0, #54	@ 0x36
 8000adc:	f7ff fdfc 	bl	80006d8 <ST7789VW_SendCommand>
  ST7789VW_SendData(&madctl, 1);
 8000ae0:	f107 030f 	add.w	r3, r7, #15
 8000ae4:	2101      	movs	r1, #1
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f7ff fe1c 	bl	8000724 <ST7789VW_SendData>
}
 8000aec:	bf00      	nop
 8000aee:	3710      	adds	r7, #16
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}

08000af4 <main_nelsitoboy>:

#include <stdlib.h>
#include <time.h>


int main_nelsitoboy(void){
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0

	// Inicialize o display
    ST7789VW_Init(&hspi1);
 8000af8:	4809      	ldr	r0, [pc, #36]	@ (8000b20 <main_nelsitoboy+0x2c>)
 8000afa:	f7ff fe97 	bl	800082c <ST7789VW_Init>
    // Inicializa o gerador de números aleatórios com base no tempo
    //srand(time(NULL));


    while(1){
        ST7789VW_FillScreen2(COLOR_LIGHT_GRAY);
 8000afe:	f24c 6018 	movw	r0, #50712	@ 0xc618
 8000b02:	f7ff ff29 	bl	8000958 <ST7789VW_FillScreen2>
        HAL_Delay(5000);
 8000b06:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000b0a:	f000 f8a5 	bl	8000c58 <HAL_Delay>

        main_game();
 8000b0e:	f7ff fd13 	bl	8000538 <main_game>

        HAL_Delay(5000);
 8000b12:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000b16:	f000 f89f 	bl	8000c58 <HAL_Delay>
    while(1){
 8000b1a:	bf00      	nop
 8000b1c:	e7ef      	b.n	8000afe <main_nelsitoboy+0xa>
 8000b1e:	bf00      	nop
 8000b20:	20000068 	.word	0x20000068

08000b24 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b24:	480d      	ldr	r0, [pc, #52]	@ (8000b5c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b26:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b28:	f7ff fcf4 	bl	8000514 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b2c:	480c      	ldr	r0, [pc, #48]	@ (8000b60 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b2e:	490d      	ldr	r1, [pc, #52]	@ (8000b64 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b30:	4a0d      	ldr	r2, [pc, #52]	@ (8000b68 <LoopForever+0xe>)
  movs r3, #0
 8000b32:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000b34:	e002      	b.n	8000b3c <LoopCopyDataInit>

08000b36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b3a:	3304      	adds	r3, #4

08000b3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b40:	d3f9      	bcc.n	8000b36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b42:	4a0a      	ldr	r2, [pc, #40]	@ (8000b6c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b44:	4c0a      	ldr	r4, [pc, #40]	@ (8000b70 <LoopForever+0x16>)
  movs r3, #0
 8000b46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b48:	e001      	b.n	8000b4e <LoopFillZerobss>

08000b4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b4c:	3204      	adds	r2, #4

08000b4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b50:	d3fb      	bcc.n	8000b4a <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8000b52:	f001 fc59 	bl	8002408 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b56:	f7ff fba9 	bl	80002ac <main>

08000b5a <LoopForever>:

LoopForever:
    b LoopForever
 8000b5a:	e7fe      	b.n	8000b5a <LoopForever>
  ldr   r0, =_estack
 8000b5c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000b60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b64:	2000004c 	.word	0x2000004c
  ldr r2, =_sidata
 8000b68:	08002580 	.word	0x08002580
  ldr r2, =_sbss
 8000b6c:	2000004c 	.word	0x2000004c
  ldr r4, =_ebss
 8000b70:	200000d4 	.word	0x200000d4

08000b74 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b74:	e7fe      	b.n	8000b74 <ADC1_2_IRQHandler>

08000b76 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b76:	b580      	push	{r7, lr}
 8000b78:	b082      	sub	sp, #8
 8000b7a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b80:	2003      	movs	r0, #3
 8000b82:	f000 f93d 	bl	8000e00 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b86:	200f      	movs	r0, #15
 8000b88:	f000 f80e 	bl	8000ba8 <HAL_InitTick>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d002      	beq.n	8000b98 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b92:	2301      	movs	r3, #1
 8000b94:	71fb      	strb	r3, [r7, #7]
 8000b96:	e001      	b.n	8000b9c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b98:	f7ff fc68 	bl	800046c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b9c:	79fb      	ldrb	r3, [r7, #7]

}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	3708      	adds	r7, #8
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
	...

08000ba8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b084      	sub	sp, #16
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000bb4:	4b16      	ldr	r3, [pc, #88]	@ (8000c10 <HAL_InitTick+0x68>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d022      	beq.n	8000c02 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000bbc:	4b15      	ldr	r3, [pc, #84]	@ (8000c14 <HAL_InitTick+0x6c>)
 8000bbe:	681a      	ldr	r2, [r3, #0]
 8000bc0:	4b13      	ldr	r3, [pc, #76]	@ (8000c10 <HAL_InitTick+0x68>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000bc8:	fbb1 f3f3 	udiv	r3, r1, r3
 8000bcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f000 f93a 	bl	8000e4a <HAL_SYSTICK_Config>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d10f      	bne.n	8000bfc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	2b0f      	cmp	r3, #15
 8000be0:	d809      	bhi.n	8000bf6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000be2:	2200      	movs	r2, #0
 8000be4:	6879      	ldr	r1, [r7, #4]
 8000be6:	f04f 30ff 	mov.w	r0, #4294967295
 8000bea:	f000 f914 	bl	8000e16 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bee:	4a0a      	ldr	r2, [pc, #40]	@ (8000c18 <HAL_InitTick+0x70>)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	6013      	str	r3, [r2, #0]
 8000bf4:	e007      	b.n	8000c06 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	73fb      	strb	r3, [r7, #15]
 8000bfa:	e004      	b.n	8000c06 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	73fb      	strb	r3, [r7, #15]
 8000c00:	e001      	b.n	8000c06 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c02:	2301      	movs	r3, #1
 8000c04:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c06:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c08:	4618      	mov	r0, r3
 8000c0a:	3710      	adds	r7, #16
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	20000048 	.word	0x20000048
 8000c14:	20000000 	.word	0x20000000
 8000c18:	20000044 	.word	0x20000044

08000c1c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c20:	4b05      	ldr	r3, [pc, #20]	@ (8000c38 <HAL_IncTick+0x1c>)
 8000c22:	681a      	ldr	r2, [r3, #0]
 8000c24:	4b05      	ldr	r3, [pc, #20]	@ (8000c3c <HAL_IncTick+0x20>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4413      	add	r3, r2
 8000c2a:	4a03      	ldr	r2, [pc, #12]	@ (8000c38 <HAL_IncTick+0x1c>)
 8000c2c:	6013      	str	r3, [r2, #0]
}
 8000c2e:	bf00      	nop
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr
 8000c38:	200000d0 	.word	0x200000d0
 8000c3c:	20000048 	.word	0x20000048

08000c40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  return uwTick;
 8000c44:	4b03      	ldr	r3, [pc, #12]	@ (8000c54 <HAL_GetTick+0x14>)
 8000c46:	681b      	ldr	r3, [r3, #0]
}
 8000c48:	4618      	mov	r0, r3
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	200000d0 	.word	0x200000d0

08000c58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b084      	sub	sp, #16
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c60:	f7ff ffee 	bl	8000c40 <HAL_GetTick>
 8000c64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c70:	d004      	beq.n	8000c7c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c72:	4b09      	ldr	r3, [pc, #36]	@ (8000c98 <HAL_Delay+0x40>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	68fa      	ldr	r2, [r7, #12]
 8000c78:	4413      	add	r3, r2
 8000c7a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c7c:	bf00      	nop
 8000c7e:	f7ff ffdf 	bl	8000c40 <HAL_GetTick>
 8000c82:	4602      	mov	r2, r0
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	1ad3      	subs	r3, r2, r3
 8000c88:	68fa      	ldr	r2, [r7, #12]
 8000c8a:	429a      	cmp	r2, r3
 8000c8c:	d8f7      	bhi.n	8000c7e <HAL_Delay+0x26>
  {
  }
}
 8000c8e:	bf00      	nop
 8000c90:	bf00      	nop
 8000c92:	3710      	adds	r7, #16
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	20000048 	.word	0x20000048

08000c9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b085      	sub	sp, #20
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	f003 0307 	and.w	r3, r3, #7
 8000caa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cac:	4b0c      	ldr	r3, [pc, #48]	@ (8000ce0 <__NVIC_SetPriorityGrouping+0x44>)
 8000cae:	68db      	ldr	r3, [r3, #12]
 8000cb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cb2:	68ba      	ldr	r2, [r7, #8]
 8000cb4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000cb8:	4013      	ands	r3, r2
 8000cba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cc0:	68bb      	ldr	r3, [r7, #8]
 8000cc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cc4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000cc8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ccc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cce:	4a04      	ldr	r2, [pc, #16]	@ (8000ce0 <__NVIC_SetPriorityGrouping+0x44>)
 8000cd0:	68bb      	ldr	r3, [r7, #8]
 8000cd2:	60d3      	str	r3, [r2, #12]
}
 8000cd4:	bf00      	nop
 8000cd6:	3714      	adds	r7, #20
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr
 8000ce0:	e000ed00 	.word	0xe000ed00

08000ce4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ce8:	4b04      	ldr	r3, [pc, #16]	@ (8000cfc <__NVIC_GetPriorityGrouping+0x18>)
 8000cea:	68db      	ldr	r3, [r3, #12]
 8000cec:	0a1b      	lsrs	r3, r3, #8
 8000cee:	f003 0307 	and.w	r3, r3, #7
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr
 8000cfc:	e000ed00 	.word	0xe000ed00

08000d00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b083      	sub	sp, #12
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	4603      	mov	r3, r0
 8000d08:	6039      	str	r1, [r7, #0]
 8000d0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	db0a      	blt.n	8000d2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	b2da      	uxtb	r2, r3
 8000d18:	490c      	ldr	r1, [pc, #48]	@ (8000d4c <__NVIC_SetPriority+0x4c>)
 8000d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1e:	0112      	lsls	r2, r2, #4
 8000d20:	b2d2      	uxtb	r2, r2
 8000d22:	440b      	add	r3, r1
 8000d24:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d28:	e00a      	b.n	8000d40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	b2da      	uxtb	r2, r3
 8000d2e:	4908      	ldr	r1, [pc, #32]	@ (8000d50 <__NVIC_SetPriority+0x50>)
 8000d30:	79fb      	ldrb	r3, [r7, #7]
 8000d32:	f003 030f 	and.w	r3, r3, #15
 8000d36:	3b04      	subs	r3, #4
 8000d38:	0112      	lsls	r2, r2, #4
 8000d3a:	b2d2      	uxtb	r2, r2
 8000d3c:	440b      	add	r3, r1
 8000d3e:	761a      	strb	r2, [r3, #24]
}
 8000d40:	bf00      	nop
 8000d42:	370c      	adds	r7, #12
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr
 8000d4c:	e000e100 	.word	0xe000e100
 8000d50:	e000ed00 	.word	0xe000ed00

08000d54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b089      	sub	sp, #36	@ 0x24
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	60f8      	str	r0, [r7, #12]
 8000d5c:	60b9      	str	r1, [r7, #8]
 8000d5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	f003 0307 	and.w	r3, r3, #7
 8000d66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d68:	69fb      	ldr	r3, [r7, #28]
 8000d6a:	f1c3 0307 	rsb	r3, r3, #7
 8000d6e:	2b04      	cmp	r3, #4
 8000d70:	bf28      	it	cs
 8000d72:	2304      	movcs	r3, #4
 8000d74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d76:	69fb      	ldr	r3, [r7, #28]
 8000d78:	3304      	adds	r3, #4
 8000d7a:	2b06      	cmp	r3, #6
 8000d7c:	d902      	bls.n	8000d84 <NVIC_EncodePriority+0x30>
 8000d7e:	69fb      	ldr	r3, [r7, #28]
 8000d80:	3b03      	subs	r3, #3
 8000d82:	e000      	b.n	8000d86 <NVIC_EncodePriority+0x32>
 8000d84:	2300      	movs	r3, #0
 8000d86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d88:	f04f 32ff 	mov.w	r2, #4294967295
 8000d8c:	69bb      	ldr	r3, [r7, #24]
 8000d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d92:	43da      	mvns	r2, r3
 8000d94:	68bb      	ldr	r3, [r7, #8]
 8000d96:	401a      	ands	r2, r3
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d9c:	f04f 31ff 	mov.w	r1, #4294967295
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	fa01 f303 	lsl.w	r3, r1, r3
 8000da6:	43d9      	mvns	r1, r3
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dac:	4313      	orrs	r3, r2
         );
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	3724      	adds	r7, #36	@ 0x24
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
	...

08000dbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	3b01      	subs	r3, #1
 8000dc8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000dcc:	d301      	bcc.n	8000dd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dce:	2301      	movs	r3, #1
 8000dd0:	e00f      	b.n	8000df2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dd2:	4a0a      	ldr	r2, [pc, #40]	@ (8000dfc <SysTick_Config+0x40>)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	3b01      	subs	r3, #1
 8000dd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dda:	210f      	movs	r1, #15
 8000ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8000de0:	f7ff ff8e 	bl	8000d00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000de4:	4b05      	ldr	r3, [pc, #20]	@ (8000dfc <SysTick_Config+0x40>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dea:	4b04      	ldr	r3, [pc, #16]	@ (8000dfc <SysTick_Config+0x40>)
 8000dec:	2207      	movs	r2, #7
 8000dee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000df0:	2300      	movs	r3, #0
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	3708      	adds	r7, #8
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	e000e010 	.word	0xe000e010

08000e00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e08:	6878      	ldr	r0, [r7, #4]
 8000e0a:	f7ff ff47 	bl	8000c9c <__NVIC_SetPriorityGrouping>
}
 8000e0e:	bf00      	nop
 8000e10:	3708      	adds	r7, #8
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}

08000e16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e16:	b580      	push	{r7, lr}
 8000e18:	b086      	sub	sp, #24
 8000e1a:	af00      	add	r7, sp, #0
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	60b9      	str	r1, [r7, #8]
 8000e20:	607a      	str	r2, [r7, #4]
 8000e22:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e24:	f7ff ff5e 	bl	8000ce4 <__NVIC_GetPriorityGrouping>
 8000e28:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e2a:	687a      	ldr	r2, [r7, #4]
 8000e2c:	68b9      	ldr	r1, [r7, #8]
 8000e2e:	6978      	ldr	r0, [r7, #20]
 8000e30:	f7ff ff90 	bl	8000d54 <NVIC_EncodePriority>
 8000e34:	4602      	mov	r2, r0
 8000e36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e3a:	4611      	mov	r1, r2
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f7ff ff5f 	bl	8000d00 <__NVIC_SetPriority>
}
 8000e42:	bf00      	nop
 8000e44:	3718      	adds	r7, #24
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}

08000e4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e4a:	b580      	push	{r7, lr}
 8000e4c:	b082      	sub	sp, #8
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e52:	6878      	ldr	r0, [r7, #4]
 8000e54:	f7ff ffb2 	bl	8000dbc <SysTick_Config>
 8000e58:	4603      	mov	r3, r0
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3708      	adds	r7, #8
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
	...

08000e64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b087      	sub	sp, #28
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
 8000e6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000e72:	e15a      	b.n	800112a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	681a      	ldr	r2, [r3, #0]
 8000e78:	2101      	movs	r1, #1
 8000e7a:	697b      	ldr	r3, [r7, #20]
 8000e7c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e80:	4013      	ands	r3, r2
 8000e82:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	f000 814c 	beq.w	8001124 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	f003 0303 	and.w	r3, r3, #3
 8000e94:	2b01      	cmp	r3, #1
 8000e96:	d005      	beq.n	8000ea4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000ea0:	2b02      	cmp	r3, #2
 8000ea2:	d130      	bne.n	8000f06 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	689b      	ldr	r3, [r3, #8]
 8000ea8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000eaa:	697b      	ldr	r3, [r7, #20]
 8000eac:	005b      	lsls	r3, r3, #1
 8000eae:	2203      	movs	r2, #3
 8000eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb4:	43db      	mvns	r3, r3
 8000eb6:	693a      	ldr	r2, [r7, #16]
 8000eb8:	4013      	ands	r3, r2
 8000eba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	68da      	ldr	r2, [r3, #12]
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	005b      	lsls	r3, r3, #1
 8000ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec8:	693a      	ldr	r2, [r7, #16]
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	693a      	ldr	r2, [r7, #16]
 8000ed2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000eda:	2201      	movs	r2, #1
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee2:	43db      	mvns	r3, r3
 8000ee4:	693a      	ldr	r2, [r7, #16]
 8000ee6:	4013      	ands	r3, r2
 8000ee8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	091b      	lsrs	r3, r3, #4
 8000ef0:	f003 0201 	and.w	r2, r3, #1
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8000efa:	693a      	ldr	r2, [r7, #16]
 8000efc:	4313      	orrs	r3, r2
 8000efe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	693a      	ldr	r2, [r7, #16]
 8000f04:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	f003 0303 	and.w	r3, r3, #3
 8000f0e:	2b03      	cmp	r3, #3
 8000f10:	d017      	beq.n	8000f42 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	68db      	ldr	r3, [r3, #12]
 8000f16:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	005b      	lsls	r3, r3, #1
 8000f1c:	2203      	movs	r2, #3
 8000f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f22:	43db      	mvns	r3, r3
 8000f24:	693a      	ldr	r2, [r7, #16]
 8000f26:	4013      	ands	r3, r2
 8000f28:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	689a      	ldr	r2, [r3, #8]
 8000f2e:	697b      	ldr	r3, [r7, #20]
 8000f30:	005b      	lsls	r3, r3, #1
 8000f32:	fa02 f303 	lsl.w	r3, r2, r3
 8000f36:	693a      	ldr	r2, [r7, #16]
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	693a      	ldr	r2, [r7, #16]
 8000f40:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	f003 0303 	and.w	r3, r3, #3
 8000f4a:	2b02      	cmp	r3, #2
 8000f4c:	d123      	bne.n	8000f96 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	08da      	lsrs	r2, r3, #3
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	3208      	adds	r2, #8
 8000f56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f5a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	f003 0307 	and.w	r3, r3, #7
 8000f62:	009b      	lsls	r3, r3, #2
 8000f64:	220f      	movs	r2, #15
 8000f66:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6a:	43db      	mvns	r3, r3
 8000f6c:	693a      	ldr	r2, [r7, #16]
 8000f6e:	4013      	ands	r3, r2
 8000f70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	691a      	ldr	r2, [r3, #16]
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	f003 0307 	and.w	r3, r3, #7
 8000f7c:	009b      	lsls	r3, r3, #2
 8000f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f82:	693a      	ldr	r2, [r7, #16]
 8000f84:	4313      	orrs	r3, r2
 8000f86:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	08da      	lsrs	r2, r3, #3
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	3208      	adds	r2, #8
 8000f90:	6939      	ldr	r1, [r7, #16]
 8000f92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	005b      	lsls	r3, r3, #1
 8000fa0:	2203      	movs	r2, #3
 8000fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa6:	43db      	mvns	r3, r3
 8000fa8:	693a      	ldr	r2, [r7, #16]
 8000faa:	4013      	ands	r3, r2
 8000fac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	f003 0203 	and.w	r2, r3, #3
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	005b      	lsls	r3, r3, #1
 8000fba:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbe:	693a      	ldr	r2, [r7, #16]
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	693a      	ldr	r2, [r7, #16]
 8000fc8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	f000 80a6 	beq.w	8001124 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fd8:	4b5b      	ldr	r3, [pc, #364]	@ (8001148 <HAL_GPIO_Init+0x2e4>)
 8000fda:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fdc:	4a5a      	ldr	r2, [pc, #360]	@ (8001148 <HAL_GPIO_Init+0x2e4>)
 8000fde:	f043 0301 	orr.w	r3, r3, #1
 8000fe2:	6613      	str	r3, [r2, #96]	@ 0x60
 8000fe4:	4b58      	ldr	r3, [pc, #352]	@ (8001148 <HAL_GPIO_Init+0x2e4>)
 8000fe6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fe8:	f003 0301 	and.w	r3, r3, #1
 8000fec:	60bb      	str	r3, [r7, #8]
 8000fee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ff0:	4a56      	ldr	r2, [pc, #344]	@ (800114c <HAL_GPIO_Init+0x2e8>)
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	089b      	lsrs	r3, r3, #2
 8000ff6:	3302      	adds	r3, #2
 8000ff8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ffc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	f003 0303 	and.w	r3, r3, #3
 8001004:	009b      	lsls	r3, r3, #2
 8001006:	220f      	movs	r2, #15
 8001008:	fa02 f303 	lsl.w	r3, r2, r3
 800100c:	43db      	mvns	r3, r3
 800100e:	693a      	ldr	r2, [r7, #16]
 8001010:	4013      	ands	r3, r2
 8001012:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800101a:	d01f      	beq.n	800105c <HAL_GPIO_Init+0x1f8>
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	4a4c      	ldr	r2, [pc, #304]	@ (8001150 <HAL_GPIO_Init+0x2ec>)
 8001020:	4293      	cmp	r3, r2
 8001022:	d019      	beq.n	8001058 <HAL_GPIO_Init+0x1f4>
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	4a4b      	ldr	r2, [pc, #300]	@ (8001154 <HAL_GPIO_Init+0x2f0>)
 8001028:	4293      	cmp	r3, r2
 800102a:	d013      	beq.n	8001054 <HAL_GPIO_Init+0x1f0>
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	4a4a      	ldr	r2, [pc, #296]	@ (8001158 <HAL_GPIO_Init+0x2f4>)
 8001030:	4293      	cmp	r3, r2
 8001032:	d00d      	beq.n	8001050 <HAL_GPIO_Init+0x1ec>
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	4a49      	ldr	r2, [pc, #292]	@ (800115c <HAL_GPIO_Init+0x2f8>)
 8001038:	4293      	cmp	r3, r2
 800103a:	d007      	beq.n	800104c <HAL_GPIO_Init+0x1e8>
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	4a48      	ldr	r2, [pc, #288]	@ (8001160 <HAL_GPIO_Init+0x2fc>)
 8001040:	4293      	cmp	r3, r2
 8001042:	d101      	bne.n	8001048 <HAL_GPIO_Init+0x1e4>
 8001044:	2305      	movs	r3, #5
 8001046:	e00a      	b.n	800105e <HAL_GPIO_Init+0x1fa>
 8001048:	2306      	movs	r3, #6
 800104a:	e008      	b.n	800105e <HAL_GPIO_Init+0x1fa>
 800104c:	2304      	movs	r3, #4
 800104e:	e006      	b.n	800105e <HAL_GPIO_Init+0x1fa>
 8001050:	2303      	movs	r3, #3
 8001052:	e004      	b.n	800105e <HAL_GPIO_Init+0x1fa>
 8001054:	2302      	movs	r3, #2
 8001056:	e002      	b.n	800105e <HAL_GPIO_Init+0x1fa>
 8001058:	2301      	movs	r3, #1
 800105a:	e000      	b.n	800105e <HAL_GPIO_Init+0x1fa>
 800105c:	2300      	movs	r3, #0
 800105e:	697a      	ldr	r2, [r7, #20]
 8001060:	f002 0203 	and.w	r2, r2, #3
 8001064:	0092      	lsls	r2, r2, #2
 8001066:	4093      	lsls	r3, r2
 8001068:	693a      	ldr	r2, [r7, #16]
 800106a:	4313      	orrs	r3, r2
 800106c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800106e:	4937      	ldr	r1, [pc, #220]	@ (800114c <HAL_GPIO_Init+0x2e8>)
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	089b      	lsrs	r3, r3, #2
 8001074:	3302      	adds	r3, #2
 8001076:	693a      	ldr	r2, [r7, #16]
 8001078:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800107c:	4b39      	ldr	r3, [pc, #228]	@ (8001164 <HAL_GPIO_Init+0x300>)
 800107e:	689b      	ldr	r3, [r3, #8]
 8001080:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	43db      	mvns	r3, r3
 8001086:	693a      	ldr	r2, [r7, #16]
 8001088:	4013      	ands	r3, r2
 800108a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001094:	2b00      	cmp	r3, #0
 8001096:	d003      	beq.n	80010a0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001098:	693a      	ldr	r2, [r7, #16]
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	4313      	orrs	r3, r2
 800109e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80010a0:	4a30      	ldr	r2, [pc, #192]	@ (8001164 <HAL_GPIO_Init+0x300>)
 80010a2:	693b      	ldr	r3, [r7, #16]
 80010a4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80010a6:	4b2f      	ldr	r3, [pc, #188]	@ (8001164 <HAL_GPIO_Init+0x300>)
 80010a8:	68db      	ldr	r3, [r3, #12]
 80010aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	43db      	mvns	r3, r3
 80010b0:	693a      	ldr	r2, [r7, #16]
 80010b2:	4013      	ands	r3, r2
 80010b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d003      	beq.n	80010ca <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80010c2:	693a      	ldr	r2, [r7, #16]
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	4313      	orrs	r3, r2
 80010c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80010ca:	4a26      	ldr	r2, [pc, #152]	@ (8001164 <HAL_GPIO_Init+0x300>)
 80010cc:	693b      	ldr	r3, [r7, #16]
 80010ce:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80010d0:	4b24      	ldr	r3, [pc, #144]	@ (8001164 <HAL_GPIO_Init+0x300>)
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	43db      	mvns	r3, r3
 80010da:	693a      	ldr	r2, [r7, #16]
 80010dc:	4013      	ands	r3, r2
 80010de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d003      	beq.n	80010f4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80010ec:	693a      	ldr	r2, [r7, #16]
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	4313      	orrs	r3, r2
 80010f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80010f4:	4a1b      	ldr	r2, [pc, #108]	@ (8001164 <HAL_GPIO_Init+0x300>)
 80010f6:	693b      	ldr	r3, [r7, #16]
 80010f8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80010fa:	4b1a      	ldr	r3, [pc, #104]	@ (8001164 <HAL_GPIO_Init+0x300>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	43db      	mvns	r3, r3
 8001104:	693a      	ldr	r2, [r7, #16]
 8001106:	4013      	ands	r3, r2
 8001108:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001112:	2b00      	cmp	r3, #0
 8001114:	d003      	beq.n	800111e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001116:	693a      	ldr	r2, [r7, #16]
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	4313      	orrs	r3, r2
 800111c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800111e:	4a11      	ldr	r2, [pc, #68]	@ (8001164 <HAL_GPIO_Init+0x300>)
 8001120:	693b      	ldr	r3, [r7, #16]
 8001122:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	3301      	adds	r3, #1
 8001128:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	fa22 f303 	lsr.w	r3, r2, r3
 8001134:	2b00      	cmp	r3, #0
 8001136:	f47f ae9d 	bne.w	8000e74 <HAL_GPIO_Init+0x10>
  }
}
 800113a:	bf00      	nop
 800113c:	bf00      	nop
 800113e:	371c      	adds	r7, #28
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr
 8001148:	40021000 	.word	0x40021000
 800114c:	40010000 	.word	0x40010000
 8001150:	48000400 	.word	0x48000400
 8001154:	48000800 	.word	0x48000800
 8001158:	48000c00 	.word	0x48000c00
 800115c:	48001000 	.word	0x48001000
 8001160:	48001400 	.word	0x48001400
 8001164:	40010400 	.word	0x40010400

08001168 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001168:	b480      	push	{r7}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
 8001170:	460b      	mov	r3, r1
 8001172:	807b      	strh	r3, [r7, #2]
 8001174:	4613      	mov	r3, r2
 8001176:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001178:	787b      	ldrb	r3, [r7, #1]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d003      	beq.n	8001186 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800117e:	887a      	ldrh	r2, [r7, #2]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001184:	e002      	b.n	800118c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001186:	887a      	ldrh	r2, [r7, #2]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800118c:	bf00      	nop
 800118e:	370c      	adds	r7, #12
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr

08001198 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001198:	b480      	push	{r7}
 800119a:	b085      	sub	sp, #20
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d141      	bne.n	800122a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80011a6:	4b4b      	ldr	r3, [pc, #300]	@ (80012d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80011ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80011b2:	d131      	bne.n	8001218 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80011b4:	4b47      	ldr	r3, [pc, #284]	@ (80012d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80011ba:	4a46      	ldr	r2, [pc, #280]	@ (80012d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80011c0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80011c4:	4b43      	ldr	r3, [pc, #268]	@ (80012d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80011cc:	4a41      	ldr	r2, [pc, #260]	@ (80012d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011ce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80011d2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80011d4:	4b40      	ldr	r3, [pc, #256]	@ (80012d8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	2232      	movs	r2, #50	@ 0x32
 80011da:	fb02 f303 	mul.w	r3, r2, r3
 80011de:	4a3f      	ldr	r2, [pc, #252]	@ (80012dc <HAL_PWREx_ControlVoltageScaling+0x144>)
 80011e0:	fba2 2303 	umull	r2, r3, r2, r3
 80011e4:	0c9b      	lsrs	r3, r3, #18
 80011e6:	3301      	adds	r3, #1
 80011e8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011ea:	e002      	b.n	80011f2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	3b01      	subs	r3, #1
 80011f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011f2:	4b38      	ldr	r3, [pc, #224]	@ (80012d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011f4:	695b      	ldr	r3, [r3, #20]
 80011f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80011fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80011fe:	d102      	bne.n	8001206 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d1f2      	bne.n	80011ec <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001206:	4b33      	ldr	r3, [pc, #204]	@ (80012d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001208:	695b      	ldr	r3, [r3, #20]
 800120a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800120e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001212:	d158      	bne.n	80012c6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001214:	2303      	movs	r3, #3
 8001216:	e057      	b.n	80012c8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001218:	4b2e      	ldr	r3, [pc, #184]	@ (80012d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800121a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800121e:	4a2d      	ldr	r2, [pc, #180]	@ (80012d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001220:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001224:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001228:	e04d      	b.n	80012c6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001230:	d141      	bne.n	80012b6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001232:	4b28      	ldr	r3, [pc, #160]	@ (80012d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800123a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800123e:	d131      	bne.n	80012a4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001240:	4b24      	ldr	r3, [pc, #144]	@ (80012d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001242:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001246:	4a23      	ldr	r2, [pc, #140]	@ (80012d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001248:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800124c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001250:	4b20      	ldr	r3, [pc, #128]	@ (80012d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001258:	4a1e      	ldr	r2, [pc, #120]	@ (80012d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800125a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800125e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001260:	4b1d      	ldr	r3, [pc, #116]	@ (80012d8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	2232      	movs	r2, #50	@ 0x32
 8001266:	fb02 f303 	mul.w	r3, r2, r3
 800126a:	4a1c      	ldr	r2, [pc, #112]	@ (80012dc <HAL_PWREx_ControlVoltageScaling+0x144>)
 800126c:	fba2 2303 	umull	r2, r3, r2, r3
 8001270:	0c9b      	lsrs	r3, r3, #18
 8001272:	3301      	adds	r3, #1
 8001274:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001276:	e002      	b.n	800127e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	3b01      	subs	r3, #1
 800127c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800127e:	4b15      	ldr	r3, [pc, #84]	@ (80012d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001280:	695b      	ldr	r3, [r3, #20]
 8001282:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001286:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800128a:	d102      	bne.n	8001292 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d1f2      	bne.n	8001278 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001292:	4b10      	ldr	r3, [pc, #64]	@ (80012d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001294:	695b      	ldr	r3, [r3, #20]
 8001296:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800129a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800129e:	d112      	bne.n	80012c6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80012a0:	2303      	movs	r3, #3
 80012a2:	e011      	b.n	80012c8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80012a4:	4b0b      	ldr	r3, [pc, #44]	@ (80012d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80012aa:	4a0a      	ldr	r2, [pc, #40]	@ (80012d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012b0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80012b4:	e007      	b.n	80012c6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80012b6:	4b07      	ldr	r3, [pc, #28]	@ (80012d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80012be:	4a05      	ldr	r2, [pc, #20]	@ (80012d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012c0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80012c4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80012c6:	2300      	movs	r3, #0
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	3714      	adds	r7, #20
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr
 80012d4:	40007000 	.word	0x40007000
 80012d8:	20000000 	.word	0x20000000
 80012dc:	431bde83 	.word	0x431bde83

080012e0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80012e4:	4b05      	ldr	r3, [pc, #20]	@ (80012fc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80012e6:	689b      	ldr	r3, [r3, #8]
 80012e8:	4a04      	ldr	r2, [pc, #16]	@ (80012fc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80012ea:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012ee:	6093      	str	r3, [r2, #8]
}
 80012f0:	bf00      	nop
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	40007000 	.word	0x40007000

08001300 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b088      	sub	sp, #32
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d101      	bne.n	8001312 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800130e:	2301      	movs	r3, #1
 8001310:	e2fe      	b.n	8001910 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f003 0301 	and.w	r3, r3, #1
 800131a:	2b00      	cmp	r3, #0
 800131c:	d075      	beq.n	800140a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800131e:	4b97      	ldr	r3, [pc, #604]	@ (800157c <HAL_RCC_OscConfig+0x27c>)
 8001320:	689b      	ldr	r3, [r3, #8]
 8001322:	f003 030c 	and.w	r3, r3, #12
 8001326:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001328:	4b94      	ldr	r3, [pc, #592]	@ (800157c <HAL_RCC_OscConfig+0x27c>)
 800132a:	68db      	ldr	r3, [r3, #12]
 800132c:	f003 0303 	and.w	r3, r3, #3
 8001330:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001332:	69bb      	ldr	r3, [r7, #24]
 8001334:	2b0c      	cmp	r3, #12
 8001336:	d102      	bne.n	800133e <HAL_RCC_OscConfig+0x3e>
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	2b03      	cmp	r3, #3
 800133c:	d002      	beq.n	8001344 <HAL_RCC_OscConfig+0x44>
 800133e:	69bb      	ldr	r3, [r7, #24]
 8001340:	2b08      	cmp	r3, #8
 8001342:	d10b      	bne.n	800135c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001344:	4b8d      	ldr	r3, [pc, #564]	@ (800157c <HAL_RCC_OscConfig+0x27c>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800134c:	2b00      	cmp	r3, #0
 800134e:	d05b      	beq.n	8001408 <HAL_RCC_OscConfig+0x108>
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d157      	bne.n	8001408 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001358:	2301      	movs	r3, #1
 800135a:	e2d9      	b.n	8001910 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001364:	d106      	bne.n	8001374 <HAL_RCC_OscConfig+0x74>
 8001366:	4b85      	ldr	r3, [pc, #532]	@ (800157c <HAL_RCC_OscConfig+0x27c>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4a84      	ldr	r2, [pc, #528]	@ (800157c <HAL_RCC_OscConfig+0x27c>)
 800136c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001370:	6013      	str	r3, [r2, #0]
 8001372:	e01d      	b.n	80013b0 <HAL_RCC_OscConfig+0xb0>
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800137c:	d10c      	bne.n	8001398 <HAL_RCC_OscConfig+0x98>
 800137e:	4b7f      	ldr	r3, [pc, #508]	@ (800157c <HAL_RCC_OscConfig+0x27c>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4a7e      	ldr	r2, [pc, #504]	@ (800157c <HAL_RCC_OscConfig+0x27c>)
 8001384:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001388:	6013      	str	r3, [r2, #0]
 800138a:	4b7c      	ldr	r3, [pc, #496]	@ (800157c <HAL_RCC_OscConfig+0x27c>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4a7b      	ldr	r2, [pc, #492]	@ (800157c <HAL_RCC_OscConfig+0x27c>)
 8001390:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001394:	6013      	str	r3, [r2, #0]
 8001396:	e00b      	b.n	80013b0 <HAL_RCC_OscConfig+0xb0>
 8001398:	4b78      	ldr	r3, [pc, #480]	@ (800157c <HAL_RCC_OscConfig+0x27c>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a77      	ldr	r2, [pc, #476]	@ (800157c <HAL_RCC_OscConfig+0x27c>)
 800139e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80013a2:	6013      	str	r3, [r2, #0]
 80013a4:	4b75      	ldr	r3, [pc, #468]	@ (800157c <HAL_RCC_OscConfig+0x27c>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a74      	ldr	r2, [pc, #464]	@ (800157c <HAL_RCC_OscConfig+0x27c>)
 80013aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80013ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d013      	beq.n	80013e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013b8:	f7ff fc42 	bl	8000c40 <HAL_GetTick>
 80013bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013be:	e008      	b.n	80013d2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013c0:	f7ff fc3e 	bl	8000c40 <HAL_GetTick>
 80013c4:	4602      	mov	r2, r0
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	2b64      	cmp	r3, #100	@ 0x64
 80013cc:	d901      	bls.n	80013d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80013ce:	2303      	movs	r3, #3
 80013d0:	e29e      	b.n	8001910 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013d2:	4b6a      	ldr	r3, [pc, #424]	@ (800157c <HAL_RCC_OscConfig+0x27c>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d0f0      	beq.n	80013c0 <HAL_RCC_OscConfig+0xc0>
 80013de:	e014      	b.n	800140a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013e0:	f7ff fc2e 	bl	8000c40 <HAL_GetTick>
 80013e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80013e6:	e008      	b.n	80013fa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013e8:	f7ff fc2a 	bl	8000c40 <HAL_GetTick>
 80013ec:	4602      	mov	r2, r0
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	1ad3      	subs	r3, r2, r3
 80013f2:	2b64      	cmp	r3, #100	@ 0x64
 80013f4:	d901      	bls.n	80013fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80013f6:	2303      	movs	r3, #3
 80013f8:	e28a      	b.n	8001910 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80013fa:	4b60      	ldr	r3, [pc, #384]	@ (800157c <HAL_RCC_OscConfig+0x27c>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001402:	2b00      	cmp	r3, #0
 8001404:	d1f0      	bne.n	80013e8 <HAL_RCC_OscConfig+0xe8>
 8001406:	e000      	b.n	800140a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001408:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f003 0302 	and.w	r3, r3, #2
 8001412:	2b00      	cmp	r3, #0
 8001414:	d075      	beq.n	8001502 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001416:	4b59      	ldr	r3, [pc, #356]	@ (800157c <HAL_RCC_OscConfig+0x27c>)
 8001418:	689b      	ldr	r3, [r3, #8]
 800141a:	f003 030c 	and.w	r3, r3, #12
 800141e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001420:	4b56      	ldr	r3, [pc, #344]	@ (800157c <HAL_RCC_OscConfig+0x27c>)
 8001422:	68db      	ldr	r3, [r3, #12]
 8001424:	f003 0303 	and.w	r3, r3, #3
 8001428:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800142a:	69bb      	ldr	r3, [r7, #24]
 800142c:	2b0c      	cmp	r3, #12
 800142e:	d102      	bne.n	8001436 <HAL_RCC_OscConfig+0x136>
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	2b02      	cmp	r3, #2
 8001434:	d002      	beq.n	800143c <HAL_RCC_OscConfig+0x13c>
 8001436:	69bb      	ldr	r3, [r7, #24]
 8001438:	2b04      	cmp	r3, #4
 800143a:	d11f      	bne.n	800147c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800143c:	4b4f      	ldr	r3, [pc, #316]	@ (800157c <HAL_RCC_OscConfig+0x27c>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001444:	2b00      	cmp	r3, #0
 8001446:	d005      	beq.n	8001454 <HAL_RCC_OscConfig+0x154>
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	68db      	ldr	r3, [r3, #12]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d101      	bne.n	8001454 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001450:	2301      	movs	r3, #1
 8001452:	e25d      	b.n	8001910 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001454:	4b49      	ldr	r3, [pc, #292]	@ (800157c <HAL_RCC_OscConfig+0x27c>)
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	691b      	ldr	r3, [r3, #16]
 8001460:	061b      	lsls	r3, r3, #24
 8001462:	4946      	ldr	r1, [pc, #280]	@ (800157c <HAL_RCC_OscConfig+0x27c>)
 8001464:	4313      	orrs	r3, r2
 8001466:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001468:	4b45      	ldr	r3, [pc, #276]	@ (8001580 <HAL_RCC_OscConfig+0x280>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4618      	mov	r0, r3
 800146e:	f7ff fb9b 	bl	8000ba8 <HAL_InitTick>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d043      	beq.n	8001500 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001478:	2301      	movs	r3, #1
 800147a:	e249      	b.n	8001910 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	68db      	ldr	r3, [r3, #12]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d023      	beq.n	80014cc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001484:	4b3d      	ldr	r3, [pc, #244]	@ (800157c <HAL_RCC_OscConfig+0x27c>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a3c      	ldr	r2, [pc, #240]	@ (800157c <HAL_RCC_OscConfig+0x27c>)
 800148a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800148e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001490:	f7ff fbd6 	bl	8000c40 <HAL_GetTick>
 8001494:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001496:	e008      	b.n	80014aa <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001498:	f7ff fbd2 	bl	8000c40 <HAL_GetTick>
 800149c:	4602      	mov	r2, r0
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	2b02      	cmp	r3, #2
 80014a4:	d901      	bls.n	80014aa <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80014a6:	2303      	movs	r3, #3
 80014a8:	e232      	b.n	8001910 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014aa:	4b34      	ldr	r3, [pc, #208]	@ (800157c <HAL_RCC_OscConfig+0x27c>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d0f0      	beq.n	8001498 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014b6:	4b31      	ldr	r3, [pc, #196]	@ (800157c <HAL_RCC_OscConfig+0x27c>)
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	691b      	ldr	r3, [r3, #16]
 80014c2:	061b      	lsls	r3, r3, #24
 80014c4:	492d      	ldr	r1, [pc, #180]	@ (800157c <HAL_RCC_OscConfig+0x27c>)
 80014c6:	4313      	orrs	r3, r2
 80014c8:	604b      	str	r3, [r1, #4]
 80014ca:	e01a      	b.n	8001502 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014cc:	4b2b      	ldr	r3, [pc, #172]	@ (800157c <HAL_RCC_OscConfig+0x27c>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a2a      	ldr	r2, [pc, #168]	@ (800157c <HAL_RCC_OscConfig+0x27c>)
 80014d2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80014d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014d8:	f7ff fbb2 	bl	8000c40 <HAL_GetTick>
 80014dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80014de:	e008      	b.n	80014f2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014e0:	f7ff fbae 	bl	8000c40 <HAL_GetTick>
 80014e4:	4602      	mov	r2, r0
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	1ad3      	subs	r3, r2, r3
 80014ea:	2b02      	cmp	r3, #2
 80014ec:	d901      	bls.n	80014f2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80014ee:	2303      	movs	r3, #3
 80014f0:	e20e      	b.n	8001910 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80014f2:	4b22      	ldr	r3, [pc, #136]	@ (800157c <HAL_RCC_OscConfig+0x27c>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d1f0      	bne.n	80014e0 <HAL_RCC_OscConfig+0x1e0>
 80014fe:	e000      	b.n	8001502 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001500:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f003 0308 	and.w	r3, r3, #8
 800150a:	2b00      	cmp	r3, #0
 800150c:	d041      	beq.n	8001592 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	695b      	ldr	r3, [r3, #20]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d01c      	beq.n	8001550 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001516:	4b19      	ldr	r3, [pc, #100]	@ (800157c <HAL_RCC_OscConfig+0x27c>)
 8001518:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800151c:	4a17      	ldr	r2, [pc, #92]	@ (800157c <HAL_RCC_OscConfig+0x27c>)
 800151e:	f043 0301 	orr.w	r3, r3, #1
 8001522:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001526:	f7ff fb8b 	bl	8000c40 <HAL_GetTick>
 800152a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800152c:	e008      	b.n	8001540 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800152e:	f7ff fb87 	bl	8000c40 <HAL_GetTick>
 8001532:	4602      	mov	r2, r0
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	1ad3      	subs	r3, r2, r3
 8001538:	2b02      	cmp	r3, #2
 800153a:	d901      	bls.n	8001540 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800153c:	2303      	movs	r3, #3
 800153e:	e1e7      	b.n	8001910 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001540:	4b0e      	ldr	r3, [pc, #56]	@ (800157c <HAL_RCC_OscConfig+0x27c>)
 8001542:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001546:	f003 0302 	and.w	r3, r3, #2
 800154a:	2b00      	cmp	r3, #0
 800154c:	d0ef      	beq.n	800152e <HAL_RCC_OscConfig+0x22e>
 800154e:	e020      	b.n	8001592 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001550:	4b0a      	ldr	r3, [pc, #40]	@ (800157c <HAL_RCC_OscConfig+0x27c>)
 8001552:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001556:	4a09      	ldr	r2, [pc, #36]	@ (800157c <HAL_RCC_OscConfig+0x27c>)
 8001558:	f023 0301 	bic.w	r3, r3, #1
 800155c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001560:	f7ff fb6e 	bl	8000c40 <HAL_GetTick>
 8001564:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001566:	e00d      	b.n	8001584 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001568:	f7ff fb6a 	bl	8000c40 <HAL_GetTick>
 800156c:	4602      	mov	r2, r0
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	2b02      	cmp	r3, #2
 8001574:	d906      	bls.n	8001584 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001576:	2303      	movs	r3, #3
 8001578:	e1ca      	b.n	8001910 <HAL_RCC_OscConfig+0x610>
 800157a:	bf00      	nop
 800157c:	40021000 	.word	0x40021000
 8001580:	20000044 	.word	0x20000044
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001584:	4b8c      	ldr	r3, [pc, #560]	@ (80017b8 <HAL_RCC_OscConfig+0x4b8>)
 8001586:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800158a:	f003 0302 	and.w	r3, r3, #2
 800158e:	2b00      	cmp	r3, #0
 8001590:	d1ea      	bne.n	8001568 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f003 0304 	and.w	r3, r3, #4
 800159a:	2b00      	cmp	r3, #0
 800159c:	f000 80a6 	beq.w	80016ec <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015a0:	2300      	movs	r3, #0
 80015a2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80015a4:	4b84      	ldr	r3, [pc, #528]	@ (80017b8 <HAL_RCC_OscConfig+0x4b8>)
 80015a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d101      	bne.n	80015b4 <HAL_RCC_OscConfig+0x2b4>
 80015b0:	2301      	movs	r3, #1
 80015b2:	e000      	b.n	80015b6 <HAL_RCC_OscConfig+0x2b6>
 80015b4:	2300      	movs	r3, #0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d00d      	beq.n	80015d6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015ba:	4b7f      	ldr	r3, [pc, #508]	@ (80017b8 <HAL_RCC_OscConfig+0x4b8>)
 80015bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015be:	4a7e      	ldr	r2, [pc, #504]	@ (80017b8 <HAL_RCC_OscConfig+0x4b8>)
 80015c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80015c6:	4b7c      	ldr	r3, [pc, #496]	@ (80017b8 <HAL_RCC_OscConfig+0x4b8>)
 80015c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015ce:	60fb      	str	r3, [r7, #12]
 80015d0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80015d2:	2301      	movs	r3, #1
 80015d4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015d6:	4b79      	ldr	r3, [pc, #484]	@ (80017bc <HAL_RCC_OscConfig+0x4bc>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d118      	bne.n	8001614 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80015e2:	4b76      	ldr	r3, [pc, #472]	@ (80017bc <HAL_RCC_OscConfig+0x4bc>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a75      	ldr	r2, [pc, #468]	@ (80017bc <HAL_RCC_OscConfig+0x4bc>)
 80015e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015ee:	f7ff fb27 	bl	8000c40 <HAL_GetTick>
 80015f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015f4:	e008      	b.n	8001608 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015f6:	f7ff fb23 	bl	8000c40 <HAL_GetTick>
 80015fa:	4602      	mov	r2, r0
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	1ad3      	subs	r3, r2, r3
 8001600:	2b02      	cmp	r3, #2
 8001602:	d901      	bls.n	8001608 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001604:	2303      	movs	r3, #3
 8001606:	e183      	b.n	8001910 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001608:	4b6c      	ldr	r3, [pc, #432]	@ (80017bc <HAL_RCC_OscConfig+0x4bc>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001610:	2b00      	cmp	r3, #0
 8001612:	d0f0      	beq.n	80015f6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	689b      	ldr	r3, [r3, #8]
 8001618:	2b01      	cmp	r3, #1
 800161a:	d108      	bne.n	800162e <HAL_RCC_OscConfig+0x32e>
 800161c:	4b66      	ldr	r3, [pc, #408]	@ (80017b8 <HAL_RCC_OscConfig+0x4b8>)
 800161e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001622:	4a65      	ldr	r2, [pc, #404]	@ (80017b8 <HAL_RCC_OscConfig+0x4b8>)
 8001624:	f043 0301 	orr.w	r3, r3, #1
 8001628:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800162c:	e024      	b.n	8001678 <HAL_RCC_OscConfig+0x378>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	2b05      	cmp	r3, #5
 8001634:	d110      	bne.n	8001658 <HAL_RCC_OscConfig+0x358>
 8001636:	4b60      	ldr	r3, [pc, #384]	@ (80017b8 <HAL_RCC_OscConfig+0x4b8>)
 8001638:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800163c:	4a5e      	ldr	r2, [pc, #376]	@ (80017b8 <HAL_RCC_OscConfig+0x4b8>)
 800163e:	f043 0304 	orr.w	r3, r3, #4
 8001642:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001646:	4b5c      	ldr	r3, [pc, #368]	@ (80017b8 <HAL_RCC_OscConfig+0x4b8>)
 8001648:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800164c:	4a5a      	ldr	r2, [pc, #360]	@ (80017b8 <HAL_RCC_OscConfig+0x4b8>)
 800164e:	f043 0301 	orr.w	r3, r3, #1
 8001652:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001656:	e00f      	b.n	8001678 <HAL_RCC_OscConfig+0x378>
 8001658:	4b57      	ldr	r3, [pc, #348]	@ (80017b8 <HAL_RCC_OscConfig+0x4b8>)
 800165a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800165e:	4a56      	ldr	r2, [pc, #344]	@ (80017b8 <HAL_RCC_OscConfig+0x4b8>)
 8001660:	f023 0301 	bic.w	r3, r3, #1
 8001664:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001668:	4b53      	ldr	r3, [pc, #332]	@ (80017b8 <HAL_RCC_OscConfig+0x4b8>)
 800166a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800166e:	4a52      	ldr	r2, [pc, #328]	@ (80017b8 <HAL_RCC_OscConfig+0x4b8>)
 8001670:	f023 0304 	bic.w	r3, r3, #4
 8001674:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	689b      	ldr	r3, [r3, #8]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d016      	beq.n	80016ae <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001680:	f7ff fade 	bl	8000c40 <HAL_GetTick>
 8001684:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001686:	e00a      	b.n	800169e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001688:	f7ff fada 	bl	8000c40 <HAL_GetTick>
 800168c:	4602      	mov	r2, r0
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001696:	4293      	cmp	r3, r2
 8001698:	d901      	bls.n	800169e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800169a:	2303      	movs	r3, #3
 800169c:	e138      	b.n	8001910 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800169e:	4b46      	ldr	r3, [pc, #280]	@ (80017b8 <HAL_RCC_OscConfig+0x4b8>)
 80016a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016a4:	f003 0302 	and.w	r3, r3, #2
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d0ed      	beq.n	8001688 <HAL_RCC_OscConfig+0x388>
 80016ac:	e015      	b.n	80016da <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016ae:	f7ff fac7 	bl	8000c40 <HAL_GetTick>
 80016b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80016b4:	e00a      	b.n	80016cc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016b6:	f7ff fac3 	bl	8000c40 <HAL_GetTick>
 80016ba:	4602      	mov	r2, r0
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	1ad3      	subs	r3, r2, r3
 80016c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d901      	bls.n	80016cc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80016c8:	2303      	movs	r3, #3
 80016ca:	e121      	b.n	8001910 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80016cc:	4b3a      	ldr	r3, [pc, #232]	@ (80017b8 <HAL_RCC_OscConfig+0x4b8>)
 80016ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016d2:	f003 0302 	and.w	r3, r3, #2
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d1ed      	bne.n	80016b6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80016da:	7ffb      	ldrb	r3, [r7, #31]
 80016dc:	2b01      	cmp	r3, #1
 80016de:	d105      	bne.n	80016ec <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016e0:	4b35      	ldr	r3, [pc, #212]	@ (80017b8 <HAL_RCC_OscConfig+0x4b8>)
 80016e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016e4:	4a34      	ldr	r2, [pc, #208]	@ (80017b8 <HAL_RCC_OscConfig+0x4b8>)
 80016e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80016ea:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f003 0320 	and.w	r3, r3, #32
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d03c      	beq.n	8001772 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	699b      	ldr	r3, [r3, #24]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d01c      	beq.n	800173a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001700:	4b2d      	ldr	r3, [pc, #180]	@ (80017b8 <HAL_RCC_OscConfig+0x4b8>)
 8001702:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001706:	4a2c      	ldr	r2, [pc, #176]	@ (80017b8 <HAL_RCC_OscConfig+0x4b8>)
 8001708:	f043 0301 	orr.w	r3, r3, #1
 800170c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001710:	f7ff fa96 	bl	8000c40 <HAL_GetTick>
 8001714:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001716:	e008      	b.n	800172a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001718:	f7ff fa92 	bl	8000c40 <HAL_GetTick>
 800171c:	4602      	mov	r2, r0
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	2b02      	cmp	r3, #2
 8001724:	d901      	bls.n	800172a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001726:	2303      	movs	r3, #3
 8001728:	e0f2      	b.n	8001910 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800172a:	4b23      	ldr	r3, [pc, #140]	@ (80017b8 <HAL_RCC_OscConfig+0x4b8>)
 800172c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001730:	f003 0302 	and.w	r3, r3, #2
 8001734:	2b00      	cmp	r3, #0
 8001736:	d0ef      	beq.n	8001718 <HAL_RCC_OscConfig+0x418>
 8001738:	e01b      	b.n	8001772 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800173a:	4b1f      	ldr	r3, [pc, #124]	@ (80017b8 <HAL_RCC_OscConfig+0x4b8>)
 800173c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001740:	4a1d      	ldr	r2, [pc, #116]	@ (80017b8 <HAL_RCC_OscConfig+0x4b8>)
 8001742:	f023 0301 	bic.w	r3, r3, #1
 8001746:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800174a:	f7ff fa79 	bl	8000c40 <HAL_GetTick>
 800174e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001750:	e008      	b.n	8001764 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001752:	f7ff fa75 	bl	8000c40 <HAL_GetTick>
 8001756:	4602      	mov	r2, r0
 8001758:	693b      	ldr	r3, [r7, #16]
 800175a:	1ad3      	subs	r3, r2, r3
 800175c:	2b02      	cmp	r3, #2
 800175e:	d901      	bls.n	8001764 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001760:	2303      	movs	r3, #3
 8001762:	e0d5      	b.n	8001910 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001764:	4b14      	ldr	r3, [pc, #80]	@ (80017b8 <HAL_RCC_OscConfig+0x4b8>)
 8001766:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800176a:	f003 0302 	and.w	r3, r3, #2
 800176e:	2b00      	cmp	r3, #0
 8001770:	d1ef      	bne.n	8001752 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	69db      	ldr	r3, [r3, #28]
 8001776:	2b00      	cmp	r3, #0
 8001778:	f000 80c9 	beq.w	800190e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800177c:	4b0e      	ldr	r3, [pc, #56]	@ (80017b8 <HAL_RCC_OscConfig+0x4b8>)
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	f003 030c 	and.w	r3, r3, #12
 8001784:	2b0c      	cmp	r3, #12
 8001786:	f000 8083 	beq.w	8001890 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	69db      	ldr	r3, [r3, #28]
 800178e:	2b02      	cmp	r3, #2
 8001790:	d15e      	bne.n	8001850 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001792:	4b09      	ldr	r3, [pc, #36]	@ (80017b8 <HAL_RCC_OscConfig+0x4b8>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a08      	ldr	r2, [pc, #32]	@ (80017b8 <HAL_RCC_OscConfig+0x4b8>)
 8001798:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800179c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800179e:	f7ff fa4f 	bl	8000c40 <HAL_GetTick>
 80017a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017a4:	e00c      	b.n	80017c0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017a6:	f7ff fa4b 	bl	8000c40 <HAL_GetTick>
 80017aa:	4602      	mov	r2, r0
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	1ad3      	subs	r3, r2, r3
 80017b0:	2b02      	cmp	r3, #2
 80017b2:	d905      	bls.n	80017c0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80017b4:	2303      	movs	r3, #3
 80017b6:	e0ab      	b.n	8001910 <HAL_RCC_OscConfig+0x610>
 80017b8:	40021000 	.word	0x40021000
 80017bc:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017c0:	4b55      	ldr	r3, [pc, #340]	@ (8001918 <HAL_RCC_OscConfig+0x618>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d1ec      	bne.n	80017a6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017cc:	4b52      	ldr	r3, [pc, #328]	@ (8001918 <HAL_RCC_OscConfig+0x618>)
 80017ce:	68da      	ldr	r2, [r3, #12]
 80017d0:	4b52      	ldr	r3, [pc, #328]	@ (800191c <HAL_RCC_OscConfig+0x61c>)
 80017d2:	4013      	ands	r3, r2
 80017d4:	687a      	ldr	r2, [r7, #4]
 80017d6:	6a11      	ldr	r1, [r2, #32]
 80017d8:	687a      	ldr	r2, [r7, #4]
 80017da:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80017dc:	3a01      	subs	r2, #1
 80017de:	0112      	lsls	r2, r2, #4
 80017e0:	4311      	orrs	r1, r2
 80017e2:	687a      	ldr	r2, [r7, #4]
 80017e4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80017e6:	0212      	lsls	r2, r2, #8
 80017e8:	4311      	orrs	r1, r2
 80017ea:	687a      	ldr	r2, [r7, #4]
 80017ec:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80017ee:	0852      	lsrs	r2, r2, #1
 80017f0:	3a01      	subs	r2, #1
 80017f2:	0552      	lsls	r2, r2, #21
 80017f4:	4311      	orrs	r1, r2
 80017f6:	687a      	ldr	r2, [r7, #4]
 80017f8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80017fa:	0852      	lsrs	r2, r2, #1
 80017fc:	3a01      	subs	r2, #1
 80017fe:	0652      	lsls	r2, r2, #25
 8001800:	4311      	orrs	r1, r2
 8001802:	687a      	ldr	r2, [r7, #4]
 8001804:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001806:	06d2      	lsls	r2, r2, #27
 8001808:	430a      	orrs	r2, r1
 800180a:	4943      	ldr	r1, [pc, #268]	@ (8001918 <HAL_RCC_OscConfig+0x618>)
 800180c:	4313      	orrs	r3, r2
 800180e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001810:	4b41      	ldr	r3, [pc, #260]	@ (8001918 <HAL_RCC_OscConfig+0x618>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a40      	ldr	r2, [pc, #256]	@ (8001918 <HAL_RCC_OscConfig+0x618>)
 8001816:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800181a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800181c:	4b3e      	ldr	r3, [pc, #248]	@ (8001918 <HAL_RCC_OscConfig+0x618>)
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	4a3d      	ldr	r2, [pc, #244]	@ (8001918 <HAL_RCC_OscConfig+0x618>)
 8001822:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001826:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001828:	f7ff fa0a 	bl	8000c40 <HAL_GetTick>
 800182c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800182e:	e008      	b.n	8001842 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001830:	f7ff fa06 	bl	8000c40 <HAL_GetTick>
 8001834:	4602      	mov	r2, r0
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	2b02      	cmp	r3, #2
 800183c:	d901      	bls.n	8001842 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800183e:	2303      	movs	r3, #3
 8001840:	e066      	b.n	8001910 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001842:	4b35      	ldr	r3, [pc, #212]	@ (8001918 <HAL_RCC_OscConfig+0x618>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800184a:	2b00      	cmp	r3, #0
 800184c:	d0f0      	beq.n	8001830 <HAL_RCC_OscConfig+0x530>
 800184e:	e05e      	b.n	800190e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001850:	4b31      	ldr	r3, [pc, #196]	@ (8001918 <HAL_RCC_OscConfig+0x618>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a30      	ldr	r2, [pc, #192]	@ (8001918 <HAL_RCC_OscConfig+0x618>)
 8001856:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800185a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800185c:	f7ff f9f0 	bl	8000c40 <HAL_GetTick>
 8001860:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001862:	e008      	b.n	8001876 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001864:	f7ff f9ec 	bl	8000c40 <HAL_GetTick>
 8001868:	4602      	mov	r2, r0
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	2b02      	cmp	r3, #2
 8001870:	d901      	bls.n	8001876 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8001872:	2303      	movs	r3, #3
 8001874:	e04c      	b.n	8001910 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001876:	4b28      	ldr	r3, [pc, #160]	@ (8001918 <HAL_RCC_OscConfig+0x618>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800187e:	2b00      	cmp	r3, #0
 8001880:	d1f0      	bne.n	8001864 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001882:	4b25      	ldr	r3, [pc, #148]	@ (8001918 <HAL_RCC_OscConfig+0x618>)
 8001884:	68da      	ldr	r2, [r3, #12]
 8001886:	4924      	ldr	r1, [pc, #144]	@ (8001918 <HAL_RCC_OscConfig+0x618>)
 8001888:	4b25      	ldr	r3, [pc, #148]	@ (8001920 <HAL_RCC_OscConfig+0x620>)
 800188a:	4013      	ands	r3, r2
 800188c:	60cb      	str	r3, [r1, #12]
 800188e:	e03e      	b.n	800190e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	69db      	ldr	r3, [r3, #28]
 8001894:	2b01      	cmp	r3, #1
 8001896:	d101      	bne.n	800189c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001898:	2301      	movs	r3, #1
 800189a:	e039      	b.n	8001910 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800189c:	4b1e      	ldr	r3, [pc, #120]	@ (8001918 <HAL_RCC_OscConfig+0x618>)
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	f003 0203 	and.w	r2, r3, #3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6a1b      	ldr	r3, [r3, #32]
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d12c      	bne.n	800190a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018ba:	3b01      	subs	r3, #1
 80018bc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018be:	429a      	cmp	r2, r3
 80018c0:	d123      	bne.n	800190a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018cc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80018ce:	429a      	cmp	r2, r3
 80018d0:	d11b      	bne.n	800190a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018dc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80018de:	429a      	cmp	r2, r3
 80018e0:	d113      	bne.n	800190a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ec:	085b      	lsrs	r3, r3, #1
 80018ee:	3b01      	subs	r3, #1
 80018f0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80018f2:	429a      	cmp	r2, r3
 80018f4:	d109      	bne.n	800190a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001900:	085b      	lsrs	r3, r3, #1
 8001902:	3b01      	subs	r3, #1
 8001904:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001906:	429a      	cmp	r2, r3
 8001908:	d001      	beq.n	800190e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800190a:	2301      	movs	r3, #1
 800190c:	e000      	b.n	8001910 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800190e:	2300      	movs	r3, #0
}
 8001910:	4618      	mov	r0, r3
 8001912:	3720      	adds	r7, #32
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}
 8001918:	40021000 	.word	0x40021000
 800191c:	019f800c 	.word	0x019f800c
 8001920:	feeefffc 	.word	0xfeeefffc

08001924 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b086      	sub	sp, #24
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
 800192c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800192e:	2300      	movs	r3, #0
 8001930:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d101      	bne.n	800193c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001938:	2301      	movs	r3, #1
 800193a:	e11e      	b.n	8001b7a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800193c:	4b91      	ldr	r3, [pc, #580]	@ (8001b84 <HAL_RCC_ClockConfig+0x260>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f003 030f 	and.w	r3, r3, #15
 8001944:	683a      	ldr	r2, [r7, #0]
 8001946:	429a      	cmp	r2, r3
 8001948:	d910      	bls.n	800196c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800194a:	4b8e      	ldr	r3, [pc, #568]	@ (8001b84 <HAL_RCC_ClockConfig+0x260>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f023 020f 	bic.w	r2, r3, #15
 8001952:	498c      	ldr	r1, [pc, #560]	@ (8001b84 <HAL_RCC_ClockConfig+0x260>)
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	4313      	orrs	r3, r2
 8001958:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800195a:	4b8a      	ldr	r3, [pc, #552]	@ (8001b84 <HAL_RCC_ClockConfig+0x260>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 030f 	and.w	r3, r3, #15
 8001962:	683a      	ldr	r2, [r7, #0]
 8001964:	429a      	cmp	r2, r3
 8001966:	d001      	beq.n	800196c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001968:	2301      	movs	r3, #1
 800196a:	e106      	b.n	8001b7a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f003 0301 	and.w	r3, r3, #1
 8001974:	2b00      	cmp	r3, #0
 8001976:	d073      	beq.n	8001a60 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	2b03      	cmp	r3, #3
 800197e:	d129      	bne.n	80019d4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001980:	4b81      	ldr	r3, [pc, #516]	@ (8001b88 <HAL_RCC_ClockConfig+0x264>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001988:	2b00      	cmp	r3, #0
 800198a:	d101      	bne.n	8001990 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800198c:	2301      	movs	r3, #1
 800198e:	e0f4      	b.n	8001b7a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001990:	f000 f966 	bl	8001c60 <RCC_GetSysClockFreqFromPLLSource>
 8001994:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	4a7c      	ldr	r2, [pc, #496]	@ (8001b8c <HAL_RCC_ClockConfig+0x268>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d93f      	bls.n	8001a1e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800199e:	4b7a      	ldr	r3, [pc, #488]	@ (8001b88 <HAL_RCC_ClockConfig+0x264>)
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d009      	beq.n	80019be <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d033      	beq.n	8001a1e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d12f      	bne.n	8001a1e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80019be:	4b72      	ldr	r3, [pc, #456]	@ (8001b88 <HAL_RCC_ClockConfig+0x264>)
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80019c6:	4a70      	ldr	r2, [pc, #448]	@ (8001b88 <HAL_RCC_ClockConfig+0x264>)
 80019c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80019cc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80019ce:	2380      	movs	r3, #128	@ 0x80
 80019d0:	617b      	str	r3, [r7, #20]
 80019d2:	e024      	b.n	8001a1e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	2b02      	cmp	r3, #2
 80019da:	d107      	bne.n	80019ec <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019dc:	4b6a      	ldr	r3, [pc, #424]	@ (8001b88 <HAL_RCC_ClockConfig+0x264>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d109      	bne.n	80019fc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	e0c6      	b.n	8001b7a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019ec:	4b66      	ldr	r3, [pc, #408]	@ (8001b88 <HAL_RCC_ClockConfig+0x264>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d101      	bne.n	80019fc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80019f8:	2301      	movs	r3, #1
 80019fa:	e0be      	b.n	8001b7a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80019fc:	f000 f8ce 	bl	8001b9c <HAL_RCC_GetSysClockFreq>
 8001a00:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	4a61      	ldr	r2, [pc, #388]	@ (8001b8c <HAL_RCC_ClockConfig+0x268>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d909      	bls.n	8001a1e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001a0a:	4b5f      	ldr	r3, [pc, #380]	@ (8001b88 <HAL_RCC_ClockConfig+0x264>)
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001a12:	4a5d      	ldr	r2, [pc, #372]	@ (8001b88 <HAL_RCC_ClockConfig+0x264>)
 8001a14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a18:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001a1a:	2380      	movs	r3, #128	@ 0x80
 8001a1c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a1e:	4b5a      	ldr	r3, [pc, #360]	@ (8001b88 <HAL_RCC_ClockConfig+0x264>)
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	f023 0203 	bic.w	r2, r3, #3
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	4957      	ldr	r1, [pc, #348]	@ (8001b88 <HAL_RCC_ClockConfig+0x264>)
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a30:	f7ff f906 	bl	8000c40 <HAL_GetTick>
 8001a34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a36:	e00a      	b.n	8001a4e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a38:	f7ff f902 	bl	8000c40 <HAL_GetTick>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d901      	bls.n	8001a4e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	e095      	b.n	8001b7a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a4e:	4b4e      	ldr	r3, [pc, #312]	@ (8001b88 <HAL_RCC_ClockConfig+0x264>)
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	f003 020c 	and.w	r2, r3, #12
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d1eb      	bne.n	8001a38 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f003 0302 	and.w	r3, r3, #2
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d023      	beq.n	8001ab4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f003 0304 	and.w	r3, r3, #4
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d005      	beq.n	8001a84 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a78:	4b43      	ldr	r3, [pc, #268]	@ (8001b88 <HAL_RCC_ClockConfig+0x264>)
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	4a42      	ldr	r2, [pc, #264]	@ (8001b88 <HAL_RCC_ClockConfig+0x264>)
 8001a7e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001a82:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 0308 	and.w	r3, r3, #8
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d007      	beq.n	8001aa0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001a90:	4b3d      	ldr	r3, [pc, #244]	@ (8001b88 <HAL_RCC_ClockConfig+0x264>)
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8001a98:	4a3b      	ldr	r2, [pc, #236]	@ (8001b88 <HAL_RCC_ClockConfig+0x264>)
 8001a9a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001a9e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001aa0:	4b39      	ldr	r3, [pc, #228]	@ (8001b88 <HAL_RCC_ClockConfig+0x264>)
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	4936      	ldr	r1, [pc, #216]	@ (8001b88 <HAL_RCC_ClockConfig+0x264>)
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	608b      	str	r3, [r1, #8]
 8001ab2:	e008      	b.n	8001ac6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	2b80      	cmp	r3, #128	@ 0x80
 8001ab8:	d105      	bne.n	8001ac6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001aba:	4b33      	ldr	r3, [pc, #204]	@ (8001b88 <HAL_RCC_ClockConfig+0x264>)
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	4a32      	ldr	r2, [pc, #200]	@ (8001b88 <HAL_RCC_ClockConfig+0x264>)
 8001ac0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001ac4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ac6:	4b2f      	ldr	r3, [pc, #188]	@ (8001b84 <HAL_RCC_ClockConfig+0x260>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 030f 	and.w	r3, r3, #15
 8001ace:	683a      	ldr	r2, [r7, #0]
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d21d      	bcs.n	8001b10 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ad4:	4b2b      	ldr	r3, [pc, #172]	@ (8001b84 <HAL_RCC_ClockConfig+0x260>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f023 020f 	bic.w	r2, r3, #15
 8001adc:	4929      	ldr	r1, [pc, #164]	@ (8001b84 <HAL_RCC_ClockConfig+0x260>)
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001ae4:	f7ff f8ac 	bl	8000c40 <HAL_GetTick>
 8001ae8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aea:	e00a      	b.n	8001b02 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001aec:	f7ff f8a8 	bl	8000c40 <HAL_GetTick>
 8001af0:	4602      	mov	r2, r0
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d901      	bls.n	8001b02 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001afe:	2303      	movs	r3, #3
 8001b00:	e03b      	b.n	8001b7a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b02:	4b20      	ldr	r3, [pc, #128]	@ (8001b84 <HAL_RCC_ClockConfig+0x260>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 030f 	and.w	r3, r3, #15
 8001b0a:	683a      	ldr	r2, [r7, #0]
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	d1ed      	bne.n	8001aec <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 0304 	and.w	r3, r3, #4
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d008      	beq.n	8001b2e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b1c:	4b1a      	ldr	r3, [pc, #104]	@ (8001b88 <HAL_RCC_ClockConfig+0x264>)
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	4917      	ldr	r1, [pc, #92]	@ (8001b88 <HAL_RCC_ClockConfig+0x264>)
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 0308 	and.w	r3, r3, #8
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d009      	beq.n	8001b4e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b3a:	4b13      	ldr	r3, [pc, #76]	@ (8001b88 <HAL_RCC_ClockConfig+0x264>)
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	691b      	ldr	r3, [r3, #16]
 8001b46:	00db      	lsls	r3, r3, #3
 8001b48:	490f      	ldr	r1, [pc, #60]	@ (8001b88 <HAL_RCC_ClockConfig+0x264>)
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b4e:	f000 f825 	bl	8001b9c <HAL_RCC_GetSysClockFreq>
 8001b52:	4602      	mov	r2, r0
 8001b54:	4b0c      	ldr	r3, [pc, #48]	@ (8001b88 <HAL_RCC_ClockConfig+0x264>)
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	091b      	lsrs	r3, r3, #4
 8001b5a:	f003 030f 	and.w	r3, r3, #15
 8001b5e:	490c      	ldr	r1, [pc, #48]	@ (8001b90 <HAL_RCC_ClockConfig+0x26c>)
 8001b60:	5ccb      	ldrb	r3, [r1, r3]
 8001b62:	f003 031f 	and.w	r3, r3, #31
 8001b66:	fa22 f303 	lsr.w	r3, r2, r3
 8001b6a:	4a0a      	ldr	r2, [pc, #40]	@ (8001b94 <HAL_RCC_ClockConfig+0x270>)
 8001b6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001b6e:	4b0a      	ldr	r3, [pc, #40]	@ (8001b98 <HAL_RCC_ClockConfig+0x274>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4618      	mov	r0, r3
 8001b74:	f7ff f818 	bl	8000ba8 <HAL_InitTick>
 8001b78:	4603      	mov	r3, r0
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3718      	adds	r7, #24
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	40022000 	.word	0x40022000
 8001b88:	40021000 	.word	0x40021000
 8001b8c:	04c4b400 	.word	0x04c4b400
 8001b90:	08002468 	.word	0x08002468
 8001b94:	20000000 	.word	0x20000000
 8001b98:	20000044 	.word	0x20000044

08001b9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b087      	sub	sp, #28
 8001ba0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001ba2:	4b2c      	ldr	r3, [pc, #176]	@ (8001c54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	f003 030c 	and.w	r3, r3, #12
 8001baa:	2b04      	cmp	r3, #4
 8001bac:	d102      	bne.n	8001bb4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001bae:	4b2a      	ldr	r3, [pc, #168]	@ (8001c58 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001bb0:	613b      	str	r3, [r7, #16]
 8001bb2:	e047      	b.n	8001c44 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001bb4:	4b27      	ldr	r3, [pc, #156]	@ (8001c54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	f003 030c 	and.w	r3, r3, #12
 8001bbc:	2b08      	cmp	r3, #8
 8001bbe:	d102      	bne.n	8001bc6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001bc0:	4b26      	ldr	r3, [pc, #152]	@ (8001c5c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001bc2:	613b      	str	r3, [r7, #16]
 8001bc4:	e03e      	b.n	8001c44 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001bc6:	4b23      	ldr	r3, [pc, #140]	@ (8001c54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	f003 030c 	and.w	r3, r3, #12
 8001bce:	2b0c      	cmp	r3, #12
 8001bd0:	d136      	bne.n	8001c40 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001bd2:	4b20      	ldr	r3, [pc, #128]	@ (8001c54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001bd4:	68db      	ldr	r3, [r3, #12]
 8001bd6:	f003 0303 	and.w	r3, r3, #3
 8001bda:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001bdc:	4b1d      	ldr	r3, [pc, #116]	@ (8001c54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	091b      	lsrs	r3, r3, #4
 8001be2:	f003 030f 	and.w	r3, r3, #15
 8001be6:	3301      	adds	r3, #1
 8001be8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	2b03      	cmp	r3, #3
 8001bee:	d10c      	bne.n	8001c0a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001bf0:	4a1a      	ldr	r2, [pc, #104]	@ (8001c5c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bf8:	4a16      	ldr	r2, [pc, #88]	@ (8001c54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001bfa:	68d2      	ldr	r2, [r2, #12]
 8001bfc:	0a12      	lsrs	r2, r2, #8
 8001bfe:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001c02:	fb02 f303 	mul.w	r3, r2, r3
 8001c06:	617b      	str	r3, [r7, #20]
      break;
 8001c08:	e00c      	b.n	8001c24 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001c0a:	4a13      	ldr	r2, [pc, #76]	@ (8001c58 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c12:	4a10      	ldr	r2, [pc, #64]	@ (8001c54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c14:	68d2      	ldr	r2, [r2, #12]
 8001c16:	0a12      	lsrs	r2, r2, #8
 8001c18:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001c1c:	fb02 f303 	mul.w	r3, r2, r3
 8001c20:	617b      	str	r3, [r7, #20]
      break;
 8001c22:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001c24:	4b0b      	ldr	r3, [pc, #44]	@ (8001c54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c26:	68db      	ldr	r3, [r3, #12]
 8001c28:	0e5b      	lsrs	r3, r3, #25
 8001c2a:	f003 0303 	and.w	r3, r3, #3
 8001c2e:	3301      	adds	r3, #1
 8001c30:	005b      	lsls	r3, r3, #1
 8001c32:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001c34:	697a      	ldr	r2, [r7, #20]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c3c:	613b      	str	r3, [r7, #16]
 8001c3e:	e001      	b.n	8001c44 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001c40:	2300      	movs	r3, #0
 8001c42:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001c44:	693b      	ldr	r3, [r7, #16]
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	371c      	adds	r7, #28
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	40021000 	.word	0x40021000
 8001c58:	00f42400 	.word	0x00f42400
 8001c5c:	007a1200 	.word	0x007a1200

08001c60 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b087      	sub	sp, #28
 8001c64:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001c66:	4b1e      	ldr	r3, [pc, #120]	@ (8001ce0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001c68:	68db      	ldr	r3, [r3, #12]
 8001c6a:	f003 0303 	and.w	r3, r3, #3
 8001c6e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c70:	4b1b      	ldr	r3, [pc, #108]	@ (8001ce0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	091b      	lsrs	r3, r3, #4
 8001c76:	f003 030f 	and.w	r3, r3, #15
 8001c7a:	3301      	adds	r3, #1
 8001c7c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	2b03      	cmp	r3, #3
 8001c82:	d10c      	bne.n	8001c9e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001c84:	4a17      	ldr	r2, [pc, #92]	@ (8001ce4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c8c:	4a14      	ldr	r2, [pc, #80]	@ (8001ce0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001c8e:	68d2      	ldr	r2, [r2, #12]
 8001c90:	0a12      	lsrs	r2, r2, #8
 8001c92:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001c96:	fb02 f303 	mul.w	r3, r2, r3
 8001c9a:	617b      	str	r3, [r7, #20]
    break;
 8001c9c:	e00c      	b.n	8001cb8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001c9e:	4a12      	ldr	r2, [pc, #72]	@ (8001ce8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ca6:	4a0e      	ldr	r2, [pc, #56]	@ (8001ce0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001ca8:	68d2      	ldr	r2, [r2, #12]
 8001caa:	0a12      	lsrs	r2, r2, #8
 8001cac:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001cb0:	fb02 f303 	mul.w	r3, r2, r3
 8001cb4:	617b      	str	r3, [r7, #20]
    break;
 8001cb6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001cb8:	4b09      	ldr	r3, [pc, #36]	@ (8001ce0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	0e5b      	lsrs	r3, r3, #25
 8001cbe:	f003 0303 	and.w	r3, r3, #3
 8001cc2:	3301      	adds	r3, #1
 8001cc4:	005b      	lsls	r3, r3, #1
 8001cc6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001cc8:	697a      	ldr	r2, [r7, #20]
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cd0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001cd2:	687b      	ldr	r3, [r7, #4]
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	371c      	adds	r7, #28
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr
 8001ce0:	40021000 	.word	0x40021000
 8001ce4:	007a1200 	.word	0x007a1200
 8001ce8:	00f42400 	.word	0x00f42400

08001cec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b084      	sub	sp, #16
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d101      	bne.n	8001cfe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e09d      	b.n	8001e3a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d108      	bne.n	8001d18 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001d0e:	d009      	beq.n	8001d24 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2200      	movs	r2, #0
 8001d14:	61da      	str	r2, [r3, #28]
 8001d16:	e005      	b.n	8001d24 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2200      	movs	r2, #0
 8001d22:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2200      	movs	r2, #0
 8001d28:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d106      	bne.n	8001d44 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	f7fe fb52 	bl	80003e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2202      	movs	r2, #2
 8001d48:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001d5a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8001d64:	d902      	bls.n	8001d6c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001d66:	2300      	movs	r3, #0
 8001d68:	60fb      	str	r3, [r7, #12]
 8001d6a:	e002      	b.n	8001d72 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001d6c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d70:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	68db      	ldr	r3, [r3, #12]
 8001d76:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8001d7a:	d007      	beq.n	8001d8c <HAL_SPI_Init+0xa0>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8001d84:	d002      	beq.n	8001d8c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8001d9c:	431a      	orrs	r2, r3
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	691b      	ldr	r3, [r3, #16]
 8001da2:	f003 0302 	and.w	r3, r3, #2
 8001da6:	431a      	orrs	r2, r3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	695b      	ldr	r3, [r3, #20]
 8001dac:	f003 0301 	and.w	r3, r3, #1
 8001db0:	431a      	orrs	r2, r3
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	699b      	ldr	r3, [r3, #24]
 8001db6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001dba:	431a      	orrs	r2, r3
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	69db      	ldr	r3, [r3, #28]
 8001dc0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001dc4:	431a      	orrs	r2, r3
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6a1b      	ldr	r3, [r3, #32]
 8001dca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001dce:	ea42 0103 	orr.w	r1, r2, r3
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dd6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	430a      	orrs	r2, r1
 8001de0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	699b      	ldr	r3, [r3, #24]
 8001de6:	0c1b      	lsrs	r3, r3, #16
 8001de8:	f003 0204 	and.w	r2, r3, #4
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001df0:	f003 0310 	and.w	r3, r3, #16
 8001df4:	431a      	orrs	r2, r3
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001dfa:	f003 0308 	and.w	r3, r3, #8
 8001dfe:	431a      	orrs	r2, r3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8001e08:	ea42 0103 	orr.w	r1, r2, r3
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	430a      	orrs	r2, r1
 8001e18:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	69da      	ldr	r2, [r3, #28]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001e28:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2201      	movs	r2, #1
 8001e34:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8001e38:	2300      	movs	r3, #0
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3710      	adds	r7, #16
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}

08001e42 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e42:	b580      	push	{r7, lr}
 8001e44:	b088      	sub	sp, #32
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	60f8      	str	r0, [r7, #12]
 8001e4a:	60b9      	str	r1, [r7, #8]
 8001e4c:	603b      	str	r3, [r7, #0]
 8001e4e:	4613      	mov	r3, r2
 8001e50:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001e52:	f7fe fef5 	bl	8000c40 <HAL_GetTick>
 8001e56:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8001e58:	88fb      	ldrh	r3, [r7, #6]
 8001e5a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d001      	beq.n	8001e6c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8001e68:	2302      	movs	r3, #2
 8001e6a:	e15c      	b.n	8002126 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d002      	beq.n	8001e78 <HAL_SPI_Transmit+0x36>
 8001e72:	88fb      	ldrh	r3, [r7, #6]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d101      	bne.n	8001e7c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	e154      	b.n	8002126 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d101      	bne.n	8001e8a <HAL_SPI_Transmit+0x48>
 8001e86:	2302      	movs	r3, #2
 8001e88:	e14d      	b.n	8002126 <HAL_SPI_Transmit+0x2e4>
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	2203      	movs	r2, #3
 8001e96:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	68ba      	ldr	r2, [r7, #8]
 8001ea4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	88fa      	ldrh	r2, [r7, #6]
 8001eaa:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	88fa      	ldrh	r2, [r7, #6]
 8001eb0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	2200      	movs	r2, #0
 8001ecc:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001edc:	d10f      	bne.n	8001efe <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001eec:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001efc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f08:	2b40      	cmp	r3, #64	@ 0x40
 8001f0a:	d007      	beq.n	8001f1c <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001f1a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8001f24:	d952      	bls.n	8001fcc <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d002      	beq.n	8001f34 <HAL_SPI_Transmit+0xf2>
 8001f2e:	8b7b      	ldrh	r3, [r7, #26]
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	d145      	bne.n	8001fc0 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f38:	881a      	ldrh	r2, [r3, #0]
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f44:	1c9a      	adds	r2, r3, #2
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001f4e:	b29b      	uxth	r3, r3
 8001f50:	3b01      	subs	r3, #1
 8001f52:	b29a      	uxth	r2, r3
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001f58:	e032      	b.n	8001fc0 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	f003 0302 	and.w	r3, r3, #2
 8001f64:	2b02      	cmp	r3, #2
 8001f66:	d112      	bne.n	8001f8e <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f6c:	881a      	ldrh	r2, [r3, #0]
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f78:	1c9a      	adds	r2, r3, #2
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001f82:	b29b      	uxth	r3, r3
 8001f84:	3b01      	subs	r3, #1
 8001f86:	b29a      	uxth	r2, r3
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8001f8c:	e018      	b.n	8001fc0 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001f8e:	f7fe fe57 	bl	8000c40 <HAL_GetTick>
 8001f92:	4602      	mov	r2, r0
 8001f94:	69fb      	ldr	r3, [r7, #28]
 8001f96:	1ad3      	subs	r3, r2, r3
 8001f98:	683a      	ldr	r2, [r7, #0]
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	d803      	bhi.n	8001fa6 <HAL_SPI_Transmit+0x164>
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fa4:	d102      	bne.n	8001fac <HAL_SPI_Transmit+0x16a>
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d109      	bne.n	8001fc0 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	2201      	movs	r2, #1
 8001fb0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	e0b2      	b.n	8002126 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001fc4:	b29b      	uxth	r3, r3
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d1c7      	bne.n	8001f5a <HAL_SPI_Transmit+0x118>
 8001fca:	e083      	b.n	80020d4 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d002      	beq.n	8001fda <HAL_SPI_Transmit+0x198>
 8001fd4:	8b7b      	ldrh	r3, [r7, #26]
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d177      	bne.n	80020ca <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001fde:	b29b      	uxth	r3, r3
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d912      	bls.n	800200a <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fe8:	881a      	ldrh	r2, [r3, #0]
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ff4:	1c9a      	adds	r2, r3, #2
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001ffe:	b29b      	uxth	r3, r3
 8002000:	3b02      	subs	r3, #2
 8002002:	b29a      	uxth	r2, r3
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002008:	e05f      	b.n	80020ca <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	330c      	adds	r3, #12
 8002014:	7812      	ldrb	r2, [r2, #0]
 8002016:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800201c:	1c5a      	adds	r2, r3, #1
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002026:	b29b      	uxth	r3, r3
 8002028:	3b01      	subs	r3, #1
 800202a:	b29a      	uxth	r2, r3
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002030:	e04b      	b.n	80020ca <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	f003 0302 	and.w	r3, r3, #2
 800203c:	2b02      	cmp	r3, #2
 800203e:	d12b      	bne.n	8002098 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002044:	b29b      	uxth	r3, r3
 8002046:	2b01      	cmp	r3, #1
 8002048:	d912      	bls.n	8002070 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800204e:	881a      	ldrh	r2, [r3, #0]
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800205a:	1c9a      	adds	r2, r3, #2
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002064:	b29b      	uxth	r3, r3
 8002066:	3b02      	subs	r3, #2
 8002068:	b29a      	uxth	r2, r3
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800206e:	e02c      	b.n	80020ca <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	330c      	adds	r3, #12
 800207a:	7812      	ldrb	r2, [r2, #0]
 800207c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002082:	1c5a      	adds	r2, r3, #1
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800208c:	b29b      	uxth	r3, r3
 800208e:	3b01      	subs	r3, #1
 8002090:	b29a      	uxth	r2, r3
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002096:	e018      	b.n	80020ca <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002098:	f7fe fdd2 	bl	8000c40 <HAL_GetTick>
 800209c:	4602      	mov	r2, r0
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	683a      	ldr	r2, [r7, #0]
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d803      	bhi.n	80020b0 <HAL_SPI_Transmit+0x26e>
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020ae:	d102      	bne.n	80020b6 <HAL_SPI_Transmit+0x274>
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d109      	bne.n	80020ca <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	2201      	movs	r2, #1
 80020ba:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	2200      	movs	r2, #0
 80020c2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80020c6:	2303      	movs	r3, #3
 80020c8:	e02d      	b.n	8002126 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80020ce:	b29b      	uxth	r3, r3
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d1ae      	bne.n	8002032 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80020d4:	69fa      	ldr	r2, [r7, #28]
 80020d6:	6839      	ldr	r1, [r7, #0]
 80020d8:	68f8      	ldr	r0, [r7, #12]
 80020da:	f000 f947 	bl	800236c <SPI_EndRxTxTransaction>
 80020de:	4603      	mov	r3, r0
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d002      	beq.n	80020ea <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	2220      	movs	r2, #32
 80020e8:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d10a      	bne.n	8002108 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80020f2:	2300      	movs	r3, #0
 80020f4:	617b      	str	r3, [r7, #20]
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	617b      	str	r3, [r7, #20]
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	617b      	str	r3, [r7, #20]
 8002106:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	2201      	movs	r2, #1
 800210c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	2200      	movs	r2, #0
 8002114:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800211c:	2b00      	cmp	r3, #0
 800211e:	d001      	beq.n	8002124 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	e000      	b.n	8002126 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8002124:	2300      	movs	r3, #0
  }
}
 8002126:	4618      	mov	r0, r3
 8002128:	3720      	adds	r7, #32
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
	...

08002130 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b088      	sub	sp, #32
 8002134:	af00      	add	r7, sp, #0
 8002136:	60f8      	str	r0, [r7, #12]
 8002138:	60b9      	str	r1, [r7, #8]
 800213a:	603b      	str	r3, [r7, #0]
 800213c:	4613      	mov	r3, r2
 800213e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002140:	f7fe fd7e 	bl	8000c40 <HAL_GetTick>
 8002144:	4602      	mov	r2, r0
 8002146:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002148:	1a9b      	subs	r3, r3, r2
 800214a:	683a      	ldr	r2, [r7, #0]
 800214c:	4413      	add	r3, r2
 800214e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002150:	f7fe fd76 	bl	8000c40 <HAL_GetTick>
 8002154:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002156:	4b39      	ldr	r3, [pc, #228]	@ (800223c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	015b      	lsls	r3, r3, #5
 800215c:	0d1b      	lsrs	r3, r3, #20
 800215e:	69fa      	ldr	r2, [r7, #28]
 8002160:	fb02 f303 	mul.w	r3, r2, r3
 8002164:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002166:	e054      	b.n	8002212 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800216e:	d050      	beq.n	8002212 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002170:	f7fe fd66 	bl	8000c40 <HAL_GetTick>
 8002174:	4602      	mov	r2, r0
 8002176:	69bb      	ldr	r3, [r7, #24]
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	69fa      	ldr	r2, [r7, #28]
 800217c:	429a      	cmp	r2, r3
 800217e:	d902      	bls.n	8002186 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002180:	69fb      	ldr	r3, [r7, #28]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d13d      	bne.n	8002202 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	685a      	ldr	r2, [r3, #4]
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002194:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800219e:	d111      	bne.n	80021c4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80021a8:	d004      	beq.n	80021b4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021b2:	d107      	bne.n	80021c4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80021c2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80021cc:	d10f      	bne.n	80021ee <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80021dc:	601a      	str	r2, [r3, #0]
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80021ec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	2201      	movs	r2, #1
 80021f2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	2200      	movs	r2, #0
 80021fa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80021fe:	2303      	movs	r3, #3
 8002200:	e017      	b.n	8002232 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d101      	bne.n	800220c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002208:	2300      	movs	r3, #0
 800220a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	3b01      	subs	r3, #1
 8002210:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	689a      	ldr	r2, [r3, #8]
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	4013      	ands	r3, r2
 800221c:	68ba      	ldr	r2, [r7, #8]
 800221e:	429a      	cmp	r2, r3
 8002220:	bf0c      	ite	eq
 8002222:	2301      	moveq	r3, #1
 8002224:	2300      	movne	r3, #0
 8002226:	b2db      	uxtb	r3, r3
 8002228:	461a      	mov	r2, r3
 800222a:	79fb      	ldrb	r3, [r7, #7]
 800222c:	429a      	cmp	r2, r3
 800222e:	d19b      	bne.n	8002168 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002230:	2300      	movs	r3, #0
}
 8002232:	4618      	mov	r0, r3
 8002234:	3720      	adds	r7, #32
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	20000000 	.word	0x20000000

08002240 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b08a      	sub	sp, #40	@ 0x28
 8002244:	af00      	add	r7, sp, #0
 8002246:	60f8      	str	r0, [r7, #12]
 8002248:	60b9      	str	r1, [r7, #8]
 800224a:	607a      	str	r2, [r7, #4]
 800224c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800224e:	2300      	movs	r3, #0
 8002250:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002252:	f7fe fcf5 	bl	8000c40 <HAL_GetTick>
 8002256:	4602      	mov	r2, r0
 8002258:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800225a:	1a9b      	subs	r3, r3, r2
 800225c:	683a      	ldr	r2, [r7, #0]
 800225e:	4413      	add	r3, r2
 8002260:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8002262:	f7fe fced 	bl	8000c40 <HAL_GetTick>
 8002266:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	330c      	adds	r3, #12
 800226e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002270:	4b3d      	ldr	r3, [pc, #244]	@ (8002368 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	4613      	mov	r3, r2
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	4413      	add	r3, r2
 800227a:	00da      	lsls	r2, r3, #3
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	0d1b      	lsrs	r3, r3, #20
 8002280:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002282:	fb02 f303 	mul.w	r3, r2, r3
 8002286:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002288:	e060      	b.n	800234c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8002290:	d107      	bne.n	80022a2 <SPI_WaitFifoStateUntilTimeout+0x62>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d104      	bne.n	80022a2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002298:	69fb      	ldr	r3, [r7, #28]
 800229a:	781b      	ldrb	r3, [r3, #0]
 800229c:	b2db      	uxtb	r3, r3
 800229e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80022a0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022a8:	d050      	beq.n	800234c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80022aa:	f7fe fcc9 	bl	8000c40 <HAL_GetTick>
 80022ae:	4602      	mov	r2, r0
 80022b0:	6a3b      	ldr	r3, [r7, #32]
 80022b2:	1ad3      	subs	r3, r2, r3
 80022b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80022b6:	429a      	cmp	r2, r3
 80022b8:	d902      	bls.n	80022c0 <SPI_WaitFifoStateUntilTimeout+0x80>
 80022ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d13d      	bne.n	800233c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	685a      	ldr	r2, [r3, #4]
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80022ce:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80022d8:	d111      	bne.n	80022fe <SPI_WaitFifoStateUntilTimeout+0xbe>
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80022e2:	d004      	beq.n	80022ee <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022ec:	d107      	bne.n	80022fe <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80022fc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002302:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002306:	d10f      	bne.n	8002328 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002316:	601a      	str	r2, [r3, #0]
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002326:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2201      	movs	r2, #1
 800232c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	2200      	movs	r2, #0
 8002334:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8002338:	2303      	movs	r3, #3
 800233a:	e010      	b.n	800235e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800233c:	69bb      	ldr	r3, [r7, #24]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d101      	bne.n	8002346 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8002342:	2300      	movs	r3, #0
 8002344:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8002346:	69bb      	ldr	r3, [r7, #24]
 8002348:	3b01      	subs	r3, #1
 800234a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	689a      	ldr	r2, [r3, #8]
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	4013      	ands	r3, r2
 8002356:	687a      	ldr	r2, [r7, #4]
 8002358:	429a      	cmp	r2, r3
 800235a:	d196      	bne.n	800228a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800235c:	2300      	movs	r3, #0
}
 800235e:	4618      	mov	r0, r3
 8002360:	3728      	adds	r7, #40	@ 0x28
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	20000000 	.word	0x20000000

0800236c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b086      	sub	sp, #24
 8002370:	af02      	add	r7, sp, #8
 8002372:	60f8      	str	r0, [r7, #12]
 8002374:	60b9      	str	r1, [r7, #8]
 8002376:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	9300      	str	r3, [sp, #0]
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	2200      	movs	r2, #0
 8002380:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8002384:	68f8      	ldr	r0, [r7, #12]
 8002386:	f7ff ff5b 	bl	8002240 <SPI_WaitFifoStateUntilTimeout>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d007      	beq.n	80023a0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002394:	f043 0220 	orr.w	r2, r3, #32
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800239c:	2303      	movs	r3, #3
 800239e:	e027      	b.n	80023f0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	9300      	str	r3, [sp, #0]
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	2200      	movs	r2, #0
 80023a8:	2180      	movs	r1, #128	@ 0x80
 80023aa:	68f8      	ldr	r0, [r7, #12]
 80023ac:	f7ff fec0 	bl	8002130 <SPI_WaitFlagStateUntilTimeout>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d007      	beq.n	80023c6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023ba:	f043 0220 	orr.w	r2, r3, #32
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80023c2:	2303      	movs	r3, #3
 80023c4:	e014      	b.n	80023f0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	9300      	str	r3, [sp, #0]
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	2200      	movs	r2, #0
 80023ce:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80023d2:	68f8      	ldr	r0, [r7, #12]
 80023d4:	f7ff ff34 	bl	8002240 <SPI_WaitFifoStateUntilTimeout>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d007      	beq.n	80023ee <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023e2:	f043 0220 	orr.w	r2, r3, #32
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80023ea:	2303      	movs	r3, #3
 80023ec:	e000      	b.n	80023f0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80023ee:	2300      	movs	r3, #0
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3710      	adds	r7, #16
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}

080023f8 <memset>:
 80023f8:	4402      	add	r2, r0
 80023fa:	4603      	mov	r3, r0
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d100      	bne.n	8002402 <memset+0xa>
 8002400:	4770      	bx	lr
 8002402:	f803 1b01 	strb.w	r1, [r3], #1
 8002406:	e7f9      	b.n	80023fc <memset+0x4>

08002408 <__libc_init_array>:
 8002408:	b570      	push	{r4, r5, r6, lr}
 800240a:	4d0d      	ldr	r5, [pc, #52]	@ (8002440 <__libc_init_array+0x38>)
 800240c:	4c0d      	ldr	r4, [pc, #52]	@ (8002444 <__libc_init_array+0x3c>)
 800240e:	1b64      	subs	r4, r4, r5
 8002410:	10a4      	asrs	r4, r4, #2
 8002412:	2600      	movs	r6, #0
 8002414:	42a6      	cmp	r6, r4
 8002416:	d109      	bne.n	800242c <__libc_init_array+0x24>
 8002418:	4d0b      	ldr	r5, [pc, #44]	@ (8002448 <__libc_init_array+0x40>)
 800241a:	4c0c      	ldr	r4, [pc, #48]	@ (800244c <__libc_init_array+0x44>)
 800241c:	f000 f818 	bl	8002450 <_init>
 8002420:	1b64      	subs	r4, r4, r5
 8002422:	10a4      	asrs	r4, r4, #2
 8002424:	2600      	movs	r6, #0
 8002426:	42a6      	cmp	r6, r4
 8002428:	d105      	bne.n	8002436 <__libc_init_array+0x2e>
 800242a:	bd70      	pop	{r4, r5, r6, pc}
 800242c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002430:	4798      	blx	r3
 8002432:	3601      	adds	r6, #1
 8002434:	e7ee      	b.n	8002414 <__libc_init_array+0xc>
 8002436:	f855 3b04 	ldr.w	r3, [r5], #4
 800243a:	4798      	blx	r3
 800243c:	3601      	adds	r6, #1
 800243e:	e7f2      	b.n	8002426 <__libc_init_array+0x1e>
 8002440:	08002578 	.word	0x08002578
 8002444:	08002578 	.word	0x08002578
 8002448:	08002578 	.word	0x08002578
 800244c:	0800257c 	.word	0x0800257c

08002450 <_init>:
 8002450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002452:	bf00      	nop
 8002454:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002456:	bc08      	pop	{r3}
 8002458:	469e      	mov	lr, r3
 800245a:	4770      	bx	lr

0800245c <_fini>:
 800245c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800245e:	bf00      	nop
 8002460:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002462:	bc08      	pop	{r3}
 8002464:	469e      	mov	lr, r3
 8002466:	4770      	bx	lr
